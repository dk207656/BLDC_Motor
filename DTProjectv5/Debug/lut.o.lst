   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "lut.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .global rtConstP_lut
  20              	 .section .rodata.rtConstP_lut,"a",%progbits
  21              	 .align 3
  24              	rtConstP_lut:
  25 0000 00000000 	 .word 0
  26 0004 00005B40 	 .word 1079705600
  27 0008 00000000 	 .word 0
  28 000c 00005840 	 .word 1079508992
  29 0010 00000000 	 .word 0
  30 0014 00005740 	 .word 1079443456
  31 0018 00000000 	 .word 0
  32 001c 00805540 	 .word 1079345152
  33 0020 00000000 	 .word 0
  34 0024 00005540 	 .word 1079312384
  35 0028 00000000 	 .word 0
  36 002c 00005440 	 .word 1079246848
  37 0030 00000000 	 .word 0
  38 0034 00805340 	 .word 1079214080
  39 0038 00000000 	 .word 0
  40 003c 00005340 	 .word 1079181312
  41 0040 00000000 	 .word 0
  42 0044 00805240 	 .word 1079148544
  43 0048 00000000 	 .word 0
  44 004c 00C05240 	 .word 1079164928
  45 0050 00000000 	 .word 0
  46 0054 00005240 	 .word 1079115776
  47 0058 00000000 	 .word 0
  48 005c 00805140 	 .word 1079083008
  49 0060 00000000 	 .word 0
  50 0064 00004540 	 .word 1078263808
  51 0068 00000000 	 .word 0
  52 006c 00004340 	 .word 1078132736
  53 0070 00000000 	 .word 0
  54 0074 00004240 	 .word 1078067200
  55 0078 00000000 	 .word 0
  56 007c 00004140 	 .word 1078001664
  57 0080 00000000 	 .word 0
  58 0084 00004040 	 .word 1077936128
  59 0088 00000000 	 .word 0
  60 008c 00003E40 	 .word 1077805056
  61 0090 00000000 	 .space 16
  61      00000000 
  61      00000000 
  61      00000000 
  62 00a0 CDCCCCCC 	 .word -858993459
  63 00a4 CCCCF03F 	 .word 1072745676
  64 00a8 66666666 	 .word 1717986918
  65 00ac 6666F23F 	 .word 1072850534
  66 00b0 33333333 	 .word 858993459
  67 00b4 3333F33F 	 .word 1072902963
  68 00b8 CDCCCCCC 	 .word -858993459
  69 00bc CCCCF43F 	 .word 1073007820
  70 00c0 66666666 	 .word 1717986918
  71 00c4 6666F63F 	 .word 1073112678
  72 00c8 00000000 	 .word 0
  73 00cc 0000F83F 	 .word 1073217536
  74 00d0 9A999999 	 .word -1717986918
  75 00d4 9999F93F 	 .word 1073322393
  76 00d8 33333333 	 .word 858993459
  77 00dc 3333FB3F 	 .word 1073427251
  78 00e0 66666666 	 .word 1717986918
  79 00e4 6666FE3F 	 .word 1073636966
  80 00e8 00000000 	 .word 0
  81 00ec 00000040 	 .word 1073741824
  82 00f0 CDCCCCCC 	 .word -858993459
  83 00f4 CCCC0040 	 .word 1073794252
  84 00f8 9A999999 	 .word -1717986918
  85 00fc 99990140 	 .word 1073846681
  86 0100 33333333 	 .word 858993459
  87 0104 33330340 	 .word 1073951539
  88 0108 CDCCCCCC 	 .word -858993459
  89 010c CCCC0440 	 .word 1074056396
  90 0110 66666666 	 .word 1717986918
  91 0114 66660640 	 .word 1074161254
  92 0118 00000000 	 .word 0
  93 011c 00000840 	 .word 1074266112
  94 0120 33333333 	 .word 858993459
  95 0124 33330940 	 .word 1074344755
  96 0128 00000000 	 .word 0
  97 012c 00000A40 	 .word 1074397184
  98 0130 00000000 	 .space 16
  98      00000000 
  98      00000000 
  98      00000000 
  99              	 .comm rtU_lut,8,8
 100              	 .comm rtY_lut,8,8
 101              	 .global __aeabi_dcmpge
 102              	 .global __aeabi_dcmpgt
 103              	 .global __aeabi_dsub
 104              	 .global __aeabi_dcmple
 105              	 .section .text.plook_u32d_binckan,"ax",%progbits
 106              	 .align 2
 107              	 .global plook_u32d_binckan
 108              	 .thumb
 109              	 .thumb_func
 111              	plook_u32d_binckan:
 112              	.LFB169:
 113              	 .file 1 "../lut.c"
   1:../lut.c      **** /*
   2:../lut.c      ****  * Academic License - for use in teaching, academic research, and meeting
   3:../lut.c      ****  * course requirements at degree granting institutions only.  Not for
   4:../lut.c      ****  * government, commercial, or other organizational use.
   5:../lut.c      ****  *
   6:../lut.c      ****  * File: lut.c
   7:../lut.c      ****  *
   8:../lut.c      ****  * Code generated for Simulink model : lut.
   9:../lut.c      ****  * Model version      : 1.12
  10:../lut.c      ****  * Simulink Coder version    : 8.12 (R2017a) 16-Feb-2017
  11:../lut.c      ****  * TLC version       : 8.12 (Feb 10 2017)
  12:../lut.c      ****  * C/C++ source code generated on  : Wed Jun 12 16:08:18 2019
  13:../lut.c      ****  *
  14:../lut.c      ****  * Target selection: Infineon_XMC_Family.tlc
  15:../lut.c      ****  * Embedded hardware selection: ARM Compatible->ARM Cortex
  16:../lut.c      ****  * Code generation objective: Debugging
  17:../lut.c      ****  * Validation result: Not run
  18:../lut.c      ****  */
  19:../lut.c      **** 
  20:../lut.c      **** #include "lut.h"
  21:../lut.c      **** 
  22:../lut.c      **** /* Constant parameters (auto storage) */
  23:../lut.c      **** const ConstP_lut rtConstP_lut = {
  24:../lut.c      ****   /* Expression: [108,96,92,86,80,78,76,72,70,42,38,34,32,30]
  25:../lut.c      ****    * Referenced by: '<Root>/1-D Lookup Table1'
  26:../lut.c      ****    */
  27:../lut.c      ****   { 108.0, 96.0, 92.0, 86.0, 84.0, 80.0, 78.0, 76.0, 74.0, 75.0, 72.0, 70.0, 42.0, 38.0, 36.0, 34.0
  28:../lut.c      **** 
  29:../lut.c      ****   /* Expression: [1.05, 1.15, 1.2, 1.3, 1.45, 1.55, 1.7, 2.1, 2.2, 2.35, 2.6, 3, 3.15, 3.25]
  30:../lut.c      ****    * Referenced by: '<Root>/1-D Lookup Table1'
  31:../lut.c      ****    */
  32:../lut.c      ****   { 1.05, 1.15, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.9, 2.0,	2.1, 2.2, 2.4, 2.6, 2.8, 3.0, 3.15, 3.25}
  33:../lut.c      **** };
  34:../lut.c      **** 
  35:../lut.c      **** /* External inputs (root inport signals with auto storage) */
  36:../lut.c      **** ExtU_lut rtU_lut;
  37:../lut.c      **** 
  38:../lut.c      **** /* External outputs (root outports fed by signals with auto storage) */
  39:../lut.c      **** ExtY_lut rtY_lut;
  40:../lut.c      **** uint32_T plook_u32d_binckan(real_T u, const real_T bp[], uint32_T maxIndex);
  41:../lut.c      **** uint32_T binsearch_u32d(real_T u, const real_T bp[], uint32_T startIndex,
  42:../lut.c      ****   uint32_T maxIndex);
  43:../lut.c      **** uint32_T plook_u32d_binckan(real_T u, const real_T bp[], uint32_T maxIndex)
  44:../lut.c      **** {
 114              	 .loc 1 44 0
 115              	 .cfi_startproc
 116              	 
 117              	 
 118 0000 B0B5     	 push {r4,r5,r7,lr}
 119              	.LCFI0:
 120              	 .cfi_def_cfa_offset 16
 121              	 .cfi_offset 4,-16
 122              	 .cfi_offset 5,-12
 123              	 .cfi_offset 7,-8
 124              	 .cfi_offset 14,-4
 125 0002 88B0     	 sub sp,sp,#32
 126              	.LCFI1:
 127              	 .cfi_def_cfa_offset 48
 128 0004 02AF     	 add r7,sp,#8
 129              	.LCFI2:
 130              	 .cfi_def_cfa 7,40
 131 0006 C7E90201 	 strd r0,[r7,#8]
 132 000a 7A60     	 str r2,[r7,#4]
 133 000c 3B60     	 str r3,[r7]
  45:../lut.c      ****   uint32_T bpIndex;
  46:../lut.c      **** 
  47:../lut.c      ****   /* Prelookup - Index only
  48:../lut.c      ****      Index Search method: 'binary'
  49:../lut.c      ****      Interpolation method: 'Use nearest'
  50:../lut.c      ****      Extrapolation method: 'Clip'
  51:../lut.c      ****      Use previous index: 'off'
  52:../lut.c      ****      Use last breakpoint for index at or above upper limit: 'on'
  53:../lut.c      ****      Remove protection against out-of-range input in generated code: 'off'
  54:../lut.c      ****    */
  55:../lut.c      ****   if (u <= bp[0U]) {
 134              	 .loc 1 55 0
 135 000e 7B68     	 ldr r3,[r7,#4]
 136 0010 D3E90023 	 ldrd r2,[r3]
 137 0014 1046     	 mov r0,r2
 138 0016 1946     	 mov r1,r3
 139 0018 D7E90223 	 ldrd r2,[r7,#8]
 140 001c FFF7FEFF 	 bl __aeabi_dcmpge
 141 0020 0346     	 mov r3,r0
 142 0022 002B     	 cmp r3,#0
 143 0024 02D0     	 beq .L13
  56:../lut.c      ****     bpIndex = 0U;
 144              	 .loc 1 56 0
 145 0026 0023     	 movs r3,#0
 146 0028 7B61     	 str r3,[r7,#20]
 147 002a 44E0     	 b .L4
 148              	.L13:
  57:../lut.c      ****   } else if (u < bp[maxIndex]) {
 149              	 .loc 1 57 0
 150 002c 3B68     	 ldr r3,[r7]
 151 002e DB00     	 lsls r3,r3,#3
 152 0030 7A68     	 ldr r2,[r7,#4]
 153 0032 1344     	 add r3,r3,r2
 154 0034 D3E90023 	 ldrd r2,[r3]
 155 0038 1046     	 mov r0,r2
 156 003a 1946     	 mov r1,r3
 157 003c D7E90223 	 ldrd r2,[r7,#8]
 158 0040 FFF7FEFF 	 bl __aeabi_dcmpgt
 159 0044 0346     	 mov r3,r0
 160 0046 002B     	 cmp r3,#0
 161 0048 33D0     	 beq .L14
  58:../lut.c      ****     bpIndex = binsearch_u32d(u, bp, maxIndex >> 1U, maxIndex);
 162              	 .loc 1 58 0
 163 004a 3B68     	 ldr r3,[r7]
 164 004c 5C08     	 lsrs r4,r3,#1
 165 004e 3B68     	 ldr r3,[r7]
 166 0050 0093     	 str r3,[sp]
 167 0052 D7E90201 	 ldrd r0,[r7,#8]
 168 0056 7A68     	 ldr r2,[r7,#4]
 169 0058 2346     	 mov r3,r4
 170 005a FFF7FEFF 	 bl binsearch_u32d
 171 005e 7861     	 str r0,[r7,#20]
  59:../lut.c      ****     if (bp[bpIndex + 1U] - u <= u - bp[bpIndex]) {
 172              	 .loc 1 59 0
 173 0060 7B69     	 ldr r3,[r7,#20]
 174 0062 0133     	 adds r3,r3,#1
 175 0064 DB00     	 lsls r3,r3,#3
 176 0066 7A68     	 ldr r2,[r7,#4]
 177 0068 1344     	 add r3,r3,r2
 178 006a D3E90023 	 ldrd r2,[r3]
 179 006e 1046     	 mov r0,r2
 180 0070 1946     	 mov r1,r3
 181 0072 D7E90223 	 ldrd r2,[r7,#8]
 182 0076 FFF7FEFF 	 bl __aeabi_dsub
 183 007a 0246     	 mov r2,r0
 184 007c 0B46     	 mov r3,r1
 185 007e 1446     	 mov r4,r2
 186 0080 1D46     	 mov r5,r3
 187 0082 7B69     	 ldr r3,[r7,#20]
 188 0084 DB00     	 lsls r3,r3,#3
 189 0086 7A68     	 ldr r2,[r7,#4]
 190 0088 1344     	 add r3,r3,r2
 191 008a D3E90023 	 ldrd r2,[r3]
 192 008e D7E90201 	 ldrd r0,[r7,#8]
 193 0092 FFF7FEFF 	 bl __aeabi_dsub
 194 0096 0246     	 mov r2,r0
 195 0098 0B46     	 mov r3,r1
 196 009a 2046     	 mov r0,r4
 197 009c 2946     	 mov r1,r5
 198 009e FFF7FEFF 	 bl __aeabi_dcmple
 199 00a2 0346     	 mov r3,r0
 200 00a4 002B     	 cmp r3,#0
 201 00a6 00D1     	 bne .L12
 202 00a8 05E0     	 b .L4
 203              	.L12:
  60:../lut.c      ****       bpIndex++;
 204              	 .loc 1 60 0
 205 00aa 7B69     	 ldr r3,[r7,#20]
 206 00ac 0133     	 adds r3,r3,#1
 207 00ae 7B61     	 str r3,[r7,#20]
 208 00b0 01E0     	 b .L4
 209              	.L14:
  61:../lut.c      ****     }
  62:../lut.c      ****   } else {
  63:../lut.c      ****     bpIndex = maxIndex;
 210              	 .loc 1 63 0
 211 00b2 3B68     	 ldr r3,[r7]
 212 00b4 7B61     	 str r3,[r7,#20]
 213              	.L4:
  64:../lut.c      ****   }
  65:../lut.c      **** 
  66:../lut.c      ****   return bpIndex;
 214              	 .loc 1 66 0
 215 00b6 7B69     	 ldr r3,[r7,#20]
  67:../lut.c      **** }
 216              	 .loc 1 67 0
 217 00b8 1846     	 mov r0,r3
 218 00ba 1837     	 adds r7,r7,#24
 219              	.LCFI3:
 220              	 .cfi_def_cfa_offset 16
 221 00bc BD46     	 mov sp,r7
 222              	.LCFI4:
 223              	 .cfi_def_cfa_register 13
 224              	 
 225 00be B0BD     	 pop {r4,r5,r7,pc}
 226              	 .cfi_endproc
 227              	.LFE169:
 229              	 .section .text.binsearch_u32d,"ax",%progbits
 230              	 .align 2
 231              	 .global binsearch_u32d
 232              	 .thumb
 233              	 .thumb_func
 235              	binsearch_u32d:
 236              	.LFB170:
  68:../lut.c      **** 
  69:../lut.c      **** uint32_T binsearch_u32d(real_T u, const real_T bp[], uint32_T startIndex,
  70:../lut.c      ****   uint32_T maxIndex)
  71:../lut.c      **** {
 237              	 .loc 1 71 0
 238              	 .cfi_startproc
 239              	 
 240              	 
 241 0000 80B5     	 push {r7,lr}
 242              	.LCFI5:
 243              	 .cfi_def_cfa_offset 8
 244              	 .cfi_offset 7,-8
 245              	 .cfi_offset 14,-4
 246 0002 88B0     	 sub sp,sp,#32
 247              	.LCFI6:
 248              	 .cfi_def_cfa_offset 40
 249 0004 00AF     	 add r7,sp,#0
 250              	.LCFI7:
 251              	 .cfi_def_cfa_register 7
 252 0006 C7E90201 	 strd r0,[r7,#8]
 253 000a 7A60     	 str r2,[r7,#4]
 254 000c 3B60     	 str r3,[r7]
  72:../lut.c      ****   uint32_T bpIndex;
  73:../lut.c      ****   uint32_T iRght;
  74:../lut.c      ****   uint32_T bpIdx;
  75:../lut.c      **** 
  76:../lut.c      ****   /* Binary Search */
  77:../lut.c      ****   bpIdx = startIndex;
 255              	 .loc 1 77 0
 256 000e 3B68     	 ldr r3,[r7]
 257 0010 7B61     	 str r3,[r7,#20]
  78:../lut.c      ****   bpIndex = 0U;
 258              	 .loc 1 78 0
 259 0012 0023     	 movs r3,#0
 260 0014 FB61     	 str r3,[r7,#28]
  79:../lut.c      ****   iRght = maxIndex;
 261              	 .loc 1 79 0
 262 0016 BB6A     	 ldr r3,[r7,#40]
 263 0018 BB61     	 str r3,[r7,#24]
  80:../lut.c      ****   while (iRght - bpIndex > 1U) {
 264              	 .loc 1 80 0
 265 001a 18E0     	 b .L16
 266              	.L20:
  81:../lut.c      ****     if (u < bp[bpIdx]) {
 267              	 .loc 1 81 0
 268 001c 7B69     	 ldr r3,[r7,#20]
 269 001e DB00     	 lsls r3,r3,#3
 270 0020 7A68     	 ldr r2,[r7,#4]
 271 0022 1344     	 add r3,r3,r2
 272 0024 D3E90023 	 ldrd r2,[r3]
 273 0028 1046     	 mov r0,r2
 274 002a 1946     	 mov r1,r3
 275 002c D7E90223 	 ldrd r2,[r7,#8]
 276 0030 FFF7FEFF 	 bl __aeabi_dcmpgt
 277 0034 0346     	 mov r3,r0
 278 0036 002B     	 cmp r3,#0
 279 0038 02D0     	 beq .L23
  82:../lut.c      ****       iRght = bpIdx;
 280              	 .loc 1 82 0
 281 003a 7B69     	 ldr r3,[r7,#20]
 282 003c BB61     	 str r3,[r7,#24]
 283 003e 01E0     	 b .L19
 284              	.L23:
  83:../lut.c      ****     } else {
  84:../lut.c      ****       bpIndex = bpIdx;
 285              	 .loc 1 84 0
 286 0040 7B69     	 ldr r3,[r7,#20]
 287 0042 FB61     	 str r3,[r7,#28]
 288              	.L19:
  85:../lut.c      ****     }
  86:../lut.c      **** 
  87:../lut.c      ****     bpIdx = (iRght + bpIndex) >> 1U;
 289              	 .loc 1 87 0
 290 0044 BA69     	 ldr r2,[r7,#24]
 291 0046 FB69     	 ldr r3,[r7,#28]
 292 0048 1344     	 add r3,r3,r2
 293 004a 5B08     	 lsrs r3,r3,#1
 294 004c 7B61     	 str r3,[r7,#20]
 295              	.L16:
  80:../lut.c      ****     if (u < bp[bpIdx]) {
 296              	 .loc 1 80 0
 297 004e BA69     	 ldr r2,[r7,#24]
 298 0050 FB69     	 ldr r3,[r7,#28]
 299 0052 D31A     	 subs r3,r2,r3
 300 0054 012B     	 cmp r3,#1
 301 0056 E1D8     	 bhi .L20
  88:../lut.c      ****   }
  89:../lut.c      **** 
  90:../lut.c      ****   return bpIndex;
 302              	 .loc 1 90 0
 303 0058 FB69     	 ldr r3,[r7,#28]
  91:../lut.c      **** }
 304              	 .loc 1 91 0
 305 005a 1846     	 mov r0,r3
 306 005c 2037     	 adds r7,r7,#32
 307              	.LCFI8:
 308              	 .cfi_def_cfa_offset 8
 309 005e BD46     	 mov sp,r7
 310              	.LCFI9:
 311              	 .cfi_def_cfa_register 13
 312              	 
 313 0060 80BD     	 pop {r7,pc}
 314              	 .cfi_endproc
 315              	.LFE170:
 317 0062 00BF     	 .section .text.lut_step,"ax",%progbits
 318              	 .align 2
 319              	 .global lut_step
 320              	 .thumb
 321              	 .thumb_func
 323              	lut_step:
 324              	.LFB171:
  92:../lut.c      **** 
  93:../lut.c      **** /* Model step function */
  94:../lut.c      **** void lut_step(void)
  95:../lut.c      **** {
 325              	 .loc 1 95 0
 326              	 .cfi_startproc
 327              	 
 328              	 
 329 0000 80B5     	 push {r7,lr}
 330              	.LCFI10:
 331              	 .cfi_def_cfa_offset 8
 332              	 .cfi_offset 7,-8
 333              	 .cfi_offset 14,-4
 334 0002 00AF     	 add r7,sp,#0
 335              	.LCFI11:
 336              	 .cfi_def_cfa_register 7
  96:../lut.c      ****   /* Outport: '<Root>/Out1' incorporates:
  97:../lut.c      ****    *  Inport: '<Root>/In1'
  98:../lut.c      ****    *  Lookup_n-D: '<Root>/1-D Lookup Table1'
  99:../lut.c      ****    */
 100:../lut.c      ****   rtY_lut.Out1_lut = rtConstP_lut.uDLookupTable1_tableData[plook_u32d_binckan
 337              	 .loc 1 100 0
 338 0004 094B     	 ldr r3,.L25
 339 0006 D3E90023 	 ldrd r2,[r3]
 340 000a 1046     	 mov r0,r2
 341 000c 1946     	 mov r1,r3
 342 000e 084A     	 ldr r2,.L25+4
 343 0010 0D23     	 movs r3,#13
 344 0012 FFF7FEFF 	 bl plook_u32d_binckan
 345 0016 0346     	 mov r3,r0
 346 0018 064A     	 ldr r2,.L25+8
 347 001a DB00     	 lsls r3,r3,#3
 348 001c 1344     	 add r3,r3,r2
 349 001e D3E90023 	 ldrd r2,[r3]
 350 0022 0549     	 ldr r1,.L25+12
 351 0024 C1E90023 	 strd r2,[r1]
 101:../lut.c      ****     (rtU_lut.In1_lut, rtConstP_lut.uDLookupTable1_bp01Data, 13U)];
 102:../lut.c      **** }
 352              	 .loc 1 102 0
 353 0028 80BD     	 pop {r7,pc}
 354              	.L26:
 355 002a 00BF     	 .align 2
 356              	.L25:
 357 002c 00000000 	 .word rtU_lut
 358 0030 A0000000 	 .word rtConstP_lut+160
 359 0034 00000000 	 .word rtConstP_lut
 360 0038 00000000 	 .word rtY_lut
 361              	 .cfi_endproc
 362              	.LFE171:
 364              	 .section .text.lut_initialize,"ax",%progbits
 365              	 .align 2
 366              	 .global lut_initialize
 367              	 .thumb
 368              	 .thumb_func
 370              	lut_initialize:
 371              	.LFB172:
 103:../lut.c      **** 
 104:../lut.c      **** /* Model initialize function */
 105:../lut.c      **** void lut_initialize(void)
 106:../lut.c      **** {
 372              	 .loc 1 106 0
 373              	 .cfi_startproc
 374              	 
 375              	 
 376              	 
 377 0000 80B4     	 push {r7}
 378              	.LCFI12:
 379              	 .cfi_def_cfa_offset 4
 380              	 .cfi_offset 7,-4
 381 0002 00AF     	 add r7,sp,#0
 382              	.LCFI13:
 383              	 .cfi_def_cfa_register 7
 107:../lut.c      ****   /* (no initialization code required) */
 108:../lut.c      **** }
 384              	 .loc 1 108 0
 385 0004 BD46     	 mov sp,r7
 386              	.LCFI14:
 387              	 .cfi_def_cfa_register 13
 388              	 
 389 0006 5DF8047B 	 ldr r7,[sp],#4
 390              	.LCFI15:
 391              	 .cfi_restore 7
 392              	 .cfi_def_cfa_offset 0
 393 000a 7047     	 bx lr
 394              	 .cfi_endproc
 395              	.LFE172:
 397              	 .text
 398              	.Letext0:
 399              	 .file 2 "c:\\users\\administrator\\documents\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 400              	 .file 3 "c:\\users\\administrator\\documents\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 401              	 .file 4 "../rtwtypes.h"
 402              	 .file 5 "../lut.h"
 403              	 .file 6 "C:/Users/Administrator/Documents/DAVE-IDE-4.4.2-64Bit/eclipse/workspace/DTProjectv5/Libraries/CMSIS/Include/core_cm4.h"
 404              	 .file 7 "C:/Users/Administrator/Documents/DAVE-IDE-4.4.2-64Bit/eclipse/workspace/DTProjectv5/Libraries/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
DEFINED SYMBOLS
                            *ABS*:00000000 lut.c
    {standard input}:24     .rodata.rtConstP_lut:00000000 rtConstP_lut
    {standard input}:21     .rodata.rtConstP_lut:00000000 $d
                            *COM*:00000008 rtU_lut
                            *COM*:00000008 rtY_lut
    {standard input}:106    .text.plook_u32d_binckan:00000000 $t
    {standard input}:111    .text.plook_u32d_binckan:00000000 plook_u32d_binckan
    {standard input}:235    .text.binsearch_u32d:00000000 binsearch_u32d
    {standard input}:230    .text.binsearch_u32d:00000000 $t
    {standard input}:318    .text.lut_step:00000000 $t
    {standard input}:323    .text.lut_step:00000000 lut_step
    {standard input}:357    .text.lut_step:0000002c $d
    {standard input}:365    .text.lut_initialize:00000000 $t
    {standard input}:370    .text.lut_initialize:00000000 lut_initialize
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_dcmpge
__aeabi_dcmpgt
__aeabi_dsub
__aeabi_dcmple
