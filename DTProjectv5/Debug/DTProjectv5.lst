
DTProjectv5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009d6c  08000000  0c000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .eh_frame     00000000  08009d6c  0c009d6c  00011d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .ARM.exidx    00000008  08009d6c  0c009d6c  00011d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 Stack         00000800  10000000  10000000  00020000  2**0
                  ALLOC
  4 .data         00000bac  20000000  0c009d74  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000000a8  20000bb0  0c00a920  00018bb0  2**3
                  ALLOC
  6 .no_init      00000014  2000ffc0  2000ffc0  0001ffc0  2**2
                  ALLOC
  7 .debug_aranges 00001368  00000000  00000000  00018bb0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000259bf  00000000  00000000  00019f18  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004be3  00000000  00000000  0003f8d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000ca1a  00000000  00000000  000444ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00005474  00000000  00000000  00050ed4  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000c497  00000000  00000000  00056348  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00009c04  00000000  00000000  000627df  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000fe8  00000000  00000000  0006c3e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .build_attributes 0000116f  00000000  00000000  0006d3cb  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 7d 38 00 08     ............}8..
 80000fc:	b1 02 00 08 b1 02 00 08 19 3a 00 08 b1 02 00 08     .........:......
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 01 39 00 08 b1 02 00 08     .........9......
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	15 42 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     .B..............
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>

	.align	1
    .thumb
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)

 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c009d74 	.word	0x0c009d74
 800024c:	20000000 	.word	0x20000000
 8000250:	00000bac 	.word	0x00000bac
 8000254:	0c00a920 	.word	0x0c00a920
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c009d74 	.word	0x0c009d74
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c009d74 	.word	0x0c009d74
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	20000bb0 	.word	0x20000bb0
 800027c:	000000a4 	.word	0x000000a4
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000290:	10000800 	.word	0x10000800

	.align	1
    .thumb
 8000294:	080002b5 	.word	0x080002b5
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 80002a8:	08005b81 	.word	0x08005b81
    blx  r0
#endif

    ldr  r0, =main
 80002ac:	080046e1 	.word	0x080046e1

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 80002b4:	b598      	push	{r3, r4, r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002b8:	4a05      	ldr	r2, [pc, #20]	; (80002d0 <SystemInit+0x1c>)
 80002ba:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002be:	4614      	mov	r4, r2
 80002c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 80002c6:	f002 fdf1 	bl	8002eac <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80002ca:	f002 fe59 	bl	8002f80 <SystemCoreClockSetup>
}
 80002ce:	bd98      	pop	{r3, r4, r7, pc}
 80002d0:	2000ffc4 	.word	0x2000ffc4

080002d4 <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002da:	4b2f      	ldr	r3, [pc, #188]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 80002dc:	68db      	ldr	r3, [r3, #12]
 80002de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d03e      	beq.n	8000364 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80002e6:	4b2d      	ldr	r3, [pc, #180]	; (800039c <SystemCoreClockUpdate+0xc8>)
 80002e8:	68db      	ldr	r3, [r3, #12]
 80002ea:	f003 0301 	and.w	r3, r3, #1
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d002      	beq.n	80002f8 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80002f2:	4b2b      	ldr	r3, [pc, #172]	; (80003a0 <SystemCoreClockUpdate+0xcc>)
 80002f4:	60fb      	str	r3, [r7, #12]
 80002f6:	e002      	b.n	80002fe <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80002f8:	f002 fe38 	bl	8002f6c <OSCHP_GetFrequency>
 80002fc:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80002fe:	4b27      	ldr	r3, [pc, #156]	; (800039c <SystemCoreClockUpdate+0xc8>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f003 0304 	and.w	r3, r3, #4
 8000306:	2b00      	cmp	r3, #0
 8000308:	d020      	beq.n	800034c <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 800030a:	4b24      	ldr	r3, [pc, #144]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800030c:	689b      	ldr	r3, [r3, #8]
 800030e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000312:	0e1b      	lsrs	r3, r3, #24
 8000314:	3301      	adds	r3, #1
 8000316:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000318:	4b20      	ldr	r3, [pc, #128]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000320:	0a1b      	lsrs	r3, r3, #8
 8000322:	3301      	adds	r3, #1
 8000324:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8000326:	4b1d      	ldr	r3, [pc, #116]	; (800039c <SystemCoreClockUpdate+0xc8>)
 8000328:	689b      	ldr	r3, [r3, #8]
 800032a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800032e:	0c1b      	lsrs	r3, r3, #16
 8000330:	3301      	adds	r3, #1
 8000332:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	683a      	ldr	r2, [r7, #0]
 8000338:	fb02 f303 	mul.w	r3, r2, r3
 800033c:	68fa      	ldr	r2, [r7, #12]
 800033e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000342:	687a      	ldr	r2, [r7, #4]
 8000344:	fb02 f303 	mul.w	r3, r2, r3
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	e00d      	b.n	8000368 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 800034c:	4b13      	ldr	r3, [pc, #76]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800034e:	689b      	ldr	r3, [r3, #8]
 8000350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000354:	3301      	adds	r3, #1
 8000356:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 8000358:	68fa      	ldr	r2, [r7, #12]
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000360:	60fb      	str	r3, [r7, #12]
 8000362:	e001      	b.n	8000368 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8000364:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <SystemCoreClockUpdate+0xcc>)
 8000366:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000368:	4b0b      	ldr	r3, [pc, #44]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 800036a:	68db      	ldr	r3, [r3, #12]
 800036c:	b2db      	uxtb	r3, r3
 800036e:	3301      	adds	r3, #1
 8000370:	68fa      	ldr	r2, [r7, #12]
 8000372:	fbb2 f3f3 	udiv	r3, r2, r3
 8000376:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000378:	4b07      	ldr	r3, [pc, #28]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 800037a:	691b      	ldr	r3, [r3, #16]
 800037c:	f003 0301 	and.w	r3, r3, #1
 8000380:	3301      	adds	r3, #1
 8000382:	68fa      	ldr	r2, [r7, #12]
 8000384:	fbb2 f3f3 	udiv	r3, r2, r3
 8000388:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 800038a:	4a06      	ldr	r2, [pc, #24]	; (80003a4 <SystemCoreClockUpdate+0xd0>)
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	6013      	str	r3, [r2, #0]
}
 8000390:	3710      	adds	r7, #16
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	50004600 	.word	0x50004600
 800039c:	50004710 	.word	0x50004710
 80003a0:	016e3600 	.word	0x016e3600
 80003a4:	2000ffc0 	.word	0x2000ffc0

080003a8 <XMC_ERU_Enable>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* Enable the clock and De-assert the ERU module from the reset state. */
void XMC_ERU_Enable(XMC_ERU_t *const eru)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
#if defined(XMC_ERU1)
  if (eru == XMC_ERU1)
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	4a05      	ldr	r2, [pc, #20]	; (80003c8 <XMC_ERU_Enable+0x20>)
 80003b4:	4293      	cmp	r3, r2
 80003b6:	d103      	bne.n	80003c0 <XMC_ERU_Enable+0x18>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_ERU1);
#endif
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_ERU1);
 80003b8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80003bc:	f000 f962 	bl	8000684 <XMC_SCU_RESET_DeassertPeripheralReset>
  }
#else
  XMC_UNUSED_ARG(eru);
  #endif
}
 80003c0:	3708      	adds	r7, #8
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	40044000 	.word	0x40044000

080003cc <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b085      	sub	sp, #20
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	60f8      	str	r0, [r7, #12]
 80003d4:	460b      	mov	r3, r1
 80003d6:	607a      	str	r2, [r7, #4]
 80003d8:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 80003da:	7afb      	ldrb	r3, [r7, #11]
 80003dc:	089b      	lsrs	r3, r3, #2
 80003de:	b2db      	uxtb	r3, r3
 80003e0:	4618      	mov	r0, r3
 80003e2:	7afb      	ldrb	r3, [r7, #11]
 80003e4:	089b      	lsrs	r3, r3, #2
 80003e6:	b2db      	uxtb	r3, r3
 80003e8:	461a      	mov	r2, r3
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	3204      	adds	r2, #4
 80003ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003f2:	7afb      	ldrb	r3, [r7, #11]
 80003f4:	f003 0303 	and.w	r3, r3, #3
 80003f8:	00db      	lsls	r3, r3, #3
 80003fa:	4619      	mov	r1, r3
 80003fc:	23f8      	movs	r3, #248	; 0xf8
 80003fe:	408b      	lsls	r3, r1
 8000400:	43db      	mvns	r3, r3
 8000402:	ea02 0103 	and.w	r1, r2, r3
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	1d02      	adds	r2, r0, #4
 800040a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000412:	7afb      	ldrb	r3, [r7, #11]
 8000414:	005b      	lsls	r3, r3, #1
 8000416:	4619      	mov	r1, r3
 8000418:	2303      	movs	r3, #3
 800041a:	408b      	lsls	r3, r1
 800041c:	43db      	mvns	r3, r3
 800041e:	401a      	ands	r2, r3
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	4a3a      	ldr	r2, [pc, #232]	; (8000510 <XMC_GPIO_Init+0x144>)
 8000428:	4293      	cmp	r3, r2
 800042a:	d003      	beq.n	8000434 <XMC_GPIO_Init+0x68>
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	4a39      	ldr	r2, [pc, #228]	; (8000514 <XMC_GPIO_Init+0x148>)
 8000430:	4293      	cmp	r3, r2
 8000432:	d10a      	bne.n	800044a <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000438:	7afb      	ldrb	r3, [r7, #11]
 800043a:	2101      	movs	r1, #1
 800043c:	fa01 f303 	lsl.w	r3, r1, r3
 8000440:	43db      	mvns	r3, r3
 8000442:	401a      	ands	r2, r3
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	661a      	str	r2, [r3, #96]	; 0x60
 8000448:	e042      	b.n	80004d0 <XMC_GPIO_Init+0x104>
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	b2db      	uxtb	r3, r3
 8000450:	b25b      	sxtb	r3, r3
 8000452:	2b00      	cmp	r3, #0
 8000454:	da3c      	bge.n	80004d0 <XMC_GPIO_Init+0x104>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	685a      	ldr	r2, [r3, #4]
 800045a:	7afb      	ldrb	r3, [r7, #11]
 800045c:	409a      	lsls	r2, r3
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	605a      	str	r2, [r3, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8000462:	7afb      	ldrb	r3, [r7, #11]
 8000464:	08db      	lsrs	r3, r3, #3
 8000466:	b2db      	uxtb	r3, r3
 8000468:	4618      	mov	r0, r3
 800046a:	7afb      	ldrb	r3, [r7, #11]
 800046c:	08db      	lsrs	r3, r3, #3
 800046e:	b2db      	uxtb	r3, r3
 8000470:	461a      	mov	r2, r3
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	3210      	adds	r2, #16
 8000476:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800047a:	7afb      	ldrb	r3, [r7, #11]
 800047c:	f003 0307 	and.w	r3, r3, #7
 8000480:	009b      	lsls	r3, r3, #2
 8000482:	4619      	mov	r1, r3
 8000484:	2307      	movs	r3, #7
 8000486:	408b      	lsls	r3, r1
 8000488:	43db      	mvns	r3, r3
 800048a:	ea02 0103 	and.w	r1, r2, r3
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	f100 0210 	add.w	r2, r0, #16
 8000494:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8000498:	7afb      	ldrb	r3, [r7, #11]
 800049a:	08db      	lsrs	r3, r3, #3
 800049c:	b2db      	uxtb	r3, r3
 800049e:	4618      	mov	r0, r3
 80004a0:	7afb      	ldrb	r3, [r7, #11]
 80004a2:	08db      	lsrs	r3, r3, #3
 80004a4:	b2db      	uxtb	r3, r3
 80004a6:	461a      	mov	r2, r3
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	3210      	adds	r2, #16
 80004ac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	7a1b      	ldrb	r3, [r3, #8]
 80004b4:	4619      	mov	r1, r3
 80004b6:	7afb      	ldrb	r3, [r7, #11]
 80004b8:	f003 0307 	and.w	r3, r3, #7
 80004bc:	009b      	lsls	r3, r3, #2
 80004be:	fa01 f303 	lsl.w	r3, r1, r3
 80004c2:	ea42 0103 	orr.w	r1, r2, r3
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	f100 0210 	add.w	r2, r0, #16
 80004cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 80004d0:	7afb      	ldrb	r3, [r7, #11]
 80004d2:	089b      	lsrs	r3, r3, #2
 80004d4:	b2db      	uxtb	r3, r3
 80004d6:	4618      	mov	r0, r3
 80004d8:	7afb      	ldrb	r3, [r7, #11]
 80004da:	089b      	lsrs	r3, r3, #2
 80004dc:	b2db      	uxtb	r3, r3
 80004de:	461a      	mov	r2, r3
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	3204      	adds	r2, #4
 80004e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	4619      	mov	r1, r3
 80004ee:	7afb      	ldrb	r3, [r7, #11]
 80004f0:	f003 0303 	and.w	r3, r3, #3
 80004f4:	00db      	lsls	r3, r3, #3
 80004f6:	fa01 f303 	lsl.w	r3, r1, r3
 80004fa:	ea42 0103 	orr.w	r1, r2, r3
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	1d02      	adds	r2, r0, #4
 8000502:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000506:	3714      	adds	r7, #20
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr
 8000510:	48028e00 	.word	0x48028e00
 8000514:	48028f00 	.word	0x48028f00

08000518 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  return(SCU_GENERAL->MIRRSTS);
 800051c:	4b03      	ldr	r3, [pc, #12]	; (800052c <XMC_SCU_GetMirrorStatus+0x14>)
 800051e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 8000522:	4618      	mov	r0, r3
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr
 800052c:	50004000 	.word	0x50004000

08000530 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 8000538:	f7ff fecc 	bl	80002d4 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 800053c:	4b0b      	ldr	r3, [pc, #44]	; (800056c <XMC_SCU_lDelay+0x3c>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a0b      	ldr	r2, [pc, #44]	; (8000570 <XMC_SCU_lDelay+0x40>)
 8000542:	fba2 2303 	umull	r2, r3, r2, r3
 8000546:	0c9a      	lsrs	r2, r3, #18
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	fb02 f303 	mul.w	r3, r2, r3
 800054e:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 8000550:	2300      	movs	r3, #0
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	e003      	b.n	800055e <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 8000556:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	3301      	adds	r3, #1
 800055c:	60fb      	str	r3, [r7, #12]
 800055e:	68fa      	ldr	r2, [r7, #12]
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	429a      	cmp	r2, r3
 8000564:	d3f7      	bcc.n	8000556 <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 8000566:	3710      	adds	r7, #16
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	2000ffc0 	.word	0x2000ffc0
 8000570:	431bde83 	.word	0x431bde83

08000574 <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 8000574:	b5b0      	push	{r4, r5, r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af02      	add	r7, sp, #8
 800057a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
                 (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                 (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 800057c:	2000      	movs	r0, #0
 800057e:	f000 f89d 	bl	80006bc <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 8000582:	f000 fa2f 	bl	80009e4 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	79db      	ldrb	r3, [r3, #7]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d00a      	beq.n	80005a4 <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 800058e:	f000 fa67 	bl	8000a60 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 8000592:	bf00      	nop
 8000594:	f000 fa52 	bl	8000a3c <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 8000598:	4603      	mov	r3, r0
 800059a:	f083 0301 	eor.w	r3, r3, #1
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d1f7      	bne.n	8000594 <XMC_SCU_CLOCK_Init+0x20>
  }
  
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	7a5b      	ldrb	r3, [r3, #9]
 80005a8:	4618      	mov	r0, r3
 80005aa:	f000 f901 	bl	80007b0 <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 80005ae:	bf00      	nop
 80005b0:	f7ff ffb2 	bl	8000518 <XMC_SCU_GetMirrorStatus>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d1fa      	bne.n	80005b0 <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	7a1b      	ldrb	r3, [r3, #8]
 80005be:	4618      	mov	r0, r3
 80005c0:	f000 f9ea 	bl	8000998 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	7c1b      	ldrb	r3, [r3, #16]
 80005c8:	4618      	mov	r0, r3
 80005ca:	f000 f90f 	bl	80007ec <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	7c5b      	ldrb	r3, [r3, #17]
 80005d2:	4618      	mov	r0, r3
 80005d4:	f000 f932 	bl	800083c <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	7c9b      	ldrb	r3, [r3, #18]
 80005dc:	4618      	mov	r0, r3
 80005de:	f000 f919 	bl	8000814 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	7cdb      	ldrb	r3, [r3, #19]
 80005e6:	4618      	mov	r0, r3
 80005e8:	f000 f93c 	bl	8000864 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	799b      	ldrb	r3, [r3, #6]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d00a      	beq.n	800060a <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 80005f4:	f000 fa68 	bl	8000ac8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 80005f8:	bf00      	nop
 80005fa:	f000 fa8d 	bl	8000b18 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 80005fe:	4603      	mov	r3, r0
 8000600:	f083 0301 	eor.w	r3, r3, #1
 8000604:	b2db      	uxtb	r3, r3
 8000606:	2b00      	cmp	r3, #0
 8000608:	d1f7      	bne.n	80005fa <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	78db      	ldrb	r3, [r3, #3]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d102      	bne.n	8000618 <XMC_SCU_CLOCK_Init+0xa4>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 8000612:	f000 faa5 	bl	8000b60 <XMC_SCU_CLOCK_DisableSystemPll>
 8000616:	e014      	b.n	8000642 <XMC_SCU_CLOCK_Init+0xce>
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 8000618:	f000 fa92 	bl	8000b40 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	8899      	ldrh	r1, [r3, #4]
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000628:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800062e:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	4608      	mov	r0, r1
 8000638:	4611      	mov	r1, r2
 800063a:	462a      	mov	r2, r5
 800063c:	4623      	mov	r3, r4
 800063e:	f000 fa9f 	bl	8000b80 <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	68db      	ldr	r3, [r3, #12]
 8000646:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800064a:	d103      	bne.n	8000654 <XMC_SCU_CLOCK_Init+0xe0>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 800064c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000650:	f000 f834 	bl	80006bc <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 8000654:	f7ff fe3e 	bl	80002d4 <SystemCoreClockUpdate>
}
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bdb0      	pop	{r4, r5, r7, pc}
 800065e:	bf00      	nop

08000660 <XMC_SCU_INTERRUPT_EnableNmiRequest>:
  SCU_PARITY->PETE &= (uint32_t)~memory; 
}

/* Enables a NMI source */
void XMC_SCU_INTERRUPT_EnableNmiRequest(const uint32_t request)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->NMIREQEN |= (uint32_t)request;
 8000668:	4905      	ldr	r1, [pc, #20]	; (8000680 <XMC_SCU_INTERRUPT_EnableNmiRequest+0x20>)
 800066a:	4b05      	ldr	r3, [pc, #20]	; (8000680 <XMC_SCU_INTERRUPT_EnableNmiRequest+0x20>)
 800066c:	695a      	ldr	r2, [r3, #20]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4313      	orrs	r3, r2
 8000672:	614b      	str	r3, [r1, #20]
}
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	50004074 	.word	0x50004074

08000684 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8000684:	b480      	push	{r7}
 8000686:	b085      	sub	sp, #20
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	0f1b      	lsrs	r3, r3, #28
 8000690:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000698:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 800069a:	68fa      	ldr	r2, [r7, #12]
 800069c:	4613      	mov	r3, r2
 800069e:	005b      	lsls	r3, r3, #1
 80006a0:	4413      	add	r3, r2
 80006a2:	009b      	lsls	r3, r3, #2
 80006a4:	461a      	mov	r2, r3
 80006a6:	4b04      	ldr	r3, [pc, #16]	; (80006b8 <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 80006a8:	4413      	add	r3, r2
 80006aa:	68ba      	ldr	r2, [r7, #8]
 80006ac:	601a      	str	r2, [r3, #0]
}
 80006ae:	3714      	adds	r7, #20
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	50004414 	.word	0x50004414

080006bc <XMC_SCU_CLOCK_SetSystemClockSource>:
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 80006c4:	4906      	ldr	r1, [pc, #24]	; (80006e0 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80006c6:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80006c8:	68db      	ldr	r3, [r3, #12]
 80006ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	4313      	orrs	r3, r2
 80006d2:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	50004600 	.word	0x50004600

080006e4 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 80006ec:	4906      	ldr	r1, [pc, #24]	; (8000708 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80006ee:	4b06      	ldr	r3, [pc, #24]	; (8000708 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80006f0:	699b      	ldr	r3, [r3, #24]
 80006f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	4313      	orrs	r3, r2
 80006fa:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	50004600 	.word	0x50004600

0800070c <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8000714:	4906      	ldr	r1, [pc, #24]	; (8000730 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8000716:	4b06      	ldr	r3, [pc, #24]	; (8000730 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8000718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800071a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	4313      	orrs	r3, r2
 8000722:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	50004600 	.word	0x50004600

08000734 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 800073e:	88fb      	ldrh	r3, [r7, #6]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d108      	bne.n	8000756 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000744:	4a0a      	ldr	r2, [pc, #40]	; (8000770 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000746:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000748:	68db      	ldr	r3, [r3, #12]
 800074a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800074e:	f023 0301 	bic.w	r3, r3, #1
 8000752:	60d3      	str	r3, [r2, #12]
 8000754:	e007      	b.n	8000766 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000756:	4a06      	ldr	r2, [pc, #24]	; (8000770 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000758:	4b05      	ldr	r3, [pc, #20]	; (8000770 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 800075a:	68db      	ldr	r3, [r3, #12]
 800075c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	60d3      	str	r3, [r2, #12]
  }
}
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr
 8000770:	50004710 	.word	0x50004710

08000774 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800077e:	bf00      	nop
 8000780:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 8000782:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000786:	f003 0308 	and.w	r3, r3, #8
 800078a:	2b00      	cmp	r3, #0
 800078c:	d1f8      	bne.n	8000780 <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 800078e:	4907      	ldr	r1, [pc, #28]	; (80007ac <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8000790:	4b06      	ldr	r3, [pc, #24]	; (80007ac <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8000792:	68db      	ldr	r3, [r3, #12]
 8000794:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 8000798:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 800079a:	4313      	orrs	r3, r2
 800079c:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 800079e:	370c      	adds	r7, #12
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr
 80007a8:	50004000 	.word	0x50004000
 80007ac:	50004300 	.word	0x50004300

080007b0 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80007ba:	bf00      	nop
 80007bc:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 80007be:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80007c2:	f003 0308 	and.w	r3, r3, #8
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d1f8      	bne.n	80007bc <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80007ca:	4907      	ldr	r1, [pc, #28]	; (80007e8 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80007ce:	68db      	ldr	r3, [r3, #12]
 80007d0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 80007d4:	79fb      	ldrb	r3, [r7, #7]
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80007d6:	4313      	orrs	r3, r2
 80007d8:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr
 80007e4:	50004000 	.word	0x50004000
 80007e8:	50004300 	.word	0x50004300

080007ec <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 80007f4:	4906      	ldr	r1, [pc, #24]	; (8000810 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 80007f6:	4b06      	ldr	r3, [pc, #24]	; (8000810 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 80007f8:	68db      	ldr	r3, [r3, #12]
 80007fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8000802:	4313      	orrs	r3, r2
 8000804:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 8000806:	370c      	adds	r7, #12
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr
 8000810:	50004600 	.word	0x50004600

08000814 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 800081c:	4906      	ldr	r1, [pc, #24]	; (8000838 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 800081e:	4b06      	ldr	r3, [pc, #24]	; (8000838 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8000820:	6a1b      	ldr	r3, [r3, #32]
 8000822:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 800082a:	4313      	orrs	r3, r2
 800082c:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 800082e:	370c      	adds	r7, #12
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr
 8000838:	50004600 	.word	0x50004600

0800083c <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000844:	4906      	ldr	r1, [pc, #24]	; (8000860 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000848:	691b      	ldr	r3, [r3, #16]
 800084a:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000852:	4313      	orrs	r3, r2
 8000854:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr
 8000860:	50004600 	.word	0x50004600

08000864 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 800086c:	4906      	ldr	r1, [pc, #24]	; (8000888 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 800086e:	4b06      	ldr	r3, [pc, #24]	; (8000888 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8000870:	695b      	ldr	r3, [r3, #20]
 8000872:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 800087a:	4313      	orrs	r3, r2
 800087c:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	50004600 	.word	0x50004600

0800088c <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000894:	4906      	ldr	r1, [pc, #24]	; (80008b0 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8000898:	699b      	ldr	r3, [r3, #24]
 800089a:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80008a2:	4313      	orrs	r3, r2
 80008a4:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
}
 80008a6:	370c      	adds	r7, #12
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr
 80008b0:	50004600 	.word	0x50004600

080008b4 <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80008bc:	4906      	ldr	r1, [pc, #24]	; (80008d8 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 80008be:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 80008c0:	69db      	ldr	r3, [r3, #28]
 80008c2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80008ca:	4313      	orrs	r3, r2
 80008cc:	61cb      	str	r3, [r1, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 80008ce:	370c      	adds	r7, #12
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr
 80008d8:	50004600 	.word	0x50004600

080008dc <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80008e4:	4906      	ldr	r1, [pc, #24]	; (8000900 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 80008e6:	4b06      	ldr	r3, [pc, #24]	; (8000900 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 80008e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80008f2:	4313      	orrs	r3, r2
 80008f4:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 80008f6:	370c      	adds	r7, #12
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr
 8000900:	50004600 	.word	0x50004600

08000904 <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 800090e:	4a04      	ldr	r2, [pc, #16]	; (8000920 <XMC_SCU_CLOCK_EnableClock+0x1c>)
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	6053      	str	r3, [r2, #4]
}
 8000914:	370c      	adds	r7, #12
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	50004600 	.word	0x50004600

08000924 <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 800092e:	4a19      	ldr	r2, [pc, #100]	; (8000994 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000930:	4b18      	ldr	r3, [pc, #96]	; (8000994 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000932:	695b      	ldr	r3, [r3, #20]
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 800093a:	4a16      	ldr	r2, [pc, #88]	; (8000994 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800093c:	4b15      	ldr	r3, [pc, #84]	; (8000994 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800093e:	695b      	ldr	r3, [r3, #20]
 8000940:	f043 0310 	orr.w	r3, r3, #16
 8000944:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000946:	4913      	ldr	r1, [pc, #76]	; (8000994 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	3b01      	subs	r3, #1
 800094c:	021a      	lsls	r2, r3, #8
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	3b01      	subs	r3, #1
 8000952:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000954:	4313      	orrs	r3, r2
 8000956:	614b      	str	r3, [r1, #20]
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8000958:	4a0e      	ldr	r2, [pc, #56]	; (8000994 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800095a:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800095c:	695b      	ldr	r3, [r3, #20]
 800095e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000962:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000964:	4a0b      	ldr	r2, [pc, #44]	; (8000994 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000966:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000968:	695b      	ldr	r3, [r3, #20]
 800096a:	f023 0310 	bic.w	r3, r3, #16
 800096e:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 8000970:	4a08      	ldr	r2, [pc, #32]	; (8000994 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000972:	4b08      	ldr	r3, [pc, #32]	; (8000994 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000974:	695b      	ldr	r3, [r3, #20]
 8000976:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800097a:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 800097c:	bf00      	nop
 800097e:	4b05      	ldr	r3, [pc, #20]	; (8000994 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000980:	691b      	ldr	r3, [r3, #16]
 8000982:	f003 0304 	and.w	r3, r3, #4
 8000986:	2b00      	cmp	r3, #0
 8000988:	d0f9      	beq.n	800097e <XMC_SCU_CLOCK_StartUsbPll+0x5a>
  {
    /* wait for PLL Lock */
  }

}
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr
 8000994:	50004710 	.word	0x50004710

08000998 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 80009a2:	4a0f      	ldr	r2, [pc, #60]	; (80009e0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009a4:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80009ac:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d10e      	bne.n	80009d2 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 80009b4:	4a0a      	ldr	r2, [pc, #40]	; (80009e0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009b6:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80009be:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 80009c0:	2064      	movs	r0, #100	; 0x64
 80009c2:	f7ff fdb5 	bl	8000530 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 80009c6:	4a06      	ldr	r2, [pc, #24]	; (80009e0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009c8:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009d0:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 80009d2:	2064      	movs	r0, #100	; 0x64
 80009d4:	f7ff fdac 	bl	8000530 <XMC_SCU_lDelay>
}
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	50004710 	.word	0x50004710

080009e4 <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 80009e8:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f003 0301 	and.w	r3, r3, #1
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d109      	bne.n	8000a08 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 80009f4:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80009f6:	2201      	movs	r2, #1
 80009f8:	605a      	str	r2, [r3, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 80009fa:	bf00      	nop
 80009fc:	4b0d      	ldr	r3, [pc, #52]	; (8000a34 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f003 0301 	and.w	r3, r3, #1
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d0f9      	beq.n	80009fc <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8000a08:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d00a      	beq.n	8000a2a <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8000a14:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000a16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a1a:	609a      	str	r2, [r3, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8000a1c:	bf00      	nop
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d1f9      	bne.n	8000a1e <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	50004200 	.word	0x50004200
 8000a38:	50004400 	.word	0x50004400

08000a3c <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8000a40:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f003 0308 	and.w	r3, r3, #8
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	bf0c      	ite	eq
 8000a4c:	2301      	moveq	r3, #1
 8000a4e:	2300      	movne	r3, #0
 8000a50:	b2db      	uxtb	r3, r3
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr
 8000a5c:	50004300 	.word	0x50004300

08000a60 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8000a64:	bf00      	nop
 8000a66:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 8000a68:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d1f8      	bne.n	8000a66 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6>
  {
    /* Wait until no pending update to OSCULCTRL register in hibernate domain */
  }
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8000a74:	4a13      	ldr	r2, [pc, #76]	; (8000ac4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8000a76:	4b13      	ldr	r3, [pc, #76]	; (8000ac4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8000a78:	69db      	ldr	r3, [r3, #28]
 8000a7a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000a7e:	61d3      	str	r3, [r2, #28]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8000a80:	bf00      	nop
 8000a82:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 8000a84:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000a88:	f003 0308 	and.w	r3, r3, #8
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d1f8      	bne.n	8000a82 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x22>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8000a90:	4a0c      	ldr	r2, [pc, #48]	; (8000ac4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8000a92:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8000a94:	68db      	ldr	r3, [r3, #12]
 8000a96:	f043 0308 	orr.w	r3, r3, #8
 8000a9a:	60d3      	str	r3, [r2, #12]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 8000a9c:	bf00      	nop
 8000a9e:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 8000aa0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000aa4:	f003 0304 	and.w	r3, r3, #4
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d1f8      	bne.n	8000a9e <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x3e>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDSET = (uint32_t)SCU_HIBERNATE_HDSET_ULPWDG_Msk;
 8000aac:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8000aae:	2208      	movs	r2, #8
 8000ab0:	609a      	str	r2, [r3, #8]

  while (XMC_SCU_GetMirrorStatus() != 0)
 8000ab2:	bf00      	nop
 8000ab4:	f7ff fd30 	bl	8000518 <XMC_SCU_GetMirrorStatus>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d1fa      	bne.n	8000ab4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x54>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }
}
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	50004000 	.word	0x50004000
 8000ac4:	50004300 	.word	0x50004300

08000ac8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8000ac8:	b5b0      	push	{r4, r5, r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8000acc:	4a0f      	ldr	r2, [pc, #60]	; (8000b0c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000ace:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ad6:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000ad8:	4d0d      	ldr	r5, [pc, #52]	; (8000b10 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000ada:	4b0d      	ldr	r3, [pc, #52]	; (8000b10 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8000ae2:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8000ae6:	f002 fa41 	bl	8002f6c <OSCHP_GetFrequency>
 8000aea:	4602      	mov	r2, r0
 8000aec:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8000aee:	fba3 2302 	umull	r2, r3, r3, r2
 8000af2:	0d1b      	lsrs	r3, r3, #20
 8000af4:	3b01      	subs	r3, #1
 8000af6:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000af8:	4323      	orrs	r3, r4
 8000afa:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000afc:	4a03      	ldr	r2, [pc, #12]	; (8000b0c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000afe:	4b03      	ldr	r3, [pc, #12]	; (8000b0c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000b06:	6053      	str	r3, [r2, #4]
}
 8000b08:	bdb0      	pop	{r4, r5, r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	50004710 	.word	0x50004710
 8000b10:	50004700 	.word	0x50004700
 8000b14:	6b5fca6b 	.word	0x6b5fca6b

08000b18 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8000b1c:	4b07      	ldr	r3, [pc, #28]	; (8000b3c <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000b24:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000b28:	bf0c      	ite	eq
 8000b2a:	2301      	moveq	r3, #1
 8000b2c:	2300      	movne	r3, #0
 8000b2e:	b2db      	uxtb	r3, r3
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	50004710 	.word	0x50004710

08000b40 <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000b44:	4a05      	ldr	r2, [pc, #20]	; (8000b5c <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000b46:	4b05      	ldr	r3, [pc, #20]	; (8000b5c <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b4e:	f023 0302 	bic.w	r3, r3, #2
 8000b52:	6053      	str	r3, [r2, #4]
}
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	50004710 	.word	0x50004710

08000b60 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000b64:	4a05      	ldr	r2, [pc, #20]	; (8000b7c <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000b66:	4b05      	ldr	r3, [pc, #20]	; (8000b7c <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b6e:	f043 0302 	orr.w	r3, r3, #2
 8000b72:	6053      	str	r3, [r2, #4]
}
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	50004710 	.word	0x50004710

08000b80 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60ba      	str	r2, [r7, #8]
 8000b88:	607b      	str	r3, [r7, #4]
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	81fb      	strh	r3, [r7, #14]
 8000b8e:	460b      	mov	r3, r1
 8000b90:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8000b92:	89fb      	ldrh	r3, [r7, #14]
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff fdcd 	bl	8000734 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8000b9a:	7b7b      	ldrb	r3, [r7, #13]
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	f040 8084 	bne.w	8000caa <XMC_SCU_CLOCK_StartSystemPll+0x12a>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8000ba2:	89fb      	ldrh	r3, [r7, #14]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d109      	bne.n	8000bbc <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8000ba8:	f002 f9e0 	bl	8002f6c <OSCHP_GetFrequency>
 8000bac:	4602      	mov	r2, r0
 8000bae:	4b4b      	ldr	r3, [pc, #300]	; (8000cdc <XMC_SCU_CLOCK_StartSystemPll+0x15c>)
 8000bb0:	fba3 2302 	umull	r2, r3, r3, r2
 8000bb4:	0c9b      	lsrs	r3, r3, #18
 8000bb6:	059b      	lsls	r3, r3, #22
 8000bb8:	617b      	str	r3, [r7, #20]
 8000bba:	e002      	b.n	8000bc2 <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8000bbc:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000bc0:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	687a      	ldr	r2, [r7, #4]
 8000bc6:	fb02 f203 	mul.w	r2, r2, r3
 8000bca:	68bb      	ldr	r3, [r7, #8]
 8000bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bd0:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	4a42      	ldr	r2, [pc, #264]	; (8000ce0 <XMC_SCU_CLOCK_StartSystemPll+0x160>)
 8000bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bda:	091b      	lsrs	r3, r3, #4
 8000bdc:	0d9b      	lsrs	r3, r3, #22
 8000bde:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000be0:	4a40      	ldr	r2, [pc, #256]	; (8000ce4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000be2:	4b40      	ldr	r3, [pc, #256]	; (8000ce4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	f043 0301 	orr.w	r3, r3, #1
 8000bea:	6053      	str	r3, [r2, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8000bec:	4a3d      	ldr	r2, [pc, #244]	; (8000ce4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000bee:	4b3d      	ldr	r3, [pc, #244]	; (8000ce4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	f043 0310 	orr.w	r3, r3, #16
 8000bf6:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000bf8:	493a      	ldr	r1, [pc, #232]	; (8000ce4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000bfa:	4b3a      	ldr	r3, [pc, #232]	; (8000ce4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000bfc:	689a      	ldr	r2, [r3, #8]
 8000bfe:	4b3a      	ldr	r3, [pc, #232]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8000c00:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000c02:	687a      	ldr	r2, [r7, #4]
 8000c04:	3a01      	subs	r2, #1
 8000c06:	0212      	lsls	r2, r2, #8
 8000c08:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	3b01      	subs	r3, #1
 8000c0e:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000c10:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	3b01      	subs	r3, #1
 8000c16:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000c1c:	4a31      	ldr	r2, [pc, #196]	; (8000ce4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c1e:	4b31      	ldr	r3, [pc, #196]	; (8000ce4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c26:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000c28:	4a2e      	ldr	r2, [pc, #184]	; (8000ce4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c2a:	4b2e      	ldr	r3, [pc, #184]	; (8000ce4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	f023 0310 	bic.w	r3, r3, #16
 8000c32:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8000c34:	4a2b      	ldr	r2, [pc, #172]	; (8000ce4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c36:	4b2b      	ldr	r3, [pc, #172]	; (8000ce4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c3e:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000c40:	bf00      	nop
 8000c42:	4b28      	ldr	r3, [pc, #160]	; (8000ce4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f003 0304 	and.w	r3, r3, #4
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d0f9      	beq.n	8000c42 <XMC_SCU_CLOCK_StartSystemPll+0xc2>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000c4e:	4a25      	ldr	r2, [pc, #148]	; (8000ce4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c50:	4b24      	ldr	r3, [pc, #144]	; (8000ce4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	f023 0301 	bic.w	r3, r3, #1
 8000c58:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000c5a:	bf00      	nop
 8000c5c:	4b21      	ldr	r3, [pc, #132]	; (8000ce4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f003 0301 	and.w	r3, r3, #1
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d1f9      	bne.n	8000c5c <XMC_SCU_CLOCK_StartSystemPll+0xdc>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	4a20      	ldr	r2, [pc, #128]	; (8000cec <XMC_SCU_CLOCK_StartSystemPll+0x16c>)
 8000c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c70:	095b      	lsrs	r3, r3, #5
 8000c72:	0d9b      	lsrs	r3, r3, #22
 8000c74:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000c76:	6a3a      	ldr	r2, [r7, #32]
 8000c78:	693b      	ldr	r3, [r7, #16]
 8000c7a:	429a      	cmp	r2, r3
 8000c7c:	d202      	bcs.n	8000c84 <XMC_SCU_CLOCK_StartSystemPll+0x104>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000c7e:	6938      	ldr	r0, [r7, #16]
 8000c80:	f000 f838 	bl	8000cf4 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	085b      	lsrs	r3, r3, #1
 8000c88:	4a19      	ldr	r2, [pc, #100]	; (8000cf0 <XMC_SCU_CLOCK_StartSystemPll+0x170>)
 8000c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c8e:	095b      	lsrs	r3, r3, #5
 8000c90:	0d9b      	lsrs	r3, r3, #22
 8000c92:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000c94:	6a3a      	ldr	r2, [r7, #32]
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d202      	bcs.n	8000ca2 <XMC_SCU_CLOCK_StartSystemPll+0x122>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000c9c:	6938      	ldr	r0, [r7, #16]
 8000c9e:	f000 f829 	bl	8000cf4 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8000ca2:	6a38      	ldr	r0, [r7, #32]
 8000ca4:	f000 f826 	bl	8000cf4 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8000ca8:	e015      	b.n	8000cd6 <XMC_SCU_CLOCK_StartSystemPll+0x156>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000caa:	490e      	ldr	r1, [pc, #56]	; (8000ce4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cac:	4b0d      	ldr	r3, [pc, #52]	; (8000ce4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cae:	689b      	ldr	r3, [r3, #8]
 8000cb0:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8000cb4:	6a3b      	ldr	r3, [r7, #32]
 8000cb6:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	608b      	str	r3, [r1, #8]
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000cbc:	4a09      	ldr	r2, [pc, #36]	; (8000ce4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cbe:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	f043 0301 	orr.w	r3, r3, #1
 8000cc6:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000cc8:	bf00      	nop
 8000cca:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d0f9      	beq.n	8000cca <XMC_SCU_CLOCK_StartSystemPll+0x14a>
    {
      /* wait for prescaler mode */
    }
  }
}
 8000cd6:	3718      	adds	r7, #24
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	431bde83 	.word	0x431bde83
 8000ce0:	aaaaaaab 	.word	0xaaaaaaab
 8000ce4:	50004710 	.word	0x50004710
 8000ce8:	f08080ff 	.word	0xf08080ff
 8000cec:	88888889 	.word	0x88888889
 8000cf0:	b60b60b7 	.word	0xb60b60b7

08000cf4 <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000cfc:	4907      	ldr	r1, [pc, #28]	; (8000d1c <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000cfe:	4b07      	ldr	r3, [pc, #28]	; (8000d1c <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	3b01      	subs	r3, #1
 8000d0a:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	608b      	str	r3, [r1, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  XMC_SCU_lDelay(50U);
 8000d10:	2032      	movs	r0, #50	; 0x32
 8000d12:	f7ff fc0d 	bl	8000530 <XMC_SCU_lDelay>
}
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	50004710 	.word	0x50004710

08000d20 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	60da      	str	r2, [r3, #12]
}
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop

08000d40 <XMC_CCU4_lDeassertReset>:
    XMC_ASSERT("XMC_CCU4_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	4a10      	ldr	r2, [pc, #64]	; (8000d8c <XMC_CCU4_lDeassertReset+0x4c>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d103      	bne.n	8000d58 <XMC_CCU4_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 8000d50:	2004      	movs	r0, #4
 8000d52:	f7ff fc97 	bl	8000684 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000d56:	e016      	b.n	8000d86 <XMC_CCU4_lDeassertReset+0x46>
  }
#if defined(CCU41)
  else if (module == CCU41)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4a0d      	ldr	r2, [pc, #52]	; (8000d90 <XMC_CCU4_lDeassertReset+0x50>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d103      	bne.n	8000d68 <XMC_CCU4_lDeassertReset+0x28>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 8000d60:	2008      	movs	r0, #8
 8000d62:	f7ff fc8f 	bl	8000684 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000d66:	e00e      	b.n	8000d86 <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4a0a      	ldr	r2, [pc, #40]	; (8000d94 <XMC_CCU4_lDeassertReset+0x54>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d103      	bne.n	8000d78 <XMC_CCU4_lDeassertReset+0x38>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 8000d70:	2010      	movs	r0, #16
 8000d72:	f7ff fc87 	bl	8000684 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000d76:	e006      	b.n	8000d86 <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	4a07      	ldr	r2, [pc, #28]	; (8000d98 <XMC_CCU4_lDeassertReset+0x58>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d102      	bne.n	8000d86 <XMC_CCU4_lDeassertReset+0x46>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 8000d80:	4806      	ldr	r0, [pc, #24]	; (8000d9c <XMC_CCU4_lDeassertReset+0x5c>)
 8000d82:	f7ff fc7f 	bl	8000684 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	4000c000 	.word	0x4000c000
 8000d90:	40010000 	.word	0x40010000
 8000d94:	40014000 	.word	0x40014000
 8000d98:	48004000 	.word	0x48004000
 8000d9c:	10000001 	.word	0x10000001

08000da0 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8000da8:	2010      	movs	r0, #16
 8000daa:	f7ff fdab 	bl	8000904 <XMC_SCU_CLOCK_EnableClock>
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f7ff ffc6 	bl	8000d40 <XMC_CCU4_lDeassertReset>
#endif
}
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop

08000dbc <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f7ff ffe9 	bl	8000da0 <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f7ff ffa6 	bl	8000d20 <XMC_CCU4_StartPrescaler>
  
  gctrl = module->GCTRL;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000de0:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 8000de2:	78fb      	ldrb	r3, [r7, #3]
 8000de4:	039b      	lsls	r3, r3, #14
 8000de6:	68fa      	ldr	r2, [r7, #12]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	68fa      	ldr	r2, [r7, #12]
 8000df0:	601a      	str	r2, [r3, #0]
}
 8000df2:	3710      	adds	r7, #16
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	795b      	ldrb	r3, [r3, #5]
 8000e0e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	051a      	lsls	r2, r3, #20
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	791b      	ldrb	r3, [r3, #4]
 8000e1e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	461a      	mov	r2, r3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	795b      	ldrb	r3, [r3, #5]
 8000e2e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	461a      	mov	r2, r3
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	795b      	ldrb	r3, [r3, #5]
 8000e3e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	461a      	mov	r2, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	791b      	ldrb	r3, [r3, #4]
 8000e4e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	461a      	mov	r2, r3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <XMC_CCU4_SLICE_SetPrescaler>:
  XMC_CCU4_SLICE_SetDitherCompareValue((XMC_CCU4_SLICE_t *)slice, (uint8_t)spread);
}

/* Programs Pre-scalar divider  */
void XMC_CCU4_SLICE_SetPrescaler(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_PRESCALER_t div_val)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	70fb      	strb	r3, [r7, #3]
  uint32_t fpc;
  
  XMC_ASSERT("XMC_CCU4_SLICE_SetPrescaler:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));

  fpc = slice->FPC;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e74:	60fb      	str	r3, [r7, #12]
  fpc &= ~((uint32_t) CCU4_CC4_FPC_PVAL_Msk);
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000e7c:	60fb      	str	r3, [r7, #12]
  fpc |= ((uint32_t) div_val) << CCU4_CC4_FPC_PVAL_Pos;
 8000e7e:	78fb      	ldrb	r3, [r7, #3]
 8000e80:	021b      	lsls	r3, r3, #8
 8000e82:	68fa      	ldr	r2, [r7, #12]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	60fb      	str	r3, [r7, #12]
  slice->FPC = fpc;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	68fa      	ldr	r2, [r7, #12]
 8000e8c:	629a      	str	r2, [r3, #40]	; 0x28
  /* 
   * In any case, update the initial value of the divider which is to be loaded once the prescaler increments to the 
   * compare value.
   */
  slice->PSC = (uint32_t) div_val;
 8000e8e:	78fa      	ldrb	r2, [r7, #3]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000e94:	3714      	adds	r7, #20
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b087      	sub	sp, #28
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	70fb      	strb	r3, [r7, #3]
 8000eac:	4613      	mov	r3, r2
 8000eae:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000eb6:	60fb      	str	r3, [r7, #12]
  
  switch(event)
 8000eb8:	78fb      	ldrb	r3, [r7, #3]
 8000eba:	2b09      	cmp	r3, #9
 8000ebc:	d82c      	bhi.n	8000f18 <XMC_CCU4_SLICE_SetInterruptNode+0x78>
 8000ebe:	a201      	add	r2, pc, #4	; (adr r2, 8000ec4 <XMC_CCU4_SLICE_SetInterruptNode+0x24>)
 8000ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ec4:	08000eed 	.word	0x08000eed
 8000ec8:	08000eed 	.word	0x08000eed
 8000ecc:	08000ef7 	.word	0x08000ef7
 8000ed0:	08000ef7 	.word	0x08000ef7
 8000ed4:	08000f19 	.word	0x08000f19
 8000ed8:	08000f19 	.word	0x08000f19
 8000edc:	08000f19 	.word	0x08000f19
 8000ee0:	08000f19 	.word	0x08000f19
 8000ee4:	08000f01 	.word	0x08000f01
 8000ee8:	08000f0d 	.word	0x08000f0d
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 8000eec:	2303      	movs	r3, #3
 8000eee:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]
      break;
 8000ef4:	e016      	b.n	8000f24 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
 8000ef6:	230c      	movs	r3, #12
 8000ef8:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
 8000efa:	2302      	movs	r3, #2
 8000efc:	617b      	str	r3, [r7, #20]
      break;
 8000efe:	e011      	b.n	8000f24 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 8000f00:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f04:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
 8000f06:	2308      	movs	r3, #8
 8000f08:	617b      	str	r3, [r7, #20]
      break;
 8000f0a:	e00b      	b.n	8000f24 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 8000f0c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f10:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
 8000f12:	230a      	movs	r3, #10
 8000f14:	617b      	str	r3, [r7, #20]
      break;
 8000f16:	e005      	b.n	8000f24 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    default:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 8000f18:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000f1c:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
 8000f1e:	230c      	movs	r3, #12
 8000f20:	617b      	str	r3, [r7, #20]
      break;
 8000f22:	bf00      	nop
  }
  
  srs &= ~mask; 
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	43db      	mvns	r3, r3
 8000f28:	68fa      	ldr	r2, [r7, #12]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	60fb      	str	r3, [r7, #12]
  srs |= (uint32_t)sr << pos;
 8000f2e:	78ba      	ldrb	r2, [r7, #2]
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	68fa      	ldr	r2, [r7, #12]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	60fb      	str	r3, [r7, #12]
  slice->SRS = srs;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 8000f44:	371c      	adds	r7, #28
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <XMC_CCU8_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR> 
 *  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU8_GIDLC_SPRB_Msk;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	60da      	str	r2, [r3, #12]
}
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop

08000f70 <XMC_CCU8_SLICE_StopTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StopTimer(XMC_CCU8_SLICE_t *const slice)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TRBC_Msk;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	611a      	str	r2, [r3, #16]
}
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <XMC_CCU8_lDeassertReset>:
    XMC_ASSERT("XMC_CCU8_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU8_lDeassertReset(const XMC_CCU8_MODULE_t *const module)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  if (module == CCU80)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4a09      	ldr	r2, [pc, #36]	; (8000fb8 <XMC_CCU8_lDeassertReset+0x30>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d103      	bne.n	8000fa0 <XMC_CCU8_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU80);
 8000f98:	2080      	movs	r0, #128	; 0x80
 8000f9a:	f7ff fb73 	bl	8000684 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000f9e:	e007      	b.n	8000fb0 <XMC_CCU8_lDeassertReset+0x28>
  }
#if defined(CCU81)
  else if (module == CCU81)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4a06      	ldr	r2, [pc, #24]	; (8000fbc <XMC_CCU8_lDeassertReset+0x34>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d103      	bne.n	8000fb0 <XMC_CCU8_lDeassertReset+0x28>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU81);
 8000fa8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000fac:	f7ff fb6a 	bl	8000684 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU8_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40020000 	.word	0x40020000
 8000fbc:	40024000 	.word	0x40024000

08000fc0 <XMC_CCU8_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/* API to set the CCU8 module as active and enable the clock  */
void XMC_CCU8_EnableModule(XMC_CCU8_MODULE_t *const module)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_EnableModule:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));

#if (UC_FAMILY == XMC4)
  /* Enable CCU8 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8000fc8:	2010      	movs	r0, #16
 8000fca:	f7ff fc9b 	bl	8000904 <XMC_SCU_CLOCK_EnableClock>
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU8_lUngateClock(module);
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU8_lDeassertReset(module);
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff ffda 	bl	8000f88 <XMC_CCU8_lDeassertReset>
#endif
}
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop

08000fdc <XMC_CCU8_Init>:
#endif
}

/* API to initialize CCU8 global resources  */
void XMC_CCU8_Init(XMC_CCU8_MODULE_t *const module, const XMC_CCU8_SLICE_MCMS_ACTION_t mcs_action)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	70fb      	strb	r3, [r7, #3]

  XMC_ASSERT("XMC_CCU8_Init:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  XMC_ASSERT("XMC_CCU8_Init:Invalid mcs action", XMC_CCU8_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU8 module */
  XMC_CCU8_EnableModule(module);
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f7ff ffe9 	bl	8000fc0 <XMC_CCU8_EnableModule>
  /* Start the prescaler */
  XMC_CCU8_StartPrescaler(module);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f7ff ffae 	bl	8000f50 <XMC_CCU8_StartPrescaler>
  
  gctrl = module->GCTRL;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU8_GCTRL_MSDE_Msk);
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001000:	60fb      	str	r3, [r7, #12]
  gctrl |= (uint32_t)mcs_action << CCU8_GCTRL_MSDE_Pos;
 8001002:	78fb      	ldrb	r3, [r7, #3]
 8001004:	039b      	lsls	r3, r3, #14
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	4313      	orrs	r3, r2
 800100a:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	68fa      	ldr	r2, [r7, #12]
 8001010:	601a      	str	r2, [r3, #0]
}
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <XMC_CCU8_SLICE_CompareInit>:
}

/* API to configure CC8 Slice in Compare mode */
void XMC_CCU8_SLICE_CompareInit(XMC_CCU8_SLICE_t *const slice,
                                const XMC_CCU8_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Timer Init Pointer is NULL",
             (XMC_CCU8_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);
  /* Stops the timer */
  XMC_CCU8_SLICE_StopTimer(slice);
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f7ff ffa4 	bl	8000f70 <XMC_CCU8_SLICE_StopTimer>
  /* Program the timer mode */
  slice->TC = compare_init->tc;
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC =  (uint32_t)compare_init->timer_concatenation << CCU8_CC8_CMC_TCE_Pos;
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	7b5b      	ldrb	r3, [r3, #13]
 8001034:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001038:	b2db      	uxtb	r3, r3
 800103a:	051a      	lsls	r2, r3, #20
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	7b1b      	ldrb	r3, [r3, #12]
 8001044:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001048:	b2db      	uxtb	r3, r3
 800104a:	461a      	mov	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	7b1b      	ldrb	r3, [r3, #12]
 8001054:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001058:	b2db      	uxtb	r3, r3
 800105a:	461a      	mov	r2, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	7b5b      	ldrb	r3, [r3, #13]
 8001064:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001068:	b2db      	uxtb	r3, r3
 800106a:	461a      	mov	r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->psl;
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685a      	ldr	r2, [r3, #4]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	619a      	str	r2, [r3, #24]
  /* Asymmetric PWM and Slice output routing configuration */
#if defined(CCU8V3) /* Defined for XMC1400 devices only */
  slice->CHC = (uint32_t) compare_init->chc;
#else
  slice->CHC = (uint32_t)((uint32_t)compare_init->chc ^ XMC_CCU8_SLICE_CHC_CONFIG_MASK);
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	f083 0214 	eor.w	r2, r3, #20
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	649a      	str	r2, [r3, #72]	; 0x48
#endif
}
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop

0800108c <XMC_CCU8_SLICE_StartConfig>:

/* API to configure the Start trigger function of a slice*/
void XMC_CCU8_SLICE_StartConfig(XMC_CCU8_SLICE_t *const slice,
                                const XMC_CCU8_SLICE_EVENT_t event,
                                const XMC_CCU8_SLICE_START_MODE_t start_mode)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	460b      	mov	r3, r1
 8001096:	70fb      	strb	r3, [r7, #3]
 8001098:	4613      	mov	r3, r2
 800109a:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Start Mode", 
             ((start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START) ||\
              (start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR)));
  cmc = slice->CMC;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	60bb      	str	r3, [r7, #8]

  cmc &= ~((uint32_t) CCU8_CC8_CMC_STRTS_Msk);
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	f023 0303 	bic.w	r3, r3, #3
 80010a8:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_STRTS_Pos;
 80010aa:	78fb      	ldrb	r3, [r7, #3]
 80010ac:	68ba      	ldr	r2, [r7, #8]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	68ba      	ldr	r2, [r7, #8]
 80010b6:	605a      	str	r2, [r3, #4]

  tc  = slice->TC;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	695b      	ldr	r3, [r3, #20]
 80010bc:	60fb      	str	r3, [r7, #12]

  if(start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR)
 80010be:	78bb      	ldrb	r3, [r7, #2]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d104      	bne.n	80010ce <XMC_CCU8_SLICE_StartConfig+0x42>
  {
    tc |= (uint32_t) CCU8_CC8_TC_STRM_Msk;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	e003      	b.n	80010d6 <XMC_CCU8_SLICE_StartConfig+0x4a>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_STRM_Msk);
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80010d4:	60fb      	str	r3, [r7, #12]
  }

  slice->TC = tc;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	68fa      	ldr	r2, [r7, #12]
 80010da:	615a      	str	r2, [r3, #20]
}
 80010dc:	3714      	adds	r7, #20
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop

080010e8 <XMC_CCU8_SLICE_TrapConfig>:

/* API to configure trap function*/
void XMC_CCU8_SLICE_TrapConfig(XMC_CCU8_SLICE_t *const slice,
                               const XMC_CCU8_SLICE_TRAP_EXIT_MODE_t exit_mode,
                               const bool synch_with_pwm)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	460b      	mov	r3, r1
 80010f2:	70fb      	strb	r3, [r7, #3]
 80010f4:	4613      	mov	r3, r2
 80010f6:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU8_SLICE_TrapConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_TrapConfig:Invalid Exit Mode", ((exit_mode == XMC_CCU8_SLICE_TRAP_EXIT_MODE_AUTOMATIC) ||\
                                                             (exit_mode == XMC_CCU8_SLICE_TRAP_EXIT_MODE_SW)));

  cmc = slice->CMC;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	60bb      	str	r3, [r7, #8]

  /* Map trap function to Event 2 */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_TS_Msk);
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001104:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) 1) << CCU8_CC8_CMC_TS_Pos;
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800110c:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	68ba      	ldr	r2, [r7, #8]
 8001112:	605a      	str	r2, [r3, #4]

  tc = slice->TC;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	695b      	ldr	r3, [r3, #20]
 8001118:	60fb      	str	r3, [r7, #12]

  /* Configure synchronization option */
  if(synch_with_pwm == true)
 800111a:	78bb      	ldrb	r3, [r7, #2]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d004      	beq.n	800112a <XMC_CCU8_SLICE_TrapConfig+0x42>
  {
    tc |= (uint32_t) CCU8_CC8_TC_TRPSE_Msk;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	e003      	b.n	8001132 <XMC_CCU8_SLICE_TrapConfig+0x4a>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_TRPSE_Msk);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001130:	60fb      	str	r3, [r7, #12]
  }

  /* Configure exit mode */
  if(exit_mode == XMC_CCU8_SLICE_TRAP_EXIT_MODE_SW)
 8001132:	78fb      	ldrb	r3, [r7, #3]
 8001134:	2b01      	cmp	r3, #1
 8001136:	d104      	bne.n	8001142 <XMC_CCU8_SLICE_TrapConfig+0x5a>
  {
    tc |= (uint32_t) CCU8_CC8_TC_TRPSW_Msk;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	e003      	b.n	800114a <XMC_CCU8_SLICE_TrapConfig+0x62>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_TRPSW_Msk);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001148:	60fb      	str	r3, [r7, #12]
  }

  slice->TC = tc;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	68fa      	ldr	r2, [r7, #12]
 800114e:	615a      	str	r2, [r3, #20]
}
 8001150:	3714      	adds	r7, #20
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop

0800115c <XMC_CCU8_SLICE_ConfigureEvent>:

/* API to configure a slice trigger event */
void XMC_CCU8_SLICE_ConfigureEvent(XMC_CCU8_SLICE_t *const slice,
                                   const XMC_CCU8_SLICE_EVENT_t event,
                                   const XMC_CCU8_SLICE_EVENT_CONFIG_t *const config)
{
 800115c:	b480      	push	{r7}
 800115e:	b089      	sub	sp, #36	; 0x24
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	460b      	mov	r3, r1
 8001166:	607a      	str	r2, [r7, #4]
 8001168:	72fb      	strb	r3, [r7, #11]
              (config->level == XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
  XMC_ASSERT("XMC_CCU8_SLICE_ConfigureEvent:Invalid Debounce Period",
             XMC_CCU8_SLICE_CHECK_EVENT_FILTER(config->duration));

  /* Calculate offset with reference to event */
  offset = ((uint8_t) event) - 1U;
 800116a:	7afb      	ldrb	r3, [r7, #11]
 800116c:	3b01      	subs	r3, #1
 800116e:	77fb      	strb	r3, [r7, #31]
  ins |= ((uint32_t) config->mapped_input) << pos;

  slice->INS1 = ins;

#else
  ins = slice->INS;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	61bb      	str	r3, [r7, #24]

  /* First, configure the edge sensitivity */
  pos = ((uint8_t) CCU8_CC8_INS_EV0EM_Pos) + (uint8_t)(offset << 1U);
 8001176:	7ffb      	ldrb	r3, [r7, #31]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	b2db      	uxtb	r3, r3
 800117c:	3310      	adds	r3, #16
 800117e:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
 8001180:	7dfb      	ldrb	r3, [r7, #23]
 8001182:	2203      	movs	r2, #3
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4013      	ands	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->edge) << pos;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	785b      	ldrb	r3, [r3, #1]
 8001194:	461a      	mov	r2, r3
 8001196:	7dfb      	ldrb	r3, [r7, #23]
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]

  /* Next, the level */
  pos = ((uint8_t) CCU8_CC8_INS_EV0LM_Pos) + offset;
 80011a2:	7ffb      	ldrb	r3, [r7, #31]
 80011a4:	3316      	adds	r3, #22
 80011a6:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
 80011a8:	7dfb      	ldrb	r3, [r7, #23]
 80011aa:	2201      	movs	r2, #1
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	43db      	mvns	r3, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4013      	ands	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) (config->level)) << pos;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	789b      	ldrb	r3, [r3, #2]
 80011bc:	461a      	mov	r2, r3
 80011be:	7dfb      	ldrb	r3, [r7, #23]
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]

  /* Next, the debounce filter */
  pos = ((uint8_t) CCU8_CC8_INS_LPF0M_Pos) + (uint8_t)(offset << 1U);
 80011ca:	7ffb      	ldrb	r3, [r7, #31]
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	3319      	adds	r3, #25
 80011d2:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
 80011d4:	7dfb      	ldrb	r3, [r7, #23]
 80011d6:	2203      	movs	r2, #3
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4013      	ands	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->duration) << pos;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	78db      	ldrb	r3, [r3, #3]
 80011e8:	461a      	mov	r2, r3
 80011ea:	7dfb      	ldrb	r3, [r7, #23]
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]

  /* Finally the input */
  pos = ((uint8_t) CCU8_CC8_INS_EV0IS_Pos) + (uint8_t)(offset << 2U);
 80011f6:	7ffb      	ldrb	r3, [r7, #31]
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 80011fc:	7dfb      	ldrb	r3, [r7, #23]
 80011fe:	220f      	movs	r2, #15
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	43db      	mvns	r3, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4013      	ands	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->mapped_input) << pos;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	461a      	mov	r2, r3
 8001212:	7dfb      	ldrb	r3, [r7, #23]
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4313      	orrs	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]

  slice->INS = ins;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	601a      	str	r2, [r3, #0]
#endif
}
 8001224:	3724      	adds	r7, #36	; 0x24
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop

08001230 <XMC_CCU8_SLICE_SetTimerPeriodMatch>:
  slice->TC = tc;
}

/* Programs period match value of the timer  */
void XMC_CCU8_SLICE_SetTimerPeriodMatch(XMC_CCU8_SLICE_t *const slice, const uint16_t period_val)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	460b      	mov	r3, r1
 800123a:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 800123c:	887a      	ldrh	r2, [r7, #2]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <XMC_CCU8_SLICE_SetTimerCompareMatch>:

/* Programs timer compare match value for channel 1 or 2 */
void XMC_CCU8_SLICE_SetTimerCompareMatch(XMC_CCU8_SLICE_t *const slice,
                                         const XMC_CCU8_SLICE_COMPARE_CHANNEL_t channel,
                                         const uint16_t compare_val)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	460b      	mov	r3, r1
 8001256:	70fb      	strb	r3, [r7, #3]
 8001258:	4613      	mov	r3, r2
 800125a:	803b      	strh	r3, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid channel", XMC_CCU8_SLICE_CHECK_COMP_CHANNEL(channel));

  if (XMC_CCU8_SLICE_COMPARE_CHANNEL_1 == channel)
 800125c:	78fb      	ldrb	r3, [r7, #3]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d103      	bne.n	800126a <XMC_CCU8_SLICE_SetTimerCompareMatch+0x1e>
  {
    slice->CR1S = (uint32_t) compare_val;
 8001262:	883a      	ldrh	r2, [r7, #0]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	63da      	str	r2, [r3, #60]	; 0x3c
 8001268:	e002      	b.n	8001270 <XMC_CCU8_SLICE_SetTimerCompareMatch+0x24>
  }
  else
  {
    slice->CR2S = (uint32_t) compare_val;
 800126a:	883a      	ldrh	r2, [r7, #0]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop

0800127c <XMC_CCU8_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU8_SLICE_SetInterruptNode(XMC_CCU8_SLICE_t *const slice,
                                     const XMC_CCU8_SLICE_IRQ_ID_t event,
                                     const XMC_CCU8_SLICE_SR_ID_t sr)
{
 800127c:	b480      	push	{r7}
 800127e:	b087      	sub	sp, #28
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	460b      	mov	r3, r1
 8001286:	70fb      	strb	r3, [r7, #3]
 8001288:	4613      	mov	r3, r2
 800128a:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU8_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));

  srs = slice->SRS;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001292:	60fb      	str	r3, [r7, #12]

  switch(event)
 8001294:	78fb      	ldrb	r3, [r7, #3]
 8001296:	2b09      	cmp	r3, #9
 8001298:	d831      	bhi.n	80012fe <XMC_CCU8_SLICE_SetInterruptNode+0x82>
 800129a:	a201      	add	r2, pc, #4	; (adr r2, 80012a0 <XMC_CCU8_SLICE_SetInterruptNode+0x24>)
 800129c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012a0:	080012c9 	.word	0x080012c9
 80012a4:	080012c9 	.word	0x080012c9
 80012a8:	080012d3 	.word	0x080012d3
 80012ac:	080012d3 	.word	0x080012d3
 80012b0:	080012dd 	.word	0x080012dd
 80012b4:	080012dd 	.word	0x080012dd
 80012b8:	080012ff 	.word	0x080012ff
 80012bc:	080012ff 	.word	0x080012ff
 80012c0:	080012e7 	.word	0x080012e7
 80012c4:	080012f3 	.word	0x080012f3
  {
    case XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU8_CC8_SRS_POSR_Msk);
 80012c8:	2303      	movs	r3, #3
 80012ca:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_POSR_Pos;
 80012cc:	2300      	movs	r3, #0
 80012ce:	613b      	str	r3, [r7, #16]
      break;
 80012d0:	e01b      	b.n	800130a <XMC_CCU8_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1:
    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1:
      mask = ((uint32_t) CCU8_CC8_SRS_CM1SR_Msk);
 80012d2:	230c      	movs	r3, #12
 80012d4:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_CM1SR_Pos;
 80012d6:	2302      	movs	r3, #2
 80012d8:	613b      	str	r3, [r7, #16]
      break;
 80012da:	e016      	b.n	800130a <XMC_CCU8_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2:
    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2:
      mask = ((uint32_t) CCU8_CC8_SRS_CM2SR_Msk);
 80012dc:	2330      	movs	r3, #48	; 0x30
 80012de:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_CM2SR_Pos;
 80012e0:	2304      	movs	r3, #4
 80012e2:	613b      	str	r3, [r7, #16]
      break;
 80012e4:	e011      	b.n	800130a <XMC_CCU8_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU8_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU8_CC8_SRS_E0SR_Msk);
 80012e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012ea:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_E0SR_Pos;
 80012ec:	2308      	movs	r3, #8
 80012ee:	613b      	str	r3, [r7, #16]
      break;
 80012f0:	e00b      	b.n	800130a <XMC_CCU8_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU8_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU8_CC8_SRS_E1SR_Msk);
 80012f2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80012f6:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_E1SR_Pos;
 80012f8:	230a      	movs	r3, #10
 80012fa:	613b      	str	r3, [r7, #16]
      break;
 80012fc:	e005      	b.n	800130a <XMC_CCU8_SLICE_SetInterruptNode+0x8e>

    default:
      mask = ((uint32_t) CCU8_CC8_SRS_E2SR_Msk);
 80012fe:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001302:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_E2SR_Pos;
 8001304:	230c      	movs	r3, #12
 8001306:	613b      	str	r3, [r7, #16]
      break;
 8001308:	bf00      	nop
  }
  
  srs &= ~mask;
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	43db      	mvns	r3, r3
 800130e:	68fa      	ldr	r2, [r7, #12]
 8001310:	4013      	ands	r3, r2
 8001312:	60fb      	str	r3, [r7, #12]
  srs |= (uint32_t)sr << pos;
 8001314:	78ba      	ldrb	r2, [r7, #2]
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	68fa      	ldr	r2, [r7, #12]
 800131e:	4313      	orrs	r3, r2
 8001320:	60fb      	str	r3, [r7, #12]
  
  slice->SRS = srs;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	68fa      	ldr	r2, [r7, #12]
 8001326:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 800132a:	371c      	adds	r7, #28
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <XMC_CCU8_SLICE_DeadTimeInit>:
}

/* Initializes Dead time configuration for the slice outputs */
void XMC_CCU8_SLICE_DeadTimeInit(XMC_CCU8_SLICE_t *const slice,
                                 const XMC_CCU8_SLICE_DEAD_TIME_CONFIG_t *const config)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_ConfigureDeadTime:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));

  /* Program dead time value for channel 1 */
  slice->DC1R = config->dc1r;
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685a      	ldr	r2, [r3, #4]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	651a      	str	r2, [r3, #80]	; 0x50
  /* Program dead time value for channel 2 */
  slice->DC2R = config->dc2r;
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	689a      	ldr	r2, [r3, #8]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	655a      	str	r2, [r3, #84]	; 0x54
  /* Program dead time control configuration */
  slice->DTC = config->dtc;
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <XMC_CCU8_SLICE_ConfigureDeadTime>:

/* Activates or deactivates dead time for compare channel and ST path */
void XMC_CCU8_SLICE_ConfigureDeadTime(XMC_CCU8_SLICE_t *const slice, const uint8_t mask)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	460b      	mov	r3, r1
 800136a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_SLICE_ConfigureDeadTime:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_ConfigureDeadTime:Invalid Channel", (mask <= XMC_CCU8_SLICE_DEAD_TIME_CONFIG_MASK));

  slice->DTC &= ~((uint32_t) XMC_CCU8_SLICE_DEAD_TIME_CONFIG_MASK);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001370:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	64da      	str	r2, [r3, #76]	; 0x4c
  slice->DTC |= (uint32_t) mask;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800137c:	78fb      	ldrb	r3, [r7, #3]
 800137e:	431a      	orrs	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop

08001390 <XMC_ERU_ETL_Init>:
 ********************************************************************************************************************/
/* Initializes the selected ERU_ETLx channel with the config structure.  */
void XMC_ERU_ETL_Init(XMC_ERU_t *const eru,
                      const uint8_t channel,
                      const XMC_ERU_ETL_CONFIG_t *const config)
{ 
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	460b      	mov	r3, r1
 800139a:	607a      	str	r2, [r7, #4]
 800139c:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);
 800139e:	68f8      	ldr	r0, [r7, #12]
 80013a0:	f7ff f802 	bl	80003a8 <XMC_ERU_Enable>

  eru->EXISEL = (eru->EXISEL & 
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681a      	ldr	r2, [r3, #0]
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
 80013a8:	7afb      	ldrb	r3, [r7, #11]
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	4619      	mov	r1, r3
 80013ae:	230f      	movs	r3, #15
 80013b0:	408b      	lsls	r3, r1
 80013b2:	43db      	mvns	r3, r3
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL & 
 80013b4:	401a      	ands	r2, r3
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
                (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	7af9      	ldrb	r1, [r7, #11]
 80013bc:	0089      	lsls	r1, r1, #2
 80013be:	408b      	lsls	r3, r1
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL & 
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
 80013c0:	431a      	orrs	r2, r3
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL & 
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	601a      	str	r2, [r3, #0]
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
                (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));
  
  eru->EXICON[channel] = config->raw;
 80013c6:	7afa      	ldrb	r2, [r7, #11]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6859      	ldr	r1, [r3, #4]
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	3204      	adds	r2, #4
 80013d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop

080013dc <XMC_ERU_OGU_Init>:

/* Initializes the selected ERU_OGUy channel with the config structure.  */
void XMC_ERU_OGU_Init(XMC_ERU_t *const eru,
                      const uint8_t channel,
                      const XMC_ERU_OGU_CONFIG_t *const config)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	460b      	mov	r3, r1
 80013e6:	607a      	str	r2, [r7, #4]
 80013e8:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_ERU_OGU_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_OGU_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);
 80013ea:	68f8      	ldr	r0, [r7, #12]
 80013ec:	f7fe ffdc 	bl	80003a8 <XMC_ERU_Enable>

  eru->EXOCON[channel] = config->raw;
 80013f0:	7afa      	ldrb	r2, [r7, #11]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6819      	ldr	r1, [r3, #0]
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	3208      	adds	r2, #8
 80013fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	460b      	mov	r3, r1
 800140e:	70fb      	strb	r3, [r7, #3]
 8001410:	4613      	mov	r3, r2
 8001412:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001418:	78fb      	ldrb	r3, [r7, #3]
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	4619      	mov	r1, r3
 800141e:	2303      	movs	r3, #3
 8001420:	408b      	lsls	r3, r1
 8001422:	43db      	mvns	r3, r3
 8001424:	401a      	ands	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800142e:	78bb      	ldrb	r3, [r7, #2]
 8001430:	78f9      	ldrb	r1, [r7, #3]
 8001432:	0049      	lsls	r1, r1, #1
 8001434:	408b      	lsls	r3, r1
 8001436:	431a      	orrs	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop

08001448 <XMC_POSIF_Enable>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/* API to enable the POSIF module */
void XMC_POSIF_Enable(XMC_POSIF_t *const peripheral)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
#if UC_FAMILY == XMC4
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8001450:	2010      	movs	r0, #16
 8001452:	f7ff fa57 	bl	8000904 <XMC_SCU_CLOCK_EnableClock>
#endif

  if (peripheral == POSIF0)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a09      	ldr	r2, [pc, #36]	; (8001480 <XMC_POSIF_Enable+0x38>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d104      	bne.n	8001468 <XMC_POSIF_Enable+0x20>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_POSIF0);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
      XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_POSIF0);
 800145e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001462:	f7ff f90f 	bl	8000684 <XMC_SCU_RESET_DeassertPeripheralReset>
 8001466:	e007      	b.n	8001478 <XMC_POSIF_Enable+0x30>
#endif
  }
#if defined(POSIF1)
  else if (peripheral == POSIF1)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4a06      	ldr	r2, [pc, #24]	; (8001484 <XMC_POSIF_Enable+0x3c>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d103      	bne.n	8001478 <XMC_POSIF_Enable+0x30>
  {
#if defined(CLOCK_GATING_SUPPORTED)
      XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_POSIF1);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
      XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_POSIF1);
 8001470:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001474:	f7ff f906 	bl	8000684 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_POSIF_Disable:Invalid module pointer", 0);
  }
}
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40028000 	.word	0x40028000
 8001484:	4002c000 	.word	0x4002c000

08001488 <XMC_POSIF_MCM_Init>:

/* API to initialize multi-channel mode.
 * This is used in Hall mode, standalone multi-channel mode and quadrature with multi-channel mode
 */
XMC_POSIF_STATUS_t XMC_POSIF_MCM_Init(XMC_POSIF_t *const peripheral, const XMC_POSIF_MCM_CONFIG_t * const config)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
  XMC_POSIF_STATUS_t retval;

  XMC_ASSERT("XMC_POSIF_MCM_Init:Invalid module pointer", XMC_POSIF_IsPeripheralValid(peripheral));
  XMC_ASSERT("XMC_POSIF_MCM_Init:NULL Pointer", (config != (XMC_POSIF_MCM_CONFIG_t *)NULL) );

  if ((XMC_POSIF_MODE_t)((peripheral->PCONF) & (uint32_t)POSIF_PCONF_FSEL_Msk) != XMC_POSIF_MODE_QD)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	b2db      	uxtb	r3, r3
 8001498:	f003 0303 	and.w	r3, r3, #3
 800149c:	2b01      	cmp	r3, #1
 800149e:	d009      	beq.n	80014b4 <XMC_POSIF_MCM_Init+0x2c>
  {
    peripheral->PCONF |= config->mcm_config;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	431a      	orrs	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	601a      	str	r2, [r3, #0]
    retval = XMC_POSIF_STATUS_OK;
 80014ae:	2300      	movs	r3, #0
 80014b0:	73fb      	strb	r3, [r7, #15]
 80014b2:	e001      	b.n	80014b8 <XMC_POSIF_MCM_Init+0x30>
  }
  else
  {
    retval = XMC_POSIF_STATUS_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	73fb      	strb	r3, [r7, #15]
  }
  return retval;
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3714      	adds	r7, #20
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop

080014c8 <XMC_VADC_GROUP_ExternalMuxControlInit>:
 * \par<b>Related APIs:</b><BR>
 * None
 */
__STATIC_INLINE void XMC_VADC_GROUP_ExternalMuxControlInit(XMC_VADC_GROUP_t *const group_ptr,
                                                           const XMC_VADC_GROUP_EMUXCFG_t emux_cfg)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 80014d2:	783b      	ldrb	r3, [r7, #0]
 80014d4:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	461a      	mov	r2, r3
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
 80014dc:	78bb      	ldrb	r3, [r7, #2]
 80014de:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	041b      	lsls	r3, r3, #16
{
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 80014e6:	4313      	orrs	r3, r2
 80014e8:	60fb      	str	r3, [r7, #12]
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	68fa      	ldr	r2, [r7, #12]
 80014ee:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 80014f2:	78fb      	ldrb	r3, [r7, #3]
 80014f4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	071a      	lsls	r2, r3, #28
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
 80014fc:	78fb      	ldrb	r3, [r7, #3]
 80014fe:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8001502:	b2db      	uxtb	r3, r3
 8001504:	069b      	lsls	r3, r3, #26

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 8001506:	431a      	orrs	r2, r3
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);
 8001508:	78fb      	ldrb	r3, [r7, #3]
 800150a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800150e:	b2db      	uxtb	r3, r3
 8001510:	075b      	lsls	r3, r3, #29

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 8001512:	4313      	orrs	r3, r2
 8001514:	60fb      	str	r3, [r7, #12]
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);

#if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
  emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_Pos);
#endif
  group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f8d3 21f0 	ldr.w	r2, [r3, #496]	; 0x1f0
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	4313      	orrs	r3, r2
 8001520:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
}
 800152a:	3714      	adds	r7, #20
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <XMC_VADC_GROUP_BackgroundEnableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_BackgroundDisableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN2_Msk;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001542:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop

08001558 <XMC_VADC_GROUP_BackgroundDisableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN2_Msk);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001566:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop

0800157c <XMC_VADC_GLOBAL_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/*API to enable the VADC Module*/
void XMC_VADC_GLOBAL_EnableModule(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  /* Reset the Hardware */
  XMC_SCU_RESET_DeassertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC );
 8001580:	2001      	movs	r0, #1
 8001582:	f7ff f87f 	bl	8000684 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
}
 8001586:	bd80      	pop	{r7, pc}

08001588 <XMC_VADC_GLOBAL_Init>:
}


/* API to initialize global resources */
void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *config)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
  uint32_t reg;
#endif
  XMC_ASSERT("XMC_VADC_GLOBAL_Init:Wrong Module Pointer", (global_ptr == VADC))

  /* Enable the VADC module*/
  XMC_VADC_GLOBAL_EnableModule();
 8001592:	f7ff fff3 	bl	800157c <XMC_VADC_GLOBAL_EnableModule>

  global_ptr->CLC = (uint32_t)(config->clc);
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	695a      	ldr	r2, [r3, #20]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	601a      	str	r2, [r3, #0]

  /* Clock configuration */

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  global_ptr->GLOBCFG  = (uint32_t)(config->clock_config.globcfg | (uint32_t)(VADC_GLOBCFG_DIVWC_Msk));
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif

  /* ICLASS-0 configuration */
  global_ptr->GLOBICLASS[0] = (uint32_t)(config->class0.globiclass);
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	689a      	ldr	r2, [r3, #8]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* ICLASS-1 configuration */
  global_ptr->GLOBICLASS[1] = (uint32_t)(config->class1.globiclass);
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	68da      	ldr	r2, [r3, #12]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4


  /*Result generation related configuration */
  global_ptr->GLOBRCR = (uint32_t)(config->globrcr);
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	691a      	ldr	r2, [r3, #16]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280

#if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)

  /* Boundaries */
  global_ptr->GLOBBOUND = (uint32_t)(config->globbound);
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* From the Errata sheet of XMC1100 V1.7*/
  XMC_VADC_CONV_ENABLE_FOR_XMC11 = 1U;
#endif

}
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop

080015dc <XMC_VADC_GLOBAL_InputClassInit>:

/* API to Set the Global IClass registers*/
void XMC_VADC_GLOBAL_InputClassInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLASS_t config,
                                          const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	603b      	str	r3, [r7, #0]
 80015e8:	4613      	mov	r3, r2
 80015ea:	71fb      	strb	r3, [r7, #7]
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Conversion Type", ((conv_type) <= XMC_VADC_GROUP_CONV_EMUX))
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong ICLASS set number", (set_num < XMC_VADC_MAX_ICLASS_SET))

#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  if (conv_type == XMC_VADC_GROUP_CONV_STD )
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d109      	bne.n	8001606 <XMC_VADC_GLOBAL_InputClassInit+0x2a>
  {
#endif
    global_ptr->GLOBICLASS[set_num] = config.globiclass &
 80015f2:	68ba      	ldr	r2, [r7, #8]
 80015f4:	f240 731f 	movw	r3, #1823	; 0x71f
 80015f8:	4013      	ands	r3, r2
 80015fa:	68fa      	ldr	r2, [r7, #12]
 80015fc:	6839      	ldr	r1, [r7, #0]
 80015fe:	3128      	adds	r1, #40	; 0x28
 8001600:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8001604:	e007      	b.n	8001616 <XMC_VADC_GLOBAL_InputClassInit+0x3a>
                                      (uint32_t)(VADC_GLOBICLASS_CMS_Msk | VADC_GLOBICLASS_STCS_Msk);
#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  }
  else
  {
    global_ptr->GLOBICLASS[set_num] = config.globiclass & (uint32_t)(VADC_GLOBICLASS_CME_Msk | VADC_GLOBICLASS_STCE_Msk);
 8001606:	68ba      	ldr	r2, [r7, #8]
 8001608:	4b05      	ldr	r3, [pc, #20]	; (8001620 <XMC_VADC_GLOBAL_InputClassInit+0x44>)
 800160a:	4013      	ands	r3, r2
 800160c:	68fa      	ldr	r2, [r7, #12]
 800160e:	6839      	ldr	r1, [r7, #0]
 8001610:	3128      	adds	r1, #40	; 0x28
 8001612:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  }
#endif
}
 8001616:	3714      	adds	r7, #20
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	071f0000 	.word	0x071f0000

08001624 <XMC_VADC_GLOBAL_StartupCalibration>:

/* API to enable startup calibration feature */
void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  VADC_G_TypeDef *group_ptr;
#endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_StartupCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001632:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 800163c:	2300      	movs	r3, #0
 800163e:	73fb      	strb	r3, [r7, #15]
 8001640:	e016      	b.n	8001670 <XMC_VADC_GLOBAL_StartupCalibration+0x4c>
  {
    group_ptr = g_xmc_vadc_group_array[i];
 8001642:	7bfb      	ldrb	r3, [r7, #15]
 8001644:	4a0e      	ldr	r2, [pc, #56]	; (8001680 <XMC_VADC_GLOBAL_StartupCalibration+0x5c>)
 8001646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800164a:	60bb      	str	r3, [r7, #8]
    if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001652:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d007      	beq.n	800166a <XMC_VADC_GLOBAL_StartupCalibration+0x46>
    {
      /* This group is active. Loop until it finishes calibration */
      while((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 800165a:	bf00      	nop
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1f8      	bne.n	800165c <XMC_VADC_GLOBAL_StartupCalibration+0x38>

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 800166a:	7bfb      	ldrb	r3, [r7, #15]
 800166c:	3301      	adds	r3, #1
 800166e:	73fb      	strb	r3, [r7, #15]
 8001670:	7bfb      	ldrb	r3, [r7, #15]
 8001672:	2b03      	cmp	r3, #3
 8001674:	d9e5      	bls.n	8001642 <XMC_VADC_GLOBAL_StartupCalibration+0x1e>
         XMC_VADC_SHS_START_UP_CAL_ACTIVE )
  {
    /* NOP */
  }
#endif
}
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	0800975c 	.word	0x0800975c

08001684 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode>:
  global_ptr->GLOBEVNP |= (uint32_t)(node << VADC_GLOBEVNP_REV0NP_Pos);
}

/* API to bind request source event with a service request line */
void XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_SR_t sr)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	460b      	mov	r3, r1
 800168e:	70fb      	strb	r3, [r7, #3]
  uint32_t node;
  
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:Wrong Module Pointer", (global_ptr == VADC))

  if (sr >= XMC_VADC_SR_SHARED_SR0)
 8001690:	78fb      	ldrb	r3, [r7, #3]
 8001692:	2b03      	cmp	r3, #3
 8001694:	d903      	bls.n	800169e <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode+0x1a>
  {
    node = (uint32_t)sr - (uint32_t)XMC_VADC_SR_SHARED_SR0;
 8001696:	78fb      	ldrb	r3, [r7, #3]
 8001698:	3b04      	subs	r3, #4
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	e001      	b.n	80016a2 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode+0x1e>
  }
  else
  {
    node = (uint32_t)sr;
 800169e:	78fb      	ldrb	r3, [r7, #3]
 80016a0:	60fb      	str	r3, [r7, #12]
  }

  global_ptr->GLOBEVNP &= ~((uint32_t)VADC_GLOBEVNP_SEV0NP_Msk);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80016a8:	f023 020f 	bic.w	r2, r3, #15
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  global_ptr->GLOBEVNP |= (uint32_t) (node << VADC_GLOBEVNP_SEV0NP_Pos);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	431a      	orrs	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 80016c2:	3714      	adds	r7, #20
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <XMC_VADC_GROUP_Init>:

/* API to initialize an instance of group of VADC hardware */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)  
void XMC_VADC_GROUP_Init( XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_Init:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  /* Program the input classes */
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_STD, 0U);
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	6859      	ldr	r1, [r3, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	2300      	movs	r3, #0
 80016e0:	f000 f828 	bl	8001734 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_EMUX, 0U);
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	6859      	ldr	r1, [r3, #4]
 80016ea:	2201      	movs	r2, #1
 80016ec:	2300      	movs	r3, #0
 80016ee:	f000 f821 	bl	8001734 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_STD, 1U);
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	6899      	ldr	r1, [r3, #8]
 80016f8:	2200      	movs	r2, #0
 80016fa:	2301      	movs	r3, #1
 80016fc:	f000 f81a 	bl	8001734 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_EMUX, 1U);
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	6899      	ldr	r1, [r3, #8]
 8001706:	2201      	movs	r2, #1
 8001708:	2301      	movs	r3, #1
 800170a:	f000 f813 	bl	8001734 <XMC_VADC_GROUP_InputClassInit>

  group_ptr->ARBCFG = config->g_arbcfg;
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	691a      	ldr	r2, [r3, #16]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  group_ptr->BOUND = config->g_bound;
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	68da      	ldr	r2, [r3, #12]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* External mux configuration */
  XMC_VADC_GROUP_ExternalMuxControlInit(group_ptr,config->emux_config);
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	6819      	ldr	r1, [r3, #0]
 8001728:	f7ff fece 	bl	80014c8 <XMC_VADC_GROUP_ExternalMuxControlInit>

}
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop

08001734 <XMC_VADC_GROUP_InputClassInit>:

/* API to program conversion characteristics */
void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t config,
                                          const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
 8001734:	b480      	push	{r7}
 8001736:	b08d      	sub	sp, #52	; 0x34
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	603b      	str	r3, [r7, #0]
 8001740:	4613      	mov	r3, r2
 8001742:	71fb      	strb	r3, [r7, #7]

  /* 
   * Obtain the mask and position macros of the parameters based on what is being requested - Standard channels vs
   * external mux channels.
   */
  if (XMC_VADC_GROUP_CONV_STD == conv_type)
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d113      	bne.n	8001772 <XMC_VADC_GROUP_InputClassInit+0x3e>
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
 800174a:	2308      	movs	r3, #8
 800174c:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
 800174e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001752:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
 8001754:	2300      	movs	r3, #0
 8001756:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
 8001758:	231f      	movs	r3, #31
 800175a:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sample_time_std_conv;
 800175c:	7a3b      	ldrb	r3, [r7, #8]
 800175e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001762:	b2db      	uxtb	r3, r3
 8001764:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
 8001766:	7a7b      	ldrb	r3, [r7, #9]
 8001768:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800176c:	b2db      	uxtb	r3, r3
 800176e:	76fb      	strb	r3, [r7, #27]
 8001770:	e013      	b.n	800179a <XMC_VADC_GROUP_InputClassInit+0x66>
  }
  else
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CME_Pos;
 8001772:	2318      	movs	r3, #24
 8001774:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CME_Msk;
 8001776:	f04f 63e0 	mov.w	r3, #117440512	; 0x7000000
 800177a:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCE_Pos;
 800177c:	2310      	movs	r3, #16
 800177e:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCE_Msk;
 8001780:	f44f 13f8 	mov.w	r3, #2031616	; 0x1f0000
 8001784:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sampling_phase_emux_channel;
 8001786:	7abb      	ldrb	r3, [r7, #10]
 8001788:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800178c:	b2db      	uxtb	r3, r3
 800178e:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
 8001790:	7afb      	ldrb	r3, [r7, #11]
 8001792:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8001796:	b2db      	uxtb	r3, r3
 8001798:	76fb      	strb	r3, [r7, #27]
  }

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	3228      	adds	r2, #40	; 0x28
 80017a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017a4:	617b      	str	r3, [r7, #20]

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
 80017a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a8:	43db      	mvns	r3, r3
 80017aa:	697a      	ldr	r2, [r7, #20]
 80017ac:	4013      	ands	r3, r2
 80017ae:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
 80017b0:	7efa      	ldrb	r2, [r7, #27]
 80017b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	697a      	ldr	r2, [r7, #20]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	617b      	str	r3, [r7, #20]
  conv_class &= ~(sample_time_mask);
 80017be:	6a3b      	ldr	r3, [r7, #32]
 80017c0:	43db      	mvns	r3, r3
 80017c2:	697a      	ldr	r2, [r7, #20]
 80017c4:	4013      	ands	r3, r2
 80017c6:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
 80017c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ca:	69fa      	ldr	r2, [r7, #28]
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	697a      	ldr	r2, [r7, #20]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	617b      	str	r3, [r7, #20]
  group_ptr->ICLASS[set_num] = conv_class;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	3228      	adds	r2, #40	; 0x28
 80017dc:	6979      	ldr	r1, [r7, #20]
 80017de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80017e2:	3734      	adds	r7, #52	; 0x34
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <XMC_VADC_GROUP_SetPowerMode>:

/* API which sets the power mode of analog converter of a VADC group */
void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_t power_mode)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	460b      	mov	r3, r1
 80017f6:	70fb      	strb	r3, [r7, #3]
  uint32_t arbcfg;

  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Power Mode", (power_mode <= XMC_VADC_GROUP_POWERMODE_NORMAL))

  arbcfg = group_ptr->ARBCFG;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017fe:	60fb      	str	r3, [r7, #12]

  arbcfg &= ~((uint32_t)VADC_G_ARBCFG_ANONC_Msk);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f023 0303 	bic.w	r3, r3, #3
 8001806:	60fb      	str	r3, [r7, #12]
  arbcfg |= (uint32_t)power_mode;
 8001808:	78fb      	ldrb	r3, [r7, #3]
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	4313      	orrs	r3, r2
 800180e:	60fb      	str	r3, [r7, #12]

  group_ptr->ARBCFG = arbcfg;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	68fa      	ldr	r2, [r7, #12]
 8001814:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8001818:	3714      	adds	r7, #20
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop

08001824 <XMC_VADC_GLOBAL_BackgroundInit>:
}
#endif

/* API to initialize background scan request source hardware */
void XMC_VADC_GLOBAL_BackgroundInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_BACKGROUND_CONFIG_t *config)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
  #endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))

  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 800182e:	2300      	movs	r3, #0
 8001830:	75fb      	strb	r3, [r7, #23]
 8001832:	e009      	b.n	8001848 <XMC_VADC_GLOBAL_BackgroundInit+0x24>
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 8001834:	7dfb      	ldrb	r3, [r7, #23]
 8001836:	4a39      	ldr	r2, [pc, #228]	; (800191c <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8001838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff fe8b 	bl	8001558 <XMC_VADC_GROUP_BackgroundDisableArbitrationSlot>
  #endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))

  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001842:	7dfb      	ldrb	r3, [r7, #23]
 8001844:	3301      	adds	r3, #1
 8001846:	75fb      	strb	r3, [r7, #23]
 8001848:	7dfb      	ldrb	r3, [r7, #23]
 800184a:	2b03      	cmp	r3, #3
 800184c:	d9f2      	bls.n	8001834 <XMC_VADC_GLOBAL_BackgroundInit+0x10>
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }
  
  conv_start_mask = (uint32_t) 0;
 800184e:	2300      	movs	r3, #0
 8001850:	613b      	str	r3, [r7, #16]
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	f003 0303 	and.w	r3, r3, #3
 800185a:	b2db      	uxtb	r3, r3
 800185c:	2b00      	cmp	r3, #0
 800185e:	d002      	beq.n	8001866 <XMC_VADC_GLOBAL_BackgroundInit+0x42>
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
 8001860:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001864:	613b      	str	r3, [r7, #16]
  }
  
  for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001866:	2300      	movs	r3, #0
 8001868:	75fb      	strb	r3, [r7, #23]
 800186a:	e021      	b.n	80018b0 <XMC_VADC_GLOBAL_BackgroundInit+0x8c>
  {
    reg = g_xmc_vadc_group_array[i]->ARBPR;
 800186c:	7dfb      	ldrb	r3, [r7, #23]
 800186e:	4a2b      	ldr	r2, [pc, #172]	; (800191c <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8001870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001874:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001878:	60fb      	str	r3, [r7, #12]

    reg &= ~(uint32_t)(VADC_G_ARBPR_PRIO2_Msk);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001880:	60fb      	str	r3, [r7, #12]

    /* Program the priority of the request source */
    reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO2_Pos);
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800188a:	b2db      	uxtb	r3, r3
 800188c:	021b      	lsls	r3, r3, #8
 800188e:	68fa      	ldr	r2, [r7, #12]
 8001890:	4313      	orrs	r3, r2
 8001892:	60fb      	str	r3, [r7, #12]
  
    /* Program the start mode */
    reg |= conv_start_mask;
 8001894:	68fa      	ldr	r2, [r7, #12]
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	4313      	orrs	r3, r2
 800189a:	60fb      	str	r3, [r7, #12]

    g_xmc_vadc_group_array[i]->ARBPR = reg;
 800189c:	7dfb      	ldrb	r3, [r7, #23]
 800189e:	4a1f      	ldr	r2, [pc, #124]	; (800191c <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 80018a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a4:	68fa      	ldr	r2, [r7, #12]
 80018a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
  }
  
  for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 80018aa:	7dfb      	ldrb	r3, [r7, #23]
 80018ac:	3301      	adds	r3, #1
 80018ae:	75fb      	strb	r3, [r7, #23]
 80018b0:	7dfb      	ldrb	r3, [r7, #23]
 80018b2:	2b03      	cmp	r3, #3
 80018b4:	d9da      	bls.n	800186c <XMC_VADC_GLOBAL_BackgroundInit+0x48>
  
  }
  #endif

  /* program BRSCTRL register */
  global_ptr->BRSCTRL = (uint32_t)(config->asctrl | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VADC_BRSCTRL_GTWC_Msk);
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80018be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  /* program BRSMR register */
  global_ptr->BRSMR = (uint32_t)((config->asmr)| (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VADC_BRSMR_ENGT_Pos));
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f043 0201 	orr.w	r2, r3, #1
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  
#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	f003 0303 	and.w	r3, r3, #3
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d107      	bne.n	80018f4 <XMC_VADC_GLOBAL_BackgroundInit+0xd0>
  {
    global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80018ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  }
#endif
  
  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 80018f4:	2300      	movs	r3, #0
 80018f6:	75fb      	strb	r3, [r7, #23]
 80018f8:	e009      	b.n	800190e <XMC_VADC_GLOBAL_BackgroundInit+0xea>
  {
    XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 80018fa:	7dfb      	ldrb	r3, [r7, #23]
 80018fc:	4a07      	ldr	r2, [pc, #28]	; (800191c <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 80018fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff fe16 	bl	8001534 <XMC_VADC_GROUP_BackgroundEnableArbitrationSlot>
    global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
  }
#endif
  
  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001908:	7dfb      	ldrb	r3, [r7, #23]
 800190a:	3301      	adds	r3, #1
 800190c:	75fb      	strb	r3, [r7, #23]
 800190e:	7dfb      	ldrb	r3, [r7, #23]
 8001910:	2b03      	cmp	r3, #3
 8001912:	d9f2      	bls.n	80018fa <XMC_VADC_GLOBAL_BackgroundInit+0xd6>
  {
    XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }
  #endif
  
}
 8001914:	3718      	adds	r7, #24
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	0800975c 	.word	0x0800975c

08001920 <XMC_VADC_GROUP_ChannelInit>:

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
/* API to initialize a channel unit */
void XMC_VADC_GROUP_ChannelInit(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num,
                                        const XMC_VADC_CHANNEL_CONFIG_t *config)
{
 8001920:	b480      	push	{r7}
 8001922:	b089      	sub	sp, #36	; 0x24
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]


  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
  
  prio  = (uint32_t)config->channel_priority;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	7a1b      	ldrb	r3, [r3, #8]
 8001930:	61bb      	str	r3, [r7, #24]

  /* Priority channel */
  ch_assign  = group_ptr->CHASS;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001938:	617b      	str	r3, [r7, #20]
  ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	2201      	movs	r2, #1
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43db      	mvns	r3, r3
 8001944:	697a      	ldr	r2, [r7, #20]
 8001946:	4013      	ands	r3, r2
 8001948:	617b      	str	r3, [r7, #20]
  ch_assign |= (uint32_t)(prio << ch_num);
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	697a      	ldr	r2, [r7, #20]
 8001954:	4313      	orrs	r3, r2
 8001956:	617b      	str	r3, [r7, #20]
  group_ptr->CHASS = ch_assign;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	697a      	ldr	r2, [r7, #20]
 800195c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Alias channel */
  if (config->alias_channel >= (int32_t)0)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	7a5b      	ldrb	r3, [r3, #9]
 8001964:	b25b      	sxtb	r3, r3
 8001966:	2b00      	cmp	r3, #0
 8001968:	db29      	blt.n	80019be <XMC_VADC_GROUP_ChannelInit+0x9e>
  {
    mask = (uint32_t)0;
 800196a:	2300      	movs	r3, #0
 800196c:	61fb      	str	r3, [r7, #28]
    if ((uint32_t)1 == ch_num)
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d10a      	bne.n	800198a <XMC_VADC_GROUP_ChannelInit+0x6a>
    {
      mask = VADC_G_ALIAS_ALIAS1_Pos;
 8001974:	2308      	movs	r3, #8
 8001976:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800197e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001988:	e00c      	b.n	80019a4 <XMC_VADC_GROUP_ChannelInit+0x84>
    }
    else if ((uint32_t)0 == ch_num)
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d109      	bne.n	80019a4 <XMC_VADC_GROUP_ChannelInit+0x84>
    {
      mask = VADC_G_ALIAS_ALIAS0_Pos;
 8001990:	2300      	movs	r3, #0
 8001992:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS0_Msk);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800199a:	f023 021f 	bic.w	r2, r3, #31
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }

    group_ptr->ALIAS |= (uint32_t)(config->alias_channel << mask);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	7a52      	ldrb	r2, [r2, #9]
 80019ae:	b251      	sxtb	r1, r2
 80019b0:	69fa      	ldr	r2, [r7, #28]
 80019b2:	fa01 f202 	lsl.w	r2, r1, r2
 80019b6:	431a      	orrs	r2, r3
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  }

  group_ptr->BFL |= config->bfl;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	431a      	orrs	r2, r3
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

#if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
  group_ptr->BFLC |= config->bflc;
#endif
  /* Program the CHCTR register */
  group_ptr->CHCTR[ch_num] = config->chctr;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6819      	ldr	r1, [r3, #0]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	68ba      	ldr	r2, [r7, #8]
 80019d8:	3280      	adds	r2, #128	; 0x80
 80019da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 80019de:	3724      	adds	r7, #36	; 0x24
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 80019f0:	4b14      	ldr	r3, [pc, #80]	; (8001a44 <_sbrk+0x5c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d102      	bne.n	80019fe <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 80019f8:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <_sbrk+0x5c>)
 80019fa:	4a13      	ldr	r2, [pc, #76]	; (8001a48 <_sbrk+0x60>)
 80019fc:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 80019fe:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <_sbrk+0x5c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3303      	adds	r3, #3
 8001a08:	f023 0303 	bic.w	r3, r3, #3
 8001a0c:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 8001a0e:	4b0d      	ldr	r3, [pc, #52]	; (8001a44 <_sbrk+0x5c>)
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4413      	add	r3, r2
 8001a16:	4a0d      	ldr	r2, [pc, #52]	; (8001a4c <_sbrk+0x64>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d207      	bcs.n	8001a2c <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 8001a1c:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <_sbrk+0x5c>)
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4413      	add	r3, r2
 8001a24:	4a07      	ldr	r2, [pc, #28]	; (8001a44 <_sbrk+0x5c>)
 8001a26:	6013      	str	r3, [r2, #0]
    return (base);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	e006      	b.n	8001a3a <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 8001a2c:	f004 f8a2 	bl	8005b74 <__errno>
 8001a30:	4602      	mov	r2, r0
 8001a32:	230c      	movs	r3, #12
 8001a34:	6013      	str	r3, [r2, #0]
    return ((caddr_t)-1);
 8001a36:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20000bb0 	.word	0x20000bb0
 8001a48:	20000c58 	.word	0x20000c58
 8001a4c:	2000ffc0 	.word	0x2000ffc0

08001a50 <_init>:

/* Init */
void _init(void)
{}
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	460b      	mov	r3, r1
 8001a66:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1) << slice_number;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68da      	ldr	r2, [r3, #12]
 8001a6c:	78fb      	ldrb	r3, [r7, #3]
 8001a6e:	2101      	movs	r1, #1
 8001a70:	fa01 f303 	lsl.w	r3, r1, r3
 8001a74:	431a      	orrs	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	60da      	str	r2, [r3, #12]
}
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <XMC_CCU4_SLICE_IsTimerRunning>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer()<BR> XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE bool XMC_CCU4_SLICE_IsTimerRunning(const XMC_CCU4_SLICE_t *const slice)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_GetTimerStatus:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  return (bool)(((slice->TCST) & CCU4_CC4_TCST_TRB_Msk) == CCU4_CC4_TCST_TRB_Msk);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f003 0301 	and.w	r3, r3, #1
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	bf14      	ite	ne
 8001a98:	2301      	movne	r3, #1
 8001a9a:	2300      	moveq	r3, #0
 8001a9c:	b2db      	uxtb	r3, r3
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop

08001aac <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	60da      	str	r2, [r3, #12]
}
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <XMC_CCU4_SLICE_StopTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StopTimer(XMC_CCU4_SLICE_t *const slice)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TRBC_Msk;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	611a      	str	r2, [r3, #16]
}
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <XMC_CCU4_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	611a      	str	r2, [r3, #16]
}
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	460b      	mov	r3, r1
 8001afe:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 8001b00:	887a      	ldrh	r2, [r7, #2]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	460b      	mov	r3, r1
 8001b1a:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 8001b1c:	887a      	ldrh	r2, [r7, #2]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	683a      	ldr	r2, [r7, #0]
 8001b3a:	611a      	str	r2, [r3, #16]
}
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop

08001b48 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	460b      	mov	r3, r1
 8001b52:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8001b5a:	78fb      	ldrb	r3, [r7, #3]
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b62:	431a      	orrs	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <XMC_CCU4_SLICE_ClearEvent>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_EnableEvent()<BR> XMC_CCU4_SLICE_SetEvent()<BR> XMC_CCU4_SLICE_GetEvent().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearEvent(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_ClearEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->SWR |= ((uint32_t) 1) << ((uint32_t) event);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001b86:	78fb      	ldrb	r3, [r7, #3]
 8001b88:	2101      	movs	r1, #1
 8001b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8e:	431a      	orrs	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <TIMER_Init>:
/*
 * This function initializes a TIMER APP based on user configuration.
 *
 */
TIMER_STATUS_t TIMER_Init(TIMER_t* const handle_ptr)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	73fb      	strb	r3, [r7, #15]
  /* Check for APP instance is initialized or not */
  if (false == handle_ptr->initialized)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001bb2:	f083 0301 	eor.w	r3, r3, #1
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d009      	beq.n	8001bd0 <TIMER_Init+0x30>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d104      	bne.n	8001bd0 <TIMER_Init+0x30>
    {
      /* Configure CCU4 timer for the required time tick settings */
      status = TIMER_CCU4_lInit(handle_ptr);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f000 f926 	bl	8001e18 <TIMER_CCU4_lInit>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	73fb      	strb	r3, [r7, #15]
      status = TIMER_CCU8_lInit(handle_ptr);
    }
#endif
  }

  return (status);
 8001bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop

08001bdc <TIMER_Start>:

/*
 * This function starts the timer to generate the events for the specified time_interval value
 */
TIMER_STATUS_t TIMER_Start(TIMER_t  *const handle_ptr)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Start:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check for APP instance is initialized or not */
  if (true == handle_ptr->initialized)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d00c      	beq.n	8001c08 <TIMER_Start+0x2c>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d104      	bne.n	8001c02 <TIMER_Start+0x26>
    {
      /* Start the timer manually */
      XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	695b      	ldr	r3, [r3, #20]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff ff55 	bl	8001aac <XMC_CCU4_SLICE_StartTimer>
       {
      /* Start the timer manually */
      XMC_CCU8_SLICE_StartTimer(handle_ptr->ccu8_slice_ptr);
       }
#endif
    status = TIMER_STATUS_SUCCESS;
 8001c02:	2300      	movs	r3, #0
 8001c04:	73fb      	strb	r3, [r7, #15]
 8001c06:	e001      	b.n	8001c0c <TIMER_Start+0x30>
  }
  else
  {
    status = TIMER_STATUS_FAILURE;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 8001c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop

08001c18 <TIMER_Stop>:

/*
 * This function stops and clears the timer
 */
TIMER_STATUS_t TIMER_Stop(TIMER_t  *const handle_ptr)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Stop:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check whether timer is initialized and in running state */
  if ((TIMER_GetTimerStatus(handle_ptr)) && (true == handle_ptr->initialized))
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f000 f81d 	bl	8001c60 <TIMER_GetTimerStatus>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d011      	beq.n	8001c50 <TIMER_Stop+0x38>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d00c      	beq.n	8001c50 <TIMER_Stop+0x38>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d104      	bne.n	8001c4a <TIMER_Stop+0x32>
    {
      /* Stops the timer */
      XMC_CCU4_SLICE_StopTimer(handle_ptr->ccu4_slice_ptr);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	695b      	ldr	r3, [r3, #20]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff ff3d 	bl	8001ac4 <XMC_CCU4_SLICE_StopTimer>
       {
      /* Stops the timer */
      XMC_CCU8_SLICE_StopTimer(handle_ptr->ccu8_slice_ptr);
       }
#endif
    status = TIMER_STATUS_SUCCESS;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	73fb      	strb	r3, [r7, #15]
 8001c4e:	e001      	b.n	8001c54 <TIMER_Stop+0x3c>
  }
  else
  {
    status = TIMER_STATUS_FAILURE;
 8001c50:	2301      	movs	r3, #1
 8001c52:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 8001c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop

08001c60 <TIMER_GetTimerStatus>:

/*
 * This function returns the status of the timer
 */
bool TIMER_GetTimerStatus(TIMER_t  *const handle_ptr)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  bool status;

  XMC_ASSERT("TIMER_GetTimerStatus:handle_ptr NULL" , (handle_ptr != NULL));

  status = false;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	73fb      	strb	r3, [r7, #15]

#ifdef TIMER_CCU4_USED
  if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d106      	bne.n	8001c84 <TIMER_GetTimerStatus+0x24>
  {
    /* Returns the current status of the timer */
    status = XMC_CCU4_SLICE_IsTimerRunning(handle_ptr->ccu4_slice_ptr);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff ff02 	bl	8001a84 <XMC_CCU4_SLICE_IsTimerRunning>
 8001c80:	4603      	mov	r3, r0
 8001c82:	73fb      	strb	r3, [r7, #15]
    /* Returns the current status of the timer */
    status = XMC_CCU8_SLICE_IsTimerRunning(handle_ptr->ccu8_slice_ptr);
  }
#endif

  return (status);
 8001c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop

08001c90 <TIMER_SetTimeInterval>:
/*
 * This function changes the PWM period which in turn changes the time tick interval value by checking that
 * the given time tick value is within supported range.
 */
TIMER_STATUS_t TIMER_SetTimeInterval(TIMER_t  *const handle_ptr, uint32_t time_interval)
{
 8001c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c92:	b087      	sub	sp, #28
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  uint32_t lfrequency;
  uint32_t lprescaler;

  XMC_ASSERT("TIMER_SetTimeInterval:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_FAILURE;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	75fb      	strb	r3, [r7, #23]

  if (false == TIMER_GetTimerStatus(handle_ptr))
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f7ff ffde 	bl	8001c60 <TIMER_GetTimerStatus>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	f083 0301 	eor.w	r3, r3, #1
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d079      	beq.n	8001da4 <TIMER_SetTimeInterval+0x114>
  {
    /* check for time_interval range */
    if ((time_interval >= handle_ptr->timer_min_value_us) && (time_interval <= handle_ptr->timer_max_value_us))
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689a      	ldr	r2, [r3, #8]
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d874      	bhi.n	8001da4 <TIMER_SetTimeInterval+0x114>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685a      	ldr	r2, [r3, #4]
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d36f      	bcc.n	8001da4 <TIMER_SetTimeInterval+0x114>
    {
      /* Initialize the prescaler */
      lprescaler = 0U;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	613b      	str	r3, [r7, #16]
      while (time_interval > (handle_ptr->timer_max_value_us >> (TIMER_PRESCALER_MAX - lprescaler)))
 8001cc8:	e002      	b.n	8001cd0 <TIMER_SetTimeInterval+0x40>
      {
        lprescaler++;
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	613b      	str	r3, [r7, #16]
    /* check for time_interval range */
    if ((time_interval >= handle_ptr->timer_min_value_us) && (time_interval <= handle_ptr->timer_max_value_us))
    {
      /* Initialize the prescaler */
      lprescaler = 0U;
      while (time_interval > (handle_ptr->timer_max_value_us >> (TIMER_PRESCALER_MAX - lprescaler)))
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	f1c2 020f 	rsb	r2, r2, #15
 8001cda:	fa23 f202 	lsr.w	r2, r3, r2
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d3f2      	bcc.n	8001cca <TIMER_SetTimeInterval+0x3a>
      {
        lprescaler++;
      }
#ifdef TIMER_CCU4_USED
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d15a      	bne.n	8001da4 <TIMER_SetTimeInterval+0x114>
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	60fb      	str	r3, [r7, #12]
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	69da      	ldr	r2, [r3, #28]
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	f003 030f 	and.w	r3, r3, #15
 8001d02:	b2d9      	uxtb	r1, r3
 8001d04:	7913      	ldrb	r3, [r2, #4]
 8001d06:	f361 0303 	bfi	r3, r1, #0, #4
 8001d0a:	7113      	strb	r3, [r2, #4]
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f04f 0100 	mov.w	r1, #0
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	461a      	mov	r2, r3
 8001d18:	f04f 0300 	mov.w	r3, #0
 8001d1c:	fb02 fe01 	mul.w	lr, r2, r1
 8001d20:	fb00 f603 	mul.w	r6, r0, r3
 8001d24:	4476      	add	r6, lr
 8001d26:	fba0 2302 	umull	r2, r3, r0, r2
 8001d2a:	18f1      	adds	r1, r6, r3
 8001d2c:	460b      	mov	r3, r1
                                               handle_ptr->ccu4_slice_config_ptr->prescaler_initval) / \
 8001d2e:	6879      	ldr	r1, [r7, #4]
 8001d30:	69c9      	ldr	r1, [r1, #28]
 8001d32:	7909      	ldrb	r1, [r1, #4]
 8001d34:	f3c1 0103 	ubfx	r1, r1, #0, #4
 8001d38:	b2c9      	uxtb	r1, r1
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 8001d3a:	f1c1 0620 	rsb	r6, r1, #32
 8001d3e:	f1a1 0020 	sub.w	r0, r1, #32
 8001d42:	fa22 f401 	lsr.w	r4, r2, r1
 8001d46:	fa03 f606 	lsl.w	r6, r3, r6
 8001d4a:	4334      	orrs	r4, r6
 8001d4c:	fa23 f000 	lsr.w	r0, r3, r0
 8001d50:	4304      	orrs	r4, r0
 8001d52:	fa23 f501 	lsr.w	r5, r3, r1
                                               handle_ptr->ccu4_slice_config_ptr->prescaler_initval) / \
 8001d56:	4620      	mov	r0, r4
 8001d58:	4629      	mov	r1, r5
 8001d5a:	a315      	add	r3, pc, #84	; (adr r3, 8001db0 <TIMER_SetTimeInterval+0x120>)
 8001d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d60:	f003 fc3c 	bl	80055dc <__aeabi_uldivmod>
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 8001d68:	b292      	uxth	r2, r2
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	845a      	strh	r2, [r3, #34]	; 0x22
                                               handle_ptr->ccu4_slice_config_ptr->prescaler_initval) / \
                                              TIMER_RESOLUTION_SEC_TO_MICRO);
        /* Actual timer period values is Period_reg_val+1U */
        if (handle_ptr->period_value > TIMER_PERIOD_MIN)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d905      	bls.n	8001d82 <TIMER_SetTimeInterval+0xf2>
        {
          (handle_ptr->period_value)--;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	845a      	strh	r2, [r3, #34]	; 0x22
        }
        /* Update the prescaler */
        XMC_CCU4_SLICE_SetPrescaler(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr->prescaler_initval);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	695a      	ldr	r2, [r3, #20]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	791b      	ldrb	r3, [r3, #4]
 8001d8c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	4610      	mov	r0, r2
 8001d94:	4619      	mov	r1, r3
 8001d96:	f7ff f865 	bl	8000e64 <XMC_CCU4_SLICE_SetPrescaler>
        /* update period, compare and prescaler values */
        TIMER_CCU4_lShadowTransfer(handle_ptr);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 f888 	bl	8001eb0 <TIMER_CCU4_lShadowTransfer>
        /* Update the status */
        status = TIMER_STATUS_SUCCESS;
 8001da0:	2300      	movs	r3, #0
 8001da2:	75fb      	strb	r3, [r7, #23]
        status = TIMER_STATUS_SUCCESS;
      }
#endif
    }
  }
  return (status);
 8001da4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	371c      	adds	r7, #28
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dae:	bf00      	nop
 8001db0:	05f5e100 	.word	0x05f5e100
 8001db4:	00000000 	.word	0x00000000

08001db8 <TIMER_ClearEvent>:

/*
 * This function clears the period match interrupt status of the given timer.
 */
void TIMER_ClearEvent(TIMER_t *const handle_ptr)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("TIME_CCU_AcknowledgeInterrupt:handle_ptr NULL" , (handle_ptr != NULL));

#ifdef TIMER_CCU4_USED
  if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d105      	bne.n	8001dd6 <TIMER_ClearEvent+0x1e>
  {
    /* clears the timer event(period match interrupt) */
    XMC_CCU4_SLICE_ClearEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	695b      	ldr	r3, [r3, #20]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	f7ff fecf 	bl	8001b74 <XMC_CCU4_SLICE_ClearEvent>
  {
    /* clears the timer event(period match interrupt) */
    XMC_CCU8_SLICE_ClearEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH);
  }
#endif
}
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <TIMER_Clear>:

/*
 * Clear the timer
 */
TIMER_STATUS_t TIMER_Clear(TIMER_t *const handle_ptr)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Clear:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check for APP instance is initialized or not */
  if (true == handle_ptr->initialized)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d00c      	beq.n	8001e08 <TIMER_Clear+0x2c>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d104      	bne.n	8001e02 <TIMER_Clear+0x26>
    {
      /* Clear the timer register */
      XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	695b      	ldr	r3, [r3, #20]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff fe6d 	bl	8001adc <XMC_CCU4_SLICE_ClearTimer>
    {
      /* Clear the timer register */
      XMC_CCU8_SLICE_ClearTimer(handle_ptr->ccu8_slice_ptr);
    }
#endif
    status = TIMER_STATUS_SUCCESS;
 8001e02:	2300      	movs	r3, #0
 8001e04:	73fb      	strb	r3, [r7, #15]
 8001e06:	e001      	b.n	8001e0c <TIMER_Clear+0x30>
  }
  else
  {
    status = TIMER_STATUS_FAILURE;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 8001e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop

08001e18 <TIMER_CCU4_lInit>:
#ifdef TIMER_CCU4_USED
/*
 * This function configures timer ccu4 timer with required time tick value
 */
TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f000 ff2d 	bl	8002c84 <GLOBAL_CCU4_Init>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	73fb      	strb	r3, [r7, #15]

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	7e1b      	ldrb	r3, [r3, #24]
 8001e38:	4610      	mov	r0, r2
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	f7ff fe0e 	bl	8001a5c <XMC_CCU4_EnableClock>
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	695a      	ldr	r2, [r3, #20]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	69db      	ldr	r3, [r3, #28]
 8001e48:	4610      	mov	r0, r2
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	f7fe ffd4 	bl	8000df8 <XMC_CCU4_SLICE_CompareInit>
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU4_lShadowTransfer(handle_ptr);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 f82d 	bl	8001eb0 <TIMER_CCU4_lShadowTransfer>

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d00f      	beq.n	8001e80 <TIMER_CCU4_lInit+0x68>
  {
    /* Binds a period match event to an NVIC node  */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	695a      	ldr	r2, [r3, #20]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e6a:	4610      	mov	r0, r2
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	461a      	mov	r2, r3
 8001e70:	f7ff f816 	bl	8000ea0 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_period_match_node);
    /* Enables a timer(period match) event  */
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	695b      	ldr	r3, [r3, #20]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	f7ff fe64 	bl	8001b48 <XMC_CCU4_SLICE_EnableEvent>
  }
#endif
  /* Clears the timer register */
  XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	695b      	ldr	r3, [r3, #20]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff fe29 	bl	8001adc <XMC_CCU4_SLICE_ClearTimer>

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d004      	beq.n	8001ea6 <TIMER_CCU4_lInit+0x8e>
  {
    /* Start the timer */
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	695b      	ldr	r3, [r3, #20]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff fe03 	bl	8001aac <XMC_CCU4_SLICE_StartTimer>
  }

  return (status);
 8001ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3710      	adds	r7, #16
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <TIMER_CCU4_lShadowTransfer>:

/*
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	695a      	ldr	r2, [r3, #20]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001ec0:	4610      	mov	r0, r2
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	f7ff fe16 	bl	8001af4 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	695b      	ldr	r3, [r3, #20]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	2100      	movs	r1, #0
 8001ed0:	f7ff fe1e 	bl	8001b10 <XMC_CCU4_SLICE_SetTimerCompareMatch>
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	689a      	ldr	r2, [r3, #8]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	4610      	mov	r0, r2
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	f7ff fe23 	bl	8001b2c <XMC_CCU4_EnableShadowTransfer>
}
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <XMC_CCU8_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_DisableClock()<BR>  XMC_CCU8_EnableMultipleClocks()<BR>  XMC_CCU8_StartPrescaler()<BR>  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_EnableClock(XMC_CCU8_MODULE_t *const module, const uint8_t slice_number)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1 << slice_number);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68da      	ldr	r2, [r3, #12]
 8001efc:	78fb      	ldrb	r3, [r7, #3]
 8001efe:	2101      	movs	r1, #1
 8001f00:	fa01 f303 	lsl.w	r3, r1, r3
 8001f04:	431a      	orrs	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	60da      	str	r2, [r3, #12]
}
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <XMC_CCU8_SLICE_EnableTrap>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_TrapConfig()<BR>  XMC_CCU8_SLICE_DisableTrap()<BR>  XMC_CCU8_SLICE_ConfigureEvent()<BR> 
 *  XMC_CCU8_SLICE_SetInput().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_EnableTrap(XMC_CCU8_SLICE_t *const slice, const uint32_t out_mask)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_EnableTrap:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TC |= (uint32_t)out_mask << CCU8_CC8_TC_TRAPE0_Pos;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	695a      	ldr	r2, [r3, #20]
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	045b      	lsls	r3, r3, #17
 8001f26:	431a      	orrs	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	615a      	str	r2, [r3, #20]
}
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop

08001f38 <XMC_CCU8_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU8_EnableShadowTransfer(XMC_CCU8_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_EnableShadowTransfer:Invalid module Pointer", XMC_CCU8_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	611a      	str	r2, [r3, #16]
}
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop

08001f54 <XMC_CCU8_SLICE_EnableEvent>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_SetInterruptNode()<BR>  XMC_CCU8_SLICE_EnableMultipleEvents()<BR>  XMC_CCU8_SLICE_DisableEvent()<BR> 
 *  XMC_CCU8_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_EnableEvent(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_IRQ_ID_t event)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid SR event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));

  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8001f66:	78fb      	ldrb	r3, [r7, #3]
 8001f68:	2101      	movs	r1, #1
 8001f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <XMC_CCU8_SLICE_ClearEvent>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_EnableEvent()<BR>  XMC_CCU8_SLICE_SetEvent()<BR>  XMC_CCU8_SLICE_GetEvent().
 *
 */
__STATIC_INLINE void XMC_CCU8_SLICE_ClearEvent(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_IRQ_ID_t event)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	460b      	mov	r3, r1
 8001f8a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_SLICE_ClearEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_ClearEvent:Invalid SR event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));
  slice->SWR |= ((uint32_t) 1) << ((uint32_t) event);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001f92:	78fb      	ldrb	r3, [r7, #3]
 8001f94:	2101      	movs	r1, #1
 8001f96:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9a:	431a      	orrs	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <XMC_SCU_SetCcuTriggerHigh>:
 * the timer using this API.<BR>
 * \par<b>Related APIs:</b><BR>
 * XMC_CCU4_SLICE_StartConfig(), XMC_CCU4_SLICE_SetInput(), XMC_SCU_SetCcuTriggerLow()\n\n\n
 */
__STATIC_INLINE void XMC_SCU_SetCcuTriggerHigh(const uint32_t trigger)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  SCU_GENERAL->CCUCON |= (uint32_t)trigger;
 8001fb4:	4905      	ldr	r1, [pc, #20]	; (8001fcc <XMC_SCU_SetCcuTriggerHigh+0x20>)
 8001fb6:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <XMC_SCU_SetCcuTriggerHigh+0x20>)
 8001fb8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	50004000 	.word	0x50004000

08001fd0 <XMC_SCU_SetCcuTriggerLow>:
 * the timer using this API.<BR>
 * \par<b>Related APIs:</b><BR>
 * XMC_CCU4_SLICE_StartConfig(), XMC_CCU4_SLICE_SetInput(), XMC_SCU_SetCcuTriggerHigh()\n\n\n
 */
__STATIC_INLINE void XMC_SCU_SetCcuTriggerLow(const uint32_t trigger)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  SCU_GENERAL->CCUCON &= (uint32_t)~trigger;
 8001fd8:	4905      	ldr	r1, [pc, #20]	; (8001ff0 <XMC_SCU_SetCcuTriggerLow+0x20>)
 8001fda:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <XMC_SCU_SetCcuTriggerLow+0x20>)
 8001fdc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	50004000 	.word	0x50004000

08001ff4 <XMC_POSIF_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_POSIF_Stop(),XMC_POSIF_IsRunning() \n\n\n
 */
__STATIC_INLINE void XMC_POSIF_Start(XMC_POSIF_t *const peripheral)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  peripheral->PRUNS = (uint32_t)POSIF_PRUNS_SRB_Msk;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	609a      	str	r2, [r3, #8]
}
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <XMC_POSIF_MCM_SetMultiChannelPattern>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_POSIF_MCM_GetMultiChannelPattern() \n\n\n
 */
__STATIC_INLINE void XMC_POSIF_MCM_SetMultiChannelPattern(XMC_POSIF_t *const peripheral, const uint16_t pattern)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	460b      	mov	r3, r1
 8002016:	807b      	strh	r3, [r7, #2]
  peripheral->MCSM = pattern;
 8002018:	887a      	ldrh	r2, [r7, #2]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	645a      	str	r2, [r3, #68]	; 0x44
}
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <XMC_POSIF_MCM_GetMultiChannelPattern>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_POSIF_MCM_SetMultiChannelPattern() \n\n\n
 */
__STATIC_INLINE uint16_t XMC_POSIF_MCM_GetMultiChannelPattern(XMC_POSIF_t *const peripheral)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  return ((uint16_t)(peripheral->MCM & (uint32_t)POSIF_MCM_MCMP_Msk));
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002034:	b29b      	uxth	r3, r3
}
 8002036:	4618      	mov	r0, r3
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop

08002044 <XMC_POSIF_MCM_GetShadowMultiChannelPattern>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_POSIF_MCM_SetMultiChannelPattern() \n\n\n
 */
__STATIC_INLINE uint16_t XMC_POSIF_MCM_GetShadowMultiChannelPattern(XMC_POSIF_t *const peripheral)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  return ((uint16_t)(peripheral->MCSM & (uint32_t)POSIF_MCSM_MCMPS_Msk));
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002050:	b29b      	uxth	r3, r3
}
 8002052:	4618      	mov	r0, r3
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop

08002060 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	460b      	mov	r3, r1
 800206a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 800206c:	78fb      	ldrb	r3, [r7, #3]
 800206e:	2201      	movs	r2, #1
 8002070:	409a      	lsls	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	605a      	str	r2, [r3, #4]
}
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	460b      	mov	r3, r1
 800208a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 800208c:	78fb      	ldrb	r3, [r7, #3]
 800208e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002092:	409a      	lsls	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	605a      	str	r2, [r3, #4]
}
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop

080020a4 <PWM_BC_lPinInit>:
  }
}

/* Initialization of the GPIO */
void PWM_BC_lPinInit(PWM_BC_t* const HandlePtr)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("PWM_BC_lPinInit:NULL Handle Pointer",
              (HandlePtr != (PWM_BC_t *)NULL));
  XMC_GPIO_Init(HandlePtr->pwmoutpin_ptr[0]->port,HandlePtr->pwmoutpin_ptr[0]->pin, HandlePtr->pwmoutconfig_ptr[0]);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b0:	6819      	ldr	r1, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b6:	791a      	ldrb	r2, [r3, #4]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020bc:	4608      	mov	r0, r1
 80020be:	4611      	mov	r1, r2
 80020c0:	461a      	mov	r2, r3
 80020c2:	f7fe f983 	bl	80003cc <XMC_GPIO_Init>
  XMC_GPIO_Init(HandlePtr->pwmoutpin_ptr[1]->port,HandlePtr->pwmoutpin_ptr[1]->pin, HandlePtr->pwmoutconfig_ptr[1]);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	6819      	ldr	r1, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d0:	791a      	ldrb	r2, [r3, #4]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020d6:	4608      	mov	r0, r1
 80020d8:	4611      	mov	r1, r2
 80020da:	461a      	mov	r2, r3
 80020dc:	f7fe f976 	bl	80003cc <XMC_GPIO_Init>
  XMC_GPIO_Init(HandlePtr->pwmoutpin_ptr[2]->port,HandlePtr->pwmoutpin_ptr[2]->pin, HandlePtr->pwmoutconfig_ptr[2]);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020e4:	6819      	ldr	r1, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ea:	791a      	ldrb	r2, [r3, #4]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f0:	4608      	mov	r0, r1
 80020f2:	4611      	mov	r1, r2
 80020f4:	461a      	mov	r2, r3
 80020f6:	f7fe f969 	bl	80003cc <XMC_GPIO_Init>
  XMC_GPIO_Init(HandlePtr->pwmoutpin_ptr[3]->port,HandlePtr->pwmoutpin_ptr[3]->pin, HandlePtr->pwmoutconfig_ptr[3]);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020fe:	6819      	ldr	r1, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002104:	791a      	ldrb	r2, [r3, #4]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800210a:	4608      	mov	r0, r1
 800210c:	4611      	mov	r1, r2
 800210e:	461a      	mov	r2, r3
 8002110:	f7fe f95c 	bl	80003cc <XMC_GPIO_Init>
  XMC_GPIO_Init(HandlePtr->pwmoutpin_ptr[4]->port,HandlePtr->pwmoutpin_ptr[4]->pin, HandlePtr->pwmoutconfig_ptr[4]);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002118:	6819      	ldr	r1, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800211e:	791a      	ldrb	r2, [r3, #4]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002124:	4608      	mov	r0, r1
 8002126:	4611      	mov	r1, r2
 8002128:	461a      	mov	r2, r3
 800212a:	f7fe f94f 	bl	80003cc <XMC_GPIO_Init>
  XMC_GPIO_Init(HandlePtr->pwmoutpin_ptr[5]->port,HandlePtr->pwmoutpin_ptr[5]->pin, HandlePtr->pwmoutconfig_ptr[5]);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	6819      	ldr	r1, [r3, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002138:	791a      	ldrb	r2, [r3, #4]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213e:	4608      	mov	r0, r1
 8002140:	4611      	mov	r1, r2
 8002142:	461a      	mov	r2, r3
 8002144:	f7fe f942 	bl	80003cc <XMC_GPIO_Init>

  if (NULL != HandlePtr->trapinpin_ptr)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800214c:	2b00      	cmp	r3, #0
 800214e:	d01b      	beq.n	8002188 <PWM_BC_lPinInit+0xe4>
  {
    XMC_GPIO_Init(HandlePtr->trapinpin_ptr->port,HandlePtr->trapinpin_ptr->pin,HandlePtr->trapinconfig_ptr);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002154:	6819      	ldr	r1, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800215a:	791a      	ldrb	r2, [r3, #4]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002160:	4608      	mov	r0, r1
 8002162:	4611      	mov	r1, r2
 8002164:	461a      	mov	r2, r3
 8002166:	f7fe f931 	bl	80003cc <XMC_GPIO_Init>
    XMC_GPIO_SetHardwareControl(HandlePtr->trapinpin_ptr->port,HandlePtr->trapinpin_ptr->pin,
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216e:	6819      	ldr	r1, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002174:	791a      	ldrb	r2, [r3, #4]
                                  (XMC_GPIO_HWCTRL_t)HandlePtr->config_ptr->trap_hwsel);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800217a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
  XMC_GPIO_Init(HandlePtr->pwmoutpin_ptr[5]->port,HandlePtr->pwmoutpin_ptr[5]->pin, HandlePtr->pwmoutconfig_ptr[5]);

  if (NULL != HandlePtr->trapinpin_ptr)
  {
    XMC_GPIO_Init(HandlePtr->trapinpin_ptr->port,HandlePtr->trapinpin_ptr->pin,HandlePtr->trapinconfig_ptr);
    XMC_GPIO_SetHardwareControl(HandlePtr->trapinpin_ptr->port,HandlePtr->trapinpin_ptr->pin,
 800217e:	4608      	mov	r0, r1
 8002180:	4611      	mov	r1, r2
 8002182:	461a      	mov	r2, r3
 8002184:	f7ff f93e 	bl	8001404 <XMC_GPIO_SetHardwareControl>
                                  (XMC_GPIO_HWCTRL_t)HandlePtr->config_ptr->trap_hwsel);
  }
  /*Inverter Enable pin settings.*/
  if (PWM_BC_IPIN_HIGH == HandlePtr->config_ptr->inverter_pin)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800218c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002190:	2b01      	cmp	r3, #1
 8002192:	d116      	bne.n	80021c2 <PWM_BC_lPinInit+0x11e>
  {
    XMC_GPIO_Init(HandlePtr->inverterpin_ptr->port,HandlePtr->inverterpin_ptr->pin, HandlePtr->inverterpinconfig_ptr);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002198:	6819      	ldr	r1, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800219e:	791a      	ldrb	r2, [r3, #4]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021a4:	4608      	mov	r0, r1
 80021a6:	4611      	mov	r1, r2
 80021a8:	461a      	mov	r2, r3
 80021aa:	f7fe f90f 	bl	80003cc <XMC_GPIO_Init>
    XMC_GPIO_SetOutputLow(HandlePtr->inverterpin_ptr->port,HandlePtr->inverterpin_ptr->pin);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021b8:	791b      	ldrb	r3, [r3, #4]
 80021ba:	4610      	mov	r0, r2
 80021bc:	4619      	mov	r1, r3
 80021be:	f7ff ff5f 	bl	8002080 <XMC_GPIO_SetOutputLow>
  }
  if (PWM_BC_IPIN_LOW == HandlePtr->config_ptr->inverter_pin)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d116      	bne.n	80021fc <PWM_BC_lPinInit+0x158>
  {
    XMC_GPIO_Init(HandlePtr->inverterpin_ptr->port,HandlePtr->inverterpin_ptr->pin,HandlePtr->inverterpinconfig_ptr);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021d2:	6819      	ldr	r1, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021d8:	791a      	ldrb	r2, [r3, #4]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021de:	4608      	mov	r0, r1
 80021e0:	4611      	mov	r1, r2
 80021e2:	461a      	mov	r2, r3
 80021e4:	f7fe f8f2 	bl	80003cc <XMC_GPIO_Init>
    XMC_GPIO_SetOutputHigh(HandlePtr->inverterpin_ptr->port,HandlePtr->inverterpin_ptr->pin);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021f2:	791b      	ldrb	r3, [r3, #4]
 80021f4:	4610      	mov	r0, r2
 80021f6:	4619      	mov	r1, r3
 80021f8:	f7ff ff32 	bl	8002060 <XMC_GPIO_SetOutputHigh>
  }
}
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop

08002204 <PWM_BC_Init>:
/**
 * This function initializes all the three CCU8 phases and 
 * POSIF peripheral as per the user configurations
 */
PWM_BC_STATUS_t PWM_BC_Init(PWM_BC_t* HandlePtr)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint8_t index;
  uint32_t init_status = (uint32_t)PWM_BC_STATUS_SUCCESS;
 800220c:	2300      	movs	r3, #0
 800220e:	60bb      	str	r3, [r7, #8]

  XMC_ASSERT("PWM_BC_Init:NULL Handle Pointer",
              (HandlePtr != (PWM_BC_t *)NULL));

  if (PWM_BC_UNINITIALIZED == HandlePtr->state)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002216:	2b00      	cmp	r3, #0
 8002218:	f040 8181 	bne.w	800251e <PWM_BC_Init+0x31a>
  {
    /* CCU8 global init to start the prescalar and de-assert the module */
    init_status  = (uint32_t)GLOBAL_CCU8_Init(HandlePtr->globalccu8_ptr);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	69db      	ldr	r3, [r3, #28]
 8002220:	4618      	mov	r0, r3
 8002222:	f000 fcff 	bl	8002c24 <GLOBAL_CCU8_Init>
 8002226:	4603      	mov	r3, r0
 8002228:	60bb      	str	r3, [r7, #8]

    /* POSIF global init*/
    init_status  |= (uint32_t)GLOBAL_POSIF_Init(HandlePtr->global_posif_ptr);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	4618      	mov	r0, r3
 8002230:	f000 fcca 	bl	8002bc8 <GLOBAL_POSIF_Init>
 8002234:	4603      	mov	r3, r0
 8002236:	461a      	mov	r2, r3
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	4313      	orrs	r3, r2
 800223c:	60bb      	str	r3, [r7, #8]
        
    PWM_BC_lPinInit(HandlePtr);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f7ff ff30 	bl	80020a4 <PWM_BC_lPinInit>
    init_status |= (uint32_t)XMC_POSIF_MCM_Init(HandlePtr->posif_module_ptr,HandlePtr->posif_mcmconf_ptr);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	691a      	ldr	r2, [r3, #16]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	695b      	ldr	r3, [r3, #20]
 800224c:	4610      	mov	r0, r2
 800224e:	4619      	mov	r1, r3
 8002250:	f7ff f91a 	bl	8001488 <XMC_POSIF_MCM_Init>
 8002254:	4603      	mov	r3, r0
 8002256:	461a      	mov	r2, r3
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	4313      	orrs	r3, r2
 800225c:	60bb      	str	r3, [r7, #8]

    if (init_status == (uint32_t)PWM_BC_STATUS_SUCCESS)
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	2b00      	cmp	r3, #0
 8002262:	f040 815a 	bne.w	800251a <PWM_BC_Init+0x316>
    {
      for (index = (uint8_t)0; index < PWM_BC_MAXPHASE_COUNT; index++)
 8002266:	2300      	movs	r3, #0
 8002268:	73fb      	strb	r3, [r7, #15]
 800226a:	e0b8      	b.n	80023de <PWM_BC_Init+0x1da>
      {
        /* Phase configurations */
        XMC_CCU8_SLICE_CompareInit(HandlePtr->phase_ptr[index]->slice_ptr, HandlePtr->ph_timerinit_ptr);
 800226c:	7bfb      	ldrb	r3, [r7, #15]
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4413      	add	r3, r2
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	4610      	mov	r0, r2
 800227e:	4619      	mov	r1, r3
 8002280:	f7fe feca 	bl	8001018 <XMC_CCU8_SLICE_CompareInit>
        /* Update period registers */
        XMC_CCU8_SLICE_SetTimerPeriodMatch(HandlePtr->phase_ptr[index]->slice_ptr,HandlePtr->period);
 8002284:	7bfb      	ldrb	r3, [r7, #15]
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	4413      	add	r3, r2
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8002296:	4610      	mov	r0, r2
 8002298:	4619      	mov	r1, r3
 800229a:	f7fe ffc9 	bl	8001230 <XMC_CCU8_SLICE_SetTimerPeriodMatch>
        /* configure a slice trigger event*/
        XMC_CCU8_SLICE_ConfigureEvent(HandlePtr->phase_ptr[index]->slice_ptr,(XMC_CCU8_SLICE_EVENT_t)XMC_CCU8_SLICE_EVENT_0,
 800229e:	7bfb      	ldrb	r3, [r7, #15]
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	4413      	add	r3, r2
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ae:	4610      	mov	r0, r2
 80022b0:	2101      	movs	r1, #1
 80022b2:	461a      	mov	r2, r3
 80022b4:	f7fe ff52 	bl	800115c <XMC_CCU8_SLICE_ConfigureEvent>
                                         HandlePtr->startconfig_ptr);
        /* configure a slice trigger event*/
        XMC_CCU8_SLICE_ConfigureEvent(HandlePtr->phase_ptr[index]->slice_ptr,(XMC_CCU8_SLICE_EVENT_t)XMC_CCU8_SLICE_EVENT_2,
 80022b8:	7bfb      	ldrb	r3, [r7, #15]
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	4413      	add	r3, r2
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c8:	4610      	mov	r0, r2
 80022ca:	2103      	movs	r1, #3
 80022cc:	461a      	mov	r2, r3
 80022ce:	f7fe ff45 	bl	800115c <XMC_CCU8_SLICE_ConfigureEvent>
                                         HandlePtr->trapconfig_ptr);

        /* Phases - Connect events to node*/
        XMC_CCU8_SLICE_SetInterruptNode(HandlePtr->phase_ptr[index]->slice_ptr,
 80022d2:	7bfb      	ldrb	r3, [r7, #15]
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	4413      	add	r3, r2
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	6819      	ldr	r1, [r3, #0]
                      (XMC_CCU8_SLICE_IRQ_ID_t)XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH,
                      (XMC_CCU8_SLICE_SR_ID_t)( HandlePtr->config_ptr->event_sr_selector[index] & (0x03U)));
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022e2:	7bfa      	ldrb	r2, [r7, #15]
 80022e4:	3208      	adds	r2, #8
 80022e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
        /* configure a slice trigger event*/
        XMC_CCU8_SLICE_ConfigureEvent(HandlePtr->phase_ptr[index]->slice_ptr,(XMC_CCU8_SLICE_EVENT_t)XMC_CCU8_SLICE_EVENT_2,
                                         HandlePtr->trapconfig_ptr);

        /* Phases - Connect events to node*/
        XMC_CCU8_SLICE_SetInterruptNode(HandlePtr->phase_ptr[index]->slice_ptr,
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	4608      	mov	r0, r1
 80022f4:	2100      	movs	r1, #0
 80022f6:	461a      	mov	r2, r3
 80022f8:	f7fe ffc0 	bl	800127c <XMC_CCU8_SLICE_SetInterruptNode>
                      (XMC_CCU8_SLICE_IRQ_ID_t)XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH,
                      (XMC_CCU8_SLICE_SR_ID_t)( HandlePtr->config_ptr->event_sr_selector[index] & (0x03U)));

        XMC_CCU8_SLICE_SetInterruptNode(HandlePtr->phase_ptr[index]->slice_ptr,
 80022fc:	7bfb      	ldrb	r3, [r7, #15]
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	4413      	add	r3, r2
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	6819      	ldr	r1, [r3, #0]
                      (XMC_CCU8_SLICE_IRQ_ID_t)XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1,
                      (XMC_CCU8_SLICE_SR_ID_t)((HandlePtr->config_ptr->event_sr_selector[index] >>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800230c:	7bfa      	ldrb	r2, [r7, #15]
 800230e:	3208      	adds	r2, #8
 8002310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002314:	089b      	lsrs	r3, r3, #2
        /* Phases - Connect events to node*/
        XMC_CCU8_SLICE_SetInterruptNode(HandlePtr->phase_ptr[index]->slice_ptr,
                      (XMC_CCU8_SLICE_IRQ_ID_t)XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH,
                      (XMC_CCU8_SLICE_SR_ID_t)( HandlePtr->config_ptr->event_sr_selector[index] & (0x03U)));

        XMC_CCU8_SLICE_SetInterruptNode(HandlePtr->phase_ptr[index]->slice_ptr,
 8002316:	b2db      	uxtb	r3, r3
 8002318:	f003 0303 	and.w	r3, r3, #3
 800231c:	b2db      	uxtb	r3, r3
 800231e:	4608      	mov	r0, r1
 8002320:	2102      	movs	r1, #2
 8002322:	461a      	mov	r2, r3
 8002324:	f7fe ffaa 	bl	800127c <XMC_CCU8_SLICE_SetInterruptNode>
                      (XMC_CCU8_SLICE_IRQ_ID_t)XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1,
                      (XMC_CCU8_SLICE_SR_ID_t)((HandlePtr->config_ptr->event_sr_selector[index] >>
                      CCU8_CC8_SRS_CM1SR_Pos) & (0x03U)));

        XMC_CCU8_SLICE_SetInterruptNode(HandlePtr->phase_ptr[index]->slice_ptr,
 8002328:	7bfb      	ldrb	r3, [r7, #15]
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	4413      	add	r3, r2
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	6819      	ldr	r1, [r3, #0]
                      (XMC_CCU8_SLICE_IRQ_ID_t)XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2,
                      (XMC_CCU8_SLICE_SR_ID_t)((HandlePtr->config_ptr->event_sr_selector[index] >>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002338:	7bfa      	ldrb	r2, [r7, #15]
 800233a:	3208      	adds	r2, #8
 800233c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002340:	091b      	lsrs	r3, r3, #4
        XMC_CCU8_SLICE_SetInterruptNode(HandlePtr->phase_ptr[index]->slice_ptr,
                      (XMC_CCU8_SLICE_IRQ_ID_t)XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1,
                      (XMC_CCU8_SLICE_SR_ID_t)((HandlePtr->config_ptr->event_sr_selector[index] >>
                      CCU8_CC8_SRS_CM1SR_Pos) & (0x03U)));

        XMC_CCU8_SLICE_SetInterruptNode(HandlePtr->phase_ptr[index]->slice_ptr,
 8002342:	b2db      	uxtb	r3, r3
 8002344:	f003 0303 	and.w	r3, r3, #3
 8002348:	b2db      	uxtb	r3, r3
 800234a:	4608      	mov	r0, r1
 800234c:	2104      	movs	r1, #4
 800234e:	461a      	mov	r2, r3
 8002350:	f7fe ff94 	bl	800127c <XMC_CCU8_SLICE_SetInterruptNode>
                      (XMC_CCU8_SLICE_IRQ_ID_t)XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2,
                      (XMC_CCU8_SLICE_SR_ID_t)((HandlePtr->config_ptr->event_sr_selector[index] >>
                      CCU8_CC8_SRS_CM2SR_Pos) & (0x03U)));

        XMC_CCU8_SLICE_SetInterruptNode(HandlePtr->phase_ptr[index]->slice_ptr, (XMC_CCU8_SLICE_IRQ_ID_t)XMC_CCU8_SLICE_IRQ_ID_EVENT0,
 8002354:	7bfb      	ldrb	r3, [r7, #15]
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	4413      	add	r3, r2
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	6819      	ldr	r1, [r3, #0]
                      (XMC_CCU8_SLICE_SR_ID_t)((HandlePtr->config_ptr->event_sr_selector[index] >>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002364:	7bfa      	ldrb	r2, [r7, #15]
 8002366:	3208      	adds	r2, #8
 8002368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800236c:	0a1b      	lsrs	r3, r3, #8
        XMC_CCU8_SLICE_SetInterruptNode(HandlePtr->phase_ptr[index]->slice_ptr,
                      (XMC_CCU8_SLICE_IRQ_ID_t)XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2,
                      (XMC_CCU8_SLICE_SR_ID_t)((HandlePtr->config_ptr->event_sr_selector[index] >>
                      CCU8_CC8_SRS_CM2SR_Pos) & (0x03U)));

        XMC_CCU8_SLICE_SetInterruptNode(HandlePtr->phase_ptr[index]->slice_ptr, (XMC_CCU8_SLICE_IRQ_ID_t)XMC_CCU8_SLICE_IRQ_ID_EVENT0,
 800236e:	b2db      	uxtb	r3, r3
 8002370:	f003 0303 	and.w	r3, r3, #3
 8002374:	b2db      	uxtb	r3, r3
 8002376:	4608      	mov	r0, r1
 8002378:	2108      	movs	r1, #8
 800237a:	461a      	mov	r2, r3
 800237c:	f7fe ff7e 	bl	800127c <XMC_CCU8_SLICE_SetInterruptNode>
                      (XMC_CCU8_SLICE_SR_ID_t)((HandlePtr->config_ptr->event_sr_selector[index] >>
                      CCU8_CC8_SRS_E0SR_Pos) & (0x03U)));

        XMC_CCU8_SLICE_SetInterruptNode(HandlePtr->phase_ptr[index]->slice_ptr, (XMC_CCU8_SLICE_IRQ_ID_t)XMC_CCU8_SLICE_IRQ_ID_EVENT1,
 8002380:	7bfb      	ldrb	r3, [r7, #15]
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	4413      	add	r3, r2
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	6819      	ldr	r1, [r3, #0]
                      (XMC_CCU8_SLICE_SR_ID_t)((HandlePtr->config_ptr->event_sr_selector[index] >>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002390:	7bfa      	ldrb	r2, [r7, #15]
 8002392:	3208      	adds	r2, #8
 8002394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002398:	0a9b      	lsrs	r3, r3, #10

        XMC_CCU8_SLICE_SetInterruptNode(HandlePtr->phase_ptr[index]->slice_ptr, (XMC_CCU8_SLICE_IRQ_ID_t)XMC_CCU8_SLICE_IRQ_ID_EVENT0,
                      (XMC_CCU8_SLICE_SR_ID_t)((HandlePtr->config_ptr->event_sr_selector[index] >>
                      CCU8_CC8_SRS_E0SR_Pos) & (0x03U)));

        XMC_CCU8_SLICE_SetInterruptNode(HandlePtr->phase_ptr[index]->slice_ptr, (XMC_CCU8_SLICE_IRQ_ID_t)XMC_CCU8_SLICE_IRQ_ID_EVENT1,
 800239a:	b2db      	uxtb	r3, r3
 800239c:	f003 0303 	and.w	r3, r3, #3
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	4608      	mov	r0, r1
 80023a4:	2109      	movs	r1, #9
 80023a6:	461a      	mov	r2, r3
 80023a8:	f7fe ff68 	bl	800127c <XMC_CCU8_SLICE_SetInterruptNode>
                      (XMC_CCU8_SLICE_SR_ID_t)((HandlePtr->config_ptr->event_sr_selector[index] >>
                      CCU8_CC8_SRS_E1SR_Pos) & (0x03U)));

        XMC_CCU8_SLICE_SetInterruptNode(HandlePtr->phase_ptr[index]->slice_ptr, (XMC_CCU8_SLICE_IRQ_ID_t)XMC_CCU8_SLICE_IRQ_ID_EVENT2,
 80023ac:	7bfb      	ldrb	r3, [r7, #15]
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	6819      	ldr	r1, [r3, #0]
                      (XMC_CCU8_SLICE_SR_ID_t)((HandlePtr->config_ptr->event_sr_selector[index] >>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023bc:	7bfa      	ldrb	r2, [r7, #15]
 80023be:	3208      	adds	r2, #8
 80023c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023c4:	0b1b      	lsrs	r3, r3, #12

        XMC_CCU8_SLICE_SetInterruptNode(HandlePtr->phase_ptr[index]->slice_ptr, (XMC_CCU8_SLICE_IRQ_ID_t)XMC_CCU8_SLICE_IRQ_ID_EVENT1,
                      (XMC_CCU8_SLICE_SR_ID_t)((HandlePtr->config_ptr->event_sr_selector[index] >>
                      CCU8_CC8_SRS_E1SR_Pos) & (0x03U)));

        XMC_CCU8_SLICE_SetInterruptNode(HandlePtr->phase_ptr[index]->slice_ptr, (XMC_CCU8_SLICE_IRQ_ID_t)XMC_CCU8_SLICE_IRQ_ID_EVENT2,
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	f003 0303 	and.w	r3, r3, #3
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	4608      	mov	r0, r1
 80023d0:	210a      	movs	r1, #10
 80023d2:	461a      	mov	r2, r3
 80023d4:	f7fe ff52 	bl	800127c <XMC_CCU8_SLICE_SetInterruptNode>
    PWM_BC_lPinInit(HandlePtr);
    init_status |= (uint32_t)XMC_POSIF_MCM_Init(HandlePtr->posif_module_ptr,HandlePtr->posif_mcmconf_ptr);

    if (init_status == (uint32_t)PWM_BC_STATUS_SUCCESS)
    {
      for (index = (uint8_t)0; index < PWM_BC_MAXPHASE_COUNT; index++)
 80023d8:	7bfb      	ldrb	r3, [r7, #15]
 80023da:	3301      	adds	r3, #1
 80023dc:	73fb      	strb	r3, [r7, #15]
 80023de:	7bfb      	ldrb	r3, [r7, #15]
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	f67f af43 	bls.w	800226c <PWM_BC_Init+0x68>
        XMC_CCU8_SLICE_SetInterruptNode(HandlePtr->phase_ptr[index]->slice_ptr, (XMC_CCU8_SLICE_IRQ_ID_t)XMC_CCU8_SLICE_IRQ_ID_EVENT2,
                      (XMC_CCU8_SLICE_SR_ID_t)((HandlePtr->config_ptr->event_sr_selector[index] >>
                      CCU8_CC8_SRS_E2SR_Pos) & (0x03U)));
      }

      XMC_CCU8_SLICE_SetTimerCompareMatch(HandlePtr->phase_ptr[0]->slice_ptr, HandlePtr->config_ptr->phu_cmpch, 0x00U);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023f4:	4610      	mov	r0, r2
 80023f6:	4619      	mov	r1, r3
 80023f8:	2200      	movs	r2, #0
 80023fa:	f7fe ff27 	bl	800124c <XMC_CCU8_SLICE_SetTimerCompareMatch>

      XMC_CCU8_SLICE_SetTimerCompareMatch(HandlePtr->phase_ptr[1]->slice_ptr, HandlePtr->config_ptr->phv_cmpch, 0x00U);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002408:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800240c:	4610      	mov	r0, r2
 800240e:	4619      	mov	r1, r3
 8002410:	2200      	movs	r2, #0
 8002412:	f7fe ff1b 	bl	800124c <XMC_CCU8_SLICE_SetTimerCompareMatch>

      XMC_CCU8_SLICE_SetTimerCompareMatch(HandlePtr->phase_ptr[2]->slice_ptr, HandlePtr->config_ptr->phw_cmpch, 0x00U);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002420:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8002424:	4610      	mov	r0, r2
 8002426:	4619      	mov	r1, r3
 8002428:	2200      	movs	r2, #0
 800242a:	f7fe ff0f 	bl	800124c <XMC_CCU8_SLICE_SetTimerCompareMatch>



      /* Slice configuration for triggering ADC for current measurement */
      if (1U == HandlePtr->config_ptr->ext_trigger)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002432:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8002436:	2b01      	cmp	r3, #1
 8002438:	d115      	bne.n	8002466 <PWM_BC_Init+0x262>
      {
        XMC_CCU8_SLICE_EnableEvent(HandlePtr->phase_ptr[2]->slice_ptr,(XMC_CCU8_SLICE_IRQ_ID_t)XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4618      	mov	r0, r3
 8002442:	2100      	movs	r1, #0
 8002444:	f7ff fd86 	bl	8001f54 <XMC_CCU8_SLICE_EnableEvent>
        XMC_CCU8_SLICE_SetInterruptNode(HandlePtr->phase_ptr[2]->slice_ptr,
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	681a      	ldr	r2, [r3, #0]
                 (XMC_CCU8_SLICE_IRQ_ID_t)XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH,
                 (XMC_CCU8_SLICE_SR_ID_t)((HandlePtr->config_ptr->event_sr_selector[2]>> CCU8_CC8_SRS_POSR_Pos) & (0x03U)));
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002452:	6a9b      	ldr	r3, [r3, #40]	; 0x28

      /* Slice configuration for triggering ADC for current measurement */
      if (1U == HandlePtr->config_ptr->ext_trigger)
      {
        XMC_CCU8_SLICE_EnableEvent(HandlePtr->phase_ptr[2]->slice_ptr,(XMC_CCU8_SLICE_IRQ_ID_t)XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH);
        XMC_CCU8_SLICE_SetInterruptNode(HandlePtr->phase_ptr[2]->slice_ptr,
 8002454:	b2db      	uxtb	r3, r3
 8002456:	f003 0303 	and.w	r3, r3, #3
 800245a:	b2db      	uxtb	r3, r3
 800245c:	4610      	mov	r0, r2
 800245e:	2100      	movs	r1, #0
 8002460:	461a      	mov	r2, r3
 8002462:	f7fe ff0b 	bl	800127c <XMC_CCU8_SLICE_SetInterruptNode>
                 (XMC_CCU8_SLICE_IRQ_ID_t)XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH,
                 (XMC_CCU8_SLICE_SR_ID_t)((HandlePtr->config_ptr->event_sr_selector[2]>> CCU8_CC8_SRS_POSR_Pos) & (0x03U)));
      }

      XMC_CCU8_EnableShadowTransfer(HandlePtr->module_ptr,(uint32_t)HandlePtr->config_ptr->shadowtransfer_mask);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800246e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002472:	4610      	mov	r0, r2
 8002474:	4619      	mov	r1, r3
 8002476:	f7ff fd5f 	bl	8001f38 <XMC_CCU8_EnableShadowTransfer>
      /* Enable period match interrupt */
      if (1U == HandlePtr->config_ptr->enable_permatchevent)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800247e:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 8002482:	2b01      	cmp	r3, #1
 8002484:	d106      	bne.n	8002494 <PWM_BC_Init+0x290>
      {
        XMC_CCU8_SLICE_EnableEvent(HandlePtr->phase_ptr[0]->slice_ptr,XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4618      	mov	r0, r3
 800248e:	2101      	movs	r1, #1
 8002490:	f7ff fd60 	bl	8001f54 <XMC_CCU8_SLICE_EnableEvent>
      }
      /* Enable trap interrupt */
      if (1U == HandlePtr->config_ptr->enable_trapevent)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002498:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800249c:	2b01      	cmp	r3, #1
 800249e:	d106      	bne.n	80024ae <PWM_BC_Init+0x2aa>
      {
        XMC_CCU8_SLICE_EnableEvent(HandlePtr->phase_ptr[0]->slice_ptr,XMC_CCU8_SLICE_IRQ_ID_EVENT2);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	210a      	movs	r1, #10
 80024aa:	f7ff fd53 	bl	8001f54 <XMC_CCU8_SLICE_EnableEvent>
      }

      XMC_CCU8_EnableClock(HandlePtr->module_ptr,HandlePtr->phase_ptr[0]->slice_number);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	791b      	ldrb	r3, [r3, #4]
 80024b8:	4610      	mov	r0, r2
 80024ba:	4619      	mov	r1, r3
 80024bc:	f7ff fd16 	bl	8001eec <XMC_CCU8_EnableClock>
      XMC_CCU8_EnableClock(HandlePtr->module_ptr,HandlePtr->phase_ptr[1]->slice_number);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	791b      	ldrb	r3, [r3, #4]
 80024ca:	4610      	mov	r0, r2
 80024cc:	4619      	mov	r1, r3
 80024ce:	f7ff fd0d 	bl	8001eec <XMC_CCU8_EnableClock>
      XMC_CCU8_EnableClock(HandlePtr->module_ptr,HandlePtr->phase_ptr[2]->slice_number);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	791b      	ldrb	r3, [r3, #4]
 80024dc:	4610      	mov	r0, r2
 80024de:	4619      	mov	r1, r3
 80024e0:	f7ff fd04 	bl	8001eec <XMC_CCU8_EnableClock>

      HandlePtr->dead_time_rising_edge     = (uint8_t)HandlePtr->deadtimeconfig_ptr->channel1_st_rising_edge_counter;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e8:	791a      	ldrb	r2, [r3, #4]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
      HandlePtr->dead_time_falling_edge    = (uint8_t)HandlePtr->deadtimeconfig_ptr->channel1_st_falling_edge_counter;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f4:	795a      	ldrb	r2, [r3, #5]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

      HandlePtr->deadtime_div  = (uint8_t)HandlePtr->deadtimeconfig_ptr->div;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8002506:	b2db      	uxtb	r3, r3
 8002508:	461a      	mov	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
      HandlePtr->state          = PWM_BC_INITIALIZED;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8002518:	e001      	b.n	800251e <PWM_BC_Init+0x31a>
    }
    else
    {
      init_status = (uint32_t)PWM_BC_STATUS_FAILURE;
 800251a:	2301      	movs	r3, #1
 800251c:	60bb      	str	r3, [r7, #8]
    }
  }
  return ((PWM_BC_STATUS_t)init_status);
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	b2db      	uxtb	r3, r3
}
 8002522:	4618      	mov	r0, r3
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop

0800252c <PWM_BC_InverterEnable>:
/**
 * This function enables inverter.
 */
void PWM_BC_InverterEnable(PWM_BC_t* const HandlePtr)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("PWM_BC_InverterEnable:NULL Handle Pointer",
              (HandlePtr != (PWM_BC_t *)NULL));
              
  /*Inverter Enable pin settings.*/
  if (PWM_BC_IPIN_HIGH == HandlePtr->config_ptr->inverter_pin)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002538:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800253c:	2b01      	cmp	r3, #1
 800253e:	d109      	bne.n	8002554 <PWM_BC_InverterEnable+0x28>
  {
    XMC_GPIO_SetOutputHigh(HandlePtr->inverterpin_ptr->port,HandlePtr->inverterpin_ptr->pin);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800254a:	791b      	ldrb	r3, [r3, #4]
 800254c:	4610      	mov	r0, r2
 800254e:	4619      	mov	r1, r3
 8002550:	f7ff fd86 	bl	8002060 <XMC_GPIO_SetOutputHigh>
  }
  if (PWM_BC_IPIN_LOW == HandlePtr->config_ptr->inverter_pin)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002558:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800255c:	2b02      	cmp	r3, #2
 800255e:	d109      	bne.n	8002574 <PWM_BC_InverterEnable+0x48>
  {
    XMC_GPIO_SetOutputLow(HandlePtr->inverterpin_ptr->port,HandlePtr->inverterpin_ptr->pin);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800256a:	791b      	ldrb	r3, [r3, #4]
 800256c:	4610      	mov	r0, r2
 800256e:	4619      	mov	r1, r3
 8002570:	f7ff fd86 	bl	8002080 <XMC_GPIO_SetOutputLow>
  }
}
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop

0800257c <PWM_BC_Start>:
}
/**
 * This function starts the CCU8 slices used to generate BC PWM.
 */
void PWM_BC_Start(PWM_BC_t* HandlePtr)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint8_t index;
  XMC_ASSERT("PWM_BC_Start:NULL Handle Pointer",
              (HandlePtr != (PWM_BC_t *)NULL));
  if ((PWM_BC_INITIALIZED == HandlePtr->state) ||
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800258a:	2b01      	cmp	r3, #1
 800258c:	d005      	beq.n	800259a <PWM_BC_Start+0x1e>
      (PWM_BC_STOPPED == HandlePtr->state))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
void PWM_BC_Start(PWM_BC_t* HandlePtr)
{
  uint8_t index;
  XMC_ASSERT("PWM_BC_Start:NULL Handle Pointer",
              (HandlePtr != (PWM_BC_t *)NULL));
  if ((PWM_BC_INITIALIZED == HandlePtr->state) ||
 8002594:	2b03      	cmp	r3, #3
 8002596:	f040 8136 	bne.w	8002806 <PWM_BC_Start+0x28a>
      (PWM_BC_STOPPED == HandlePtr->state))
  {
    PWM_BC_InverterEnable(HandlePtr);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f7ff ffc6 	bl	800252c <PWM_BC_InverterEnable>
    /* configure the Start trigger function of a slice*/
    XMC_CCU8_SLICE_StartConfig(HandlePtr->phase_ptr[0]->slice_ptr,XMC_CCU8_SLICE_EVENT_0,
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	2101      	movs	r1, #1
 80025aa:	2201      	movs	r2, #1
 80025ac:	f7fe fd6e 	bl	800108c <XMC_CCU8_SLICE_StartConfig>
                       XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR);
    XMC_CCU8_SLICE_StartConfig(HandlePtr->phase_ptr[1]->slice_ptr,XMC_CCU8_SLICE_EVENT_0,
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4618      	mov	r0, r3
 80025b8:	2101      	movs	r1, #1
 80025ba:	2201      	movs	r2, #1
 80025bc:	f7fe fd66 	bl	800108c <XMC_CCU8_SLICE_StartConfig>
                       XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR);
    XMC_CCU8_SLICE_StartConfig(HandlePtr->phase_ptr[2]->slice_ptr,XMC_CCU8_SLICE_EVENT_0,
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	2101      	movs	r1, #1
 80025ca:	2201      	movs	r2, #1
 80025cc:	f7fe fd5e 	bl	800108c <XMC_CCU8_SLICE_StartConfig>
                       XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR);

    for (index = (uint8_t)0; index < PWM_BC_MAXPHASE_COUNT; index++)
 80025d0:	2300      	movs	r3, #0
 80025d2:	73fb      	strb	r3, [r7, #15]
 80025d4:	e03a      	b.n	800264c <PWM_BC_Start+0xd0>
    {
      XMC_CCU8_SLICE_ClearEvent(HandlePtr->phase_ptr[index]->slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT2);
 80025d6:	7bfb      	ldrb	r3, [r7, #15]
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	4413      	add	r3, r2
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4618      	mov	r0, r3
 80025e4:	210a      	movs	r1, #10
 80025e6:	f7ff fccb 	bl	8001f80 <XMC_CCU8_SLICE_ClearEvent>
      XMC_CCU8_SLICE_ClearEvent(HandlePtr->phase_ptr[index]->slice_ptr, XMC_CCU8_SLICE_IRQ_ID_TRAP);
 80025ea:	7bfb      	ldrb	r3, [r7, #15]
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4413      	add	r3, r2
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	210b      	movs	r1, #11
 80025fa:	f7ff fcc1 	bl	8001f80 <XMC_CCU8_SLICE_ClearEvent>

      /* configure trap function*/
      XMC_CCU8_SLICE_TrapConfig(HandlePtr->phase_ptr[index]->slice_ptr,
 80025fe:	7bfb      	ldrb	r3, [r7, #15]
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	4413      	add	r3, r2
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	6819      	ldr	r1, [r3, #0]
                (XMC_CCU8_SLICE_TRAP_EXIT_MODE_t)HandlePtr->config_ptr->trap_exit_mode,
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    {
      XMC_CCU8_SLICE_ClearEvent(HandlePtr->phase_ptr[index]->slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT2);
      XMC_CCU8_SLICE_ClearEvent(HandlePtr->phase_ptr[index]->slice_ptr, XMC_CCU8_SLICE_IRQ_ID_TRAP);

      /* configure trap function*/
      XMC_CCU8_SLICE_TrapConfig(HandlePtr->phase_ptr[index]->slice_ptr,
 800260e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
                (XMC_CCU8_SLICE_TRAP_EXIT_MODE_t)HandlePtr->config_ptr->trap_exit_mode,
                (bool)HandlePtr->config_ptr->trap_sync_pwm);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002616:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
    {
      XMC_CCU8_SLICE_ClearEvent(HandlePtr->phase_ptr[index]->slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT2);
      XMC_CCU8_SLICE_ClearEvent(HandlePtr->phase_ptr[index]->slice_ptr, XMC_CCU8_SLICE_IRQ_ID_TRAP);

      /* configure trap function*/
      XMC_CCU8_SLICE_TrapConfig(HandlePtr->phase_ptr[index]->slice_ptr,
 800261a:	2b00      	cmp	r3, #0
 800261c:	bf14      	ite	ne
 800261e:	2301      	movne	r3, #1
 8002620:	2300      	moveq	r3, #0
 8002622:	b2db      	uxtb	r3, r3
 8002624:	4608      	mov	r0, r1
 8002626:	4611      	mov	r1, r2
 8002628:	461a      	mov	r2, r3
 800262a:	f7fe fd5d 	bl	80010e8 <XMC_CCU8_SLICE_TrapConfig>
                (XMC_CCU8_SLICE_TRAP_EXIT_MODE_t)HandlePtr->config_ptr->trap_exit_mode,
                (bool)HandlePtr->config_ptr->trap_sync_pwm);

      XMC_CCU8_SLICE_DeadTimeInit(HandlePtr->phase_ptr[index]->slice_ptr,HandlePtr->deadtimeconfig_ptr);
 800262e:	7bfb      	ldrb	r3, [r7, #15]
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	4413      	add	r3, r2
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800263e:	4610      	mov	r0, r2
 8002640:	4619      	mov	r1, r3
 8002642:	f7fe fe77 	bl	8001334 <XMC_CCU8_SLICE_DeadTimeInit>
    XMC_CCU8_SLICE_StartConfig(HandlePtr->phase_ptr[1]->slice_ptr,XMC_CCU8_SLICE_EVENT_0,
                       XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR);
    XMC_CCU8_SLICE_StartConfig(HandlePtr->phase_ptr[2]->slice_ptr,XMC_CCU8_SLICE_EVENT_0,
                       XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR);

    for (index = (uint8_t)0; index < PWM_BC_MAXPHASE_COUNT; index++)
 8002646:	7bfb      	ldrb	r3, [r7, #15]
 8002648:	3301      	adds	r3, #1
 800264a:	73fb      	strb	r3, [r7, #15]
 800264c:	7bfb      	ldrb	r3, [r7, #15]
 800264e:	2b02      	cmp	r3, #2
 8002650:	d9c1      	bls.n	80025d6 <PWM_BC_Start+0x5a>
                (bool)HandlePtr->config_ptr->trap_sync_pwm);

      XMC_CCU8_SLICE_DeadTimeInit(HandlePtr->phase_ptr[index]->slice_ptr,HandlePtr->deadtimeconfig_ptr);
    }

    if ((uint8_t)1 == HandlePtr->config_ptr->trap_enable)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002656:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800265a:	2b01      	cmp	r3, #1
 800265c:	d135      	bne.n	80026ca <PWM_BC_Start+0x14e>
    {
      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[0]->slice_ptr,
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	681a      	ldr	r2, [r3, #0]
               ((uint32_t)HandlePtr->config_ptr->phase_u_out0 | ((uint32_t)HandlePtr->config_ptr->phase_u_out0 << 1U)));
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002668:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 800266c:	4619      	mov	r1, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002672:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 8002676:	005b      	lsls	r3, r3, #1
      XMC_CCU8_SLICE_DeadTimeInit(HandlePtr->phase_ptr[index]->slice_ptr,HandlePtr->deadtimeconfig_ptr);
    }

    if ((uint8_t)1 == HandlePtr->config_ptr->trap_enable)
    {
      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[0]->slice_ptr,
 8002678:	430b      	orrs	r3, r1
 800267a:	4610      	mov	r0, r2
 800267c:	4619      	mov	r1, r3
 800267e:	f7ff fc49 	bl	8001f14 <XMC_CCU8_SLICE_EnableTrap>
               ((uint32_t)HandlePtr->config_ptr->phase_u_out0 | ((uint32_t)HandlePtr->config_ptr->phase_u_out0 << 1U)));

      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[1]->slice_ptr,
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	681a      	ldr	r2, [r3, #0]
              ((uint32_t)HandlePtr->config_ptr->phase_v_out0 | ((uint32_t)HandlePtr->config_ptr->phase_v_out0 << 1U)));
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800268c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8002690:	4619      	mov	r1, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002696:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800269a:	005b      	lsls	r3, r3, #1
    if ((uint8_t)1 == HandlePtr->config_ptr->trap_enable)
    {
      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[0]->slice_ptr,
               ((uint32_t)HandlePtr->config_ptr->phase_u_out0 | ((uint32_t)HandlePtr->config_ptr->phase_u_out0 << 1U)));

      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[1]->slice_ptr,
 800269c:	430b      	orrs	r3, r1
 800269e:	4610      	mov	r0, r2
 80026a0:	4619      	mov	r1, r3
 80026a2:	f7ff fc37 	bl	8001f14 <XMC_CCU8_SLICE_EnableTrap>
              ((uint32_t)HandlePtr->config_ptr->phase_v_out0 | ((uint32_t)HandlePtr->config_ptr->phase_v_out0 << 1U)));

      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[2]->slice_ptr,
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	681a      	ldr	r2, [r3, #0]
              ((uint32_t)HandlePtr->config_ptr->phase_w_out0 | ((uint32_t)HandlePtr->config_ptr->phase_w_out0 << 1U)));
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026b0:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 80026b4:	4619      	mov	r1, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026ba:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 80026be:	005b      	lsls	r3, r3, #1
               ((uint32_t)HandlePtr->config_ptr->phase_u_out0 | ((uint32_t)HandlePtr->config_ptr->phase_u_out0 << 1U)));

      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[1]->slice_ptr,
              ((uint32_t)HandlePtr->config_ptr->phase_v_out0 | ((uint32_t)HandlePtr->config_ptr->phase_v_out0 << 1U)));

      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[2]->slice_ptr,
 80026c0:	430b      	orrs	r3, r1
 80026c2:	4610      	mov	r0, r2
 80026c4:	4619      	mov	r1, r3
 80026c6:	f7ff fc25 	bl	8001f14 <XMC_CCU8_SLICE_EnableTrap>
              ((uint32_t)HandlePtr->config_ptr->phase_w_out0 | ((uint32_t)HandlePtr->config_ptr->phase_w_out0 << 1U)));
    }

    /* Enable/disable dead time based on modulation type */
    if ((PWM_BC_SYNCHRONOUS_RECTIFICATION_MOD == HandlePtr->modulation_type) ||
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d004      	beq.n	80026de <PWM_BC_Start+0x162>
        (PWM_BC_SYNCHRONOUS_RECTIFICATION_BALANCED_MOD == HandlePtr->modulation_type))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[2]->slice_ptr,
              ((uint32_t)HandlePtr->config_ptr->phase_w_out0 | ((uint32_t)HandlePtr->config_ptr->phase_w_out0 << 1U)));
    }

    /* Enable/disable dead time based on modulation type */
    if ((PWM_BC_SYNCHRONOUS_RECTIFICATION_MOD == HandlePtr->modulation_type) ||
 80026da:	2b03      	cmp	r3, #3
 80026dc:	d121      	bne.n	8002722 <PWM_BC_Start+0x1a6>
        (PWM_BC_SYNCHRONOUS_RECTIFICATION_BALANCED_MOD == HandlePtr->modulation_type))
    {
      XMC_CCU8_SLICE_ConfigureDeadTime(HandlePtr->phase_ptr[0]->slice_ptr,HandlePtr->config_ptr->deadtime_control[0]);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80026ec:	4610      	mov	r0, r2
 80026ee:	4619      	mov	r1, r3
 80026f0:	f7fe fe36 	bl	8001360 <XMC_CCU8_SLICE_ConfigureDeadTime>
      XMC_CCU8_SLICE_ConfigureDeadTime(HandlePtr->phase_ptr[1]->slice_ptr,HandlePtr->config_ptr->deadtime_control[1]);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026fe:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8002702:	4610      	mov	r0, r2
 8002704:	4619      	mov	r1, r3
 8002706:	f7fe fe2b 	bl	8001360 <XMC_CCU8_SLICE_ConfigureDeadTime>
      XMC_CCU8_SLICE_ConfigureDeadTime(HandlePtr->phase_ptr[2]->slice_ptr,HandlePtr->config_ptr->deadtime_control[2]);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002714:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 8002718:	4610      	mov	r0, r2
 800271a:	4619      	mov	r1, r3
 800271c:	f7fe fe20 	bl	8001360 <XMC_CCU8_SLICE_ConfigureDeadTime>
 8002720:	e014      	b.n	800274c <PWM_BC_Start+0x1d0>
    }
    else
    {
      XMC_CCU8_SLICE_ConfigureDeadTime(HandlePtr->phase_ptr[0]->slice_ptr,(uint8_t)0);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4618      	mov	r0, r3
 800272a:	2100      	movs	r1, #0
 800272c:	f7fe fe18 	bl	8001360 <XMC_CCU8_SLICE_ConfigureDeadTime>
      XMC_CCU8_SLICE_ConfigureDeadTime(HandlePtr->phase_ptr[1]->slice_ptr,(uint8_t)0);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4618      	mov	r0, r3
 8002738:	2100      	movs	r1, #0
 800273a:	f7fe fe11 	bl	8001360 <XMC_CCU8_SLICE_ConfigureDeadTime>
      XMC_CCU8_SLICE_ConfigureDeadTime(HandlePtr->phase_ptr[2]->slice_ptr,(uint8_t)0);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4618      	mov	r0, r3
 8002746:	2100      	movs	r1, #0
 8002748:	f7fe fe0a 	bl	8001360 <XMC_CCU8_SLICE_ConfigureDeadTime>
    }

    /* dynamic handle configurations*/
    if ((PWM_BC_LOWSIDE_MOD == HandlePtr->modulation_type))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8002752:	2b01      	cmp	r3, #1
 8002754:	d10c      	bne.n	8002770 <PWM_BC_Start+0x1f4>
    {
      HandlePtr->ph_cmpflag[0] = PWM_BC_COMPARE_PERIOD;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2201      	movs	r2, #1
 800275a:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
      HandlePtr->ph_cmpflag[1] = PWM_BC_COMPARE_PERIOD;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2201      	movs	r2, #1
 8002762:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
      HandlePtr->ph_cmpflag[2] = PWM_BC_COMPARE_PERIOD;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 800276e:	e00b      	b.n	8002788 <PWM_BC_Start+0x20c>
    }
    else
    {
      HandlePtr->ph_cmpflag[0] = PWM_BC_COMPARE_ZERO;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
      HandlePtr->ph_cmpflag[1] = PWM_BC_COMPARE_ZERO;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
      HandlePtr->ph_cmpflag[2] = PWM_BC_COMPARE_ZERO;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
    }
    HandlePtr->ph_cmpval[0] = (uint16_t)0;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    HandlePtr->ph_cmpval[1] = HandlePtr->period + (uint16_t)1;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8002796:	3301      	adds	r3, #1
 8002798:	b29a      	uxth	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    if (1U == HandlePtr->config_ptr->syncstart_enable)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027a4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d123      	bne.n	80027f4 <PWM_BC_Start+0x278>
    {
      /** Start CCU8 slices synchronously */
      XMC_SCU_SetCcuTriggerHigh((uint32_t)HandlePtr->config_ptr->syncstart_mask);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027b0:	69db      	ldr	r3, [r3, #28]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7ff fbfa 	bl	8001fac <XMC_SCU_SetCcuTriggerHigh>
      /* Disable the Start trigger function of a slice*/
      XMC_CCU8_SLICE_StartConfig(HandlePtr->phase_ptr[0]->slice_ptr,(XMC_CCU8_SLICE_EVENT_t)XMC_CCU8_SLICE_EVENT_NONE,
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4618      	mov	r0, r3
 80027c0:	2100      	movs	r1, #0
 80027c2:	2201      	movs	r2, #1
 80027c4:	f7fe fc62 	bl	800108c <XMC_CCU8_SLICE_StartConfig>
                         (XMC_CCU8_SLICE_START_MODE_t)XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR);
      XMC_CCU8_SLICE_StartConfig(HandlePtr->phase_ptr[1]->slice_ptr,(XMC_CCU8_SLICE_EVENT_t)XMC_CCU8_SLICE_EVENT_NONE,
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	2100      	movs	r1, #0
 80027d2:	2201      	movs	r2, #1
 80027d4:	f7fe fc5a 	bl	800108c <XMC_CCU8_SLICE_StartConfig>
                         (XMC_CCU8_SLICE_START_MODE_t)XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR);
      XMC_CCU8_SLICE_StartConfig(HandlePtr->phase_ptr[2]->slice_ptr,(XMC_CCU8_SLICE_EVENT_t)XMC_CCU8_SLICE_EVENT_NONE,
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4618      	mov	r0, r3
 80027e0:	2100      	movs	r1, #0
 80027e2:	2201      	movs	r2, #1
 80027e4:	f7fe fc52 	bl	800108c <XMC_CCU8_SLICE_StartConfig>
                         (XMC_CCU8_SLICE_START_MODE_t)XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR);

      /* disable synchronous start of CCU8 slices */
      XMC_SCU_SetCcuTriggerLow((uint32_t)HandlePtr->config_ptr->syncstart_mask);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff fbee 	bl	8001fd0 <XMC_SCU_SetCcuTriggerLow>
    }
    /** Start posif*/
    XMC_POSIF_Start(HandlePtr->posif_module_ptr);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff fbfb 	bl	8001ff4 <XMC_POSIF_Start>
  
    HandlePtr->state = PWM_BC_RUNNING;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2202      	movs	r2, #2
 8002802:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  }
}
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <PWM_BC_SetNextMCPatt>:
  HandlePtr->state = PWM_BC_STOPPED;
}

/* This function writes the next multi channel pattern in shadow register */
void PWM_BC_SetNextMCPatt(PWM_BC_t* const HandlePtr, uint8_t Index)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	460b      	mov	r3, r1
 8002816:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("PWM_BC_SetNextMCPatt:NULL Handle Pointer",
              (HandlePtr != (PWM_BC_t *)NULL));
  XMC_POSIF_MCM_SetMultiChannelPattern
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6918      	ldr	r0, [r3, #16]
  ( 
    HandlePtr->posif_module_ptr, 
    (uint16_t)HandlePtr->mc_pattern[HandlePtr->modulation_type][(Index) +
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
/* This function writes the next multi channel pattern in shadow register */
void PWM_BC_SetNextMCPatt(PWM_BC_t* const HandlePtr, uint8_t Index)
{
  XMC_ASSERT("PWM_BC_SetNextMCPatt:NULL Handle Pointer",
              (HandlePtr != (PWM_BC_t *)NULL));
  XMC_POSIF_MCM_SetMultiChannelPattern
 8002822:	4619      	mov	r1, r3
  ( 
    HandlePtr->posif_module_ptr, 
    (uint16_t)HandlePtr->mc_pattern[HandlePtr->modulation_type][(Index) +
 8002824:	78fb      	ldrb	r3, [r7, #3]
                                        (uint8_t)HandlePtr->direction]
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	f892 2075 	ldrb.w	r2, [r2, #117]	; 0x75
  XMC_ASSERT("PWM_BC_SetNextMCPatt:NULL Handle Pointer",
              (HandlePtr != (PWM_BC_t *)NULL));
  XMC_POSIF_MCM_SetMultiChannelPattern
  ( 
    HandlePtr->posif_module_ptr, 
    (uint16_t)HandlePtr->mc_pattern[HandlePtr->modulation_type][(Index) +
 800282c:	4413      	add	r3, r2
/* This function writes the next multi channel pattern in shadow register */
void PWM_BC_SetNextMCPatt(PWM_BC_t* const HandlePtr, uint8_t Index)
{
  XMC_ASSERT("PWM_BC_SetNextMCPatt:NULL Handle Pointer",
              (HandlePtr != (PWM_BC_t *)NULL));
  XMC_POSIF_MCM_SetMultiChannelPattern
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	0109      	lsls	r1, r1, #4
 8002832:	440b      	add	r3, r1
 8002834:	3340      	adds	r3, #64	; 0x40
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	4413      	add	r3, r2
 800283a:	889b      	ldrh	r3, [r3, #4]
 800283c:	4619      	mov	r1, r3
 800283e:	f7ff fbe5 	bl	800200c <XMC_POSIF_MCM_SetMultiChannelPattern>
  ( 
    HandlePtr->posif_module_ptr, 
    (uint16_t)HandlePtr->mc_pattern[HandlePtr->modulation_type][(Index) +
                                        (uint8_t)HandlePtr->direction]
  );
}
 8002842:	3708      	adds	r7, #8
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <PWM_BC_DutyCycleUpdate>:
void PWM_BC_DutyCycleUpdate
(
  PWM_BC_t* HandlePtr,
  uint16_t dutycycle
)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	460b      	mov	r3, r1
 8002852:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("PWM_BC_DutyCycleUpdate:NULL Handle Pointer",
              (HandlePtr != (PWM_BC_t *)NULL));


  HandlePtr->ph_cmpval[3] = HandlePtr->period - dutycycle;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f8b3 207a 	ldrh.w	r2, [r3, #122]	; 0x7a
 800285a:	887b      	ldrh	r3, [r7, #2]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	b29a      	uxth	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
  HandlePtr->ph_cmpval[2] = dutycycle;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	887a      	ldrh	r2, [r7, #2]
 800286a:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

  XMC_CCU8_SLICE_SetTimerCompareMatch(HandlePtr->phase_ptr[0]->slice_ptr,HandlePtr->config_ptr->phu_cmpch,
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	6818      	ldr	r0, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002878:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
      HandlePtr->ph_cmpval[HandlePtr->ph_cmpflag[0]]);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77


  HandlePtr->ph_cmpval[3] = HandlePtr->period - dutycycle;
  HandlePtr->ph_cmpval[2] = dutycycle;

  XMC_CCU8_SLICE_SetTimerCompareMatch(HandlePtr->phase_ptr[0]->slice_ptr,HandlePtr->config_ptr->phu_cmpch,
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	333c      	adds	r3, #60	; 0x3c
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	4413      	add	r3, r2
 800288a:	889b      	ldrh	r3, [r3, #4]
 800288c:	461a      	mov	r2, r3
 800288e:	f7fe fcdd 	bl	800124c <XMC_CCU8_SLICE_SetTimerCompareMatch>
      HandlePtr->ph_cmpval[HandlePtr->ph_cmpflag[0]]);

  XMC_CCU8_SLICE_SetTimerCompareMatch(HandlePtr->phase_ptr[1]->slice_ptr, HandlePtr->config_ptr->phv_cmpch,
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	6818      	ldr	r0, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800289c:	f893 1036 	ldrb.w	r1, [r3, #54]	; 0x36
      HandlePtr->ph_cmpval[HandlePtr->ph_cmpflag[1]]);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
  HandlePtr->ph_cmpval[2] = dutycycle;

  XMC_CCU8_SLICE_SetTimerCompareMatch(HandlePtr->phase_ptr[0]->slice_ptr,HandlePtr->config_ptr->phu_cmpch,
      HandlePtr->ph_cmpval[HandlePtr->ph_cmpflag[0]]);

  XMC_CCU8_SLICE_SetTimerCompareMatch(HandlePtr->phase_ptr[1]->slice_ptr, HandlePtr->config_ptr->phv_cmpch,
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	333c      	adds	r3, #60	; 0x3c
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	4413      	add	r3, r2
 80028ae:	889b      	ldrh	r3, [r3, #4]
 80028b0:	461a      	mov	r2, r3
 80028b2:	f7fe fccb 	bl	800124c <XMC_CCU8_SLICE_SetTimerCompareMatch>
      HandlePtr->ph_cmpval[HandlePtr->ph_cmpflag[1]]);

  XMC_CCU8_SLICE_SetTimerCompareMatch(HandlePtr->phase_ptr[2]->slice_ptr, HandlePtr->config_ptr->phw_cmpch,
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	6818      	ldr	r0, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028c0:	f893 1037 	ldrb.w	r1, [r3, #55]	; 0x37
      HandlePtr->ph_cmpval[HandlePtr->ph_cmpflag[2]]);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
      HandlePtr->ph_cmpval[HandlePtr->ph_cmpflag[0]]);

  XMC_CCU8_SLICE_SetTimerCompareMatch(HandlePtr->phase_ptr[1]->slice_ptr, HandlePtr->config_ptr->phv_cmpch,
      HandlePtr->ph_cmpval[HandlePtr->ph_cmpflag[1]]);

  XMC_CCU8_SLICE_SetTimerCompareMatch(HandlePtr->phase_ptr[2]->slice_ptr, HandlePtr->config_ptr->phw_cmpch,
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	333c      	adds	r3, #60	; 0x3c
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	4413      	add	r3, r2
 80028d2:	889b      	ldrh	r3, [r3, #4]
 80028d4:	461a      	mov	r2, r3
 80028d6:	f7fe fcb9 	bl	800124c <XMC_CCU8_SLICE_SetTimerCompareMatch>
      HandlePtr->ph_cmpval[HandlePtr->ph_cmpflag[2]]);

  XMC_CCU8_EnableShadowTransfer(HandlePtr->module_ptr,(uint32_t)HandlePtr->config_ptr->shadowtransfer_mask);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80028e6:	4610      	mov	r0, r2
 80028e8:	4619      	mov	r1, r3
 80028ea:	f7ff fb25 	bl	8001f38 <XMC_CCU8_EnableShadowTransfer>
}
 80028ee:	3708      	adds	r7, #8
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <PWM_BC_ModulationForSyncTransfer>:
}

/** This function calculates the compare values based upon multi-channel pattern
 * and modulation type */
void PWM_BC_ModulationForSyncTransfer(PWM_BC_t* HandlePtr)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint16_t mcmval;
  uint16_t mcmshadow;
  XMC_ASSERT("PWM_BC_CmpValCalc:NULL Handle Pointer",
              (HandlePtr != (PWM_BC_t *)NULL));

  mcmval = XMC_POSIF_MCM_GetMultiChannelPattern(HandlePtr->posif_module_ptr);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff fb91 	bl	8002028 <XMC_POSIF_MCM_GetMultiChannelPattern>
 8002906:	4603      	mov	r3, r0
 8002908:	81bb      	strh	r3, [r7, #12]
  mcmshadow = XMC_POSIF_MCM_GetShadowMultiChannelPattern(HandlePtr->posif_module_ptr);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	4618      	mov	r0, r3
 8002910:	f7ff fb98 	bl	8002044 <XMC_POSIF_MCM_GetShadowMultiChannelPattern>
 8002914:	4603      	mov	r3, r0
 8002916:	817b      	strh	r3, [r7, #10]

  if (PWM_BC_SYNCHRONOUS_RECTIFICATION_BALANCED_MOD != HandlePtr->modulation_type)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800291e:	2b03      	cmp	r3, #3
 8002920:	d07e      	beq.n	8002a20 <PWM_BC_ModulationForSyncTransfer+0x12c>
  {
    for (count = (uint8_t)0; count < PWM_BC_MAXPHASE_COUNT; count++)
 8002922:	2300      	movs	r3, #0
 8002924:	73fb      	strb	r3, [r7, #15]
 8002926:	e078      	b.n	8002a1a <PWM_BC_ModulationForSyncTransfer+0x126>
    {
      /* if phase is not conducting */
      if ((uint32_t)0 ==
          (mcmval & (uint32_t)HandlePtr->config_ptr->ph_bothside_compmask[count]))
 8002928:	89ba      	ldrh	r2, [r7, #12]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800292e:	7bfb      	ldrb	r3, [r7, #15]
 8002930:	3302      	adds	r3, #2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	440b      	add	r3, r1
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	4013      	ands	r3, r2
  if (PWM_BC_SYNCHRONOUS_RECTIFICATION_BALANCED_MOD != HandlePtr->modulation_type)
  {
    for (count = (uint8_t)0; count < PWM_BC_MAXPHASE_COUNT; count++)
    {
      /* if phase is not conducting */
      if ((uint32_t)0 ==
 800293a:	2b00      	cmp	r3, #0
 800293c:	d16a      	bne.n	8002a14 <PWM_BC_ModulationForSyncTransfer+0x120>
          (mcmval & (uint32_t)HandlePtr->config_ptr->ph_bothside_compmask[count]))
      {
        /* If high side switch is ON */
        if (HandlePtr->config_ptr->ph_mcpatt_compmask[count] ==
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002942:	7bfa      	ldrb	r2, [r7, #15]
 8002944:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
            (mcmshadow & (uint32_t)HandlePtr->config_ptr->ph_mcpatt_compmask[count]))
 8002948:	8979      	ldrh	r1, [r7, #10]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800294e:	7bf8      	ldrb	r0, [r7, #15]
 8002950:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002954:	400b      	ands	r3, r1
      /* if phase is not conducting */
      if ((uint32_t)0 ==
          (mcmval & (uint32_t)HandlePtr->config_ptr->ph_bothside_compmask[count]))
      {
        /* If high side switch is ON */
        if (HandlePtr->config_ptr->ph_mcpatt_compmask[count] ==
 8002956:	429a      	cmp	r2, r3
 8002958:	d131      	bne.n	80029be <PWM_BC_ModulationForSyncTransfer+0xca>
            (mcmshadow & (uint32_t)HandlePtr->config_ptr->ph_mcpatt_compmask[count]))
        {
          HandlePtr->ph_cmpflag[count] = PWM_BC_COMPARE_INVERSE_DUTY;
 800295a:	7bfb      	ldrb	r3, [r7, #15]
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	4413      	add	r3, r2
 8002960:	2203      	movs	r2, #3
 8002962:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
          XMC_CCU8_SLICE_ConfigureDeadTime(HandlePtr->phase_ptr[count]->slice_ptr,(uint8_t)0);
 8002966:	7bfb      	ldrb	r3, [r7, #15]
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4413      	add	r3, r2
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4618      	mov	r0, r3
 8002974:	2100      	movs	r1, #0
 8002976:	f7fe fcf3 	bl	8001360 <XMC_CCU8_SLICE_ConfigureDeadTime>

          /* For LowSide modulation type, high side switch duty = 100 % => ph_cmpflag = 0
           * For HighSide and Complementary modulation, high side switch duty = period - duty => ph_cmpflag = 3
           */
          if (PWM_BC_LOWSIDE_MOD == HandlePtr->modulation_type)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8002980:	2b01      	cmp	r3, #1
 8002982:	d106      	bne.n	8002992 <PWM_BC_ModulationForSyncTransfer+0x9e>
          {
            HandlePtr->ph_cmpflag[count] = PWM_BC_COMPARE_ZERO;
 8002984:	7bfb      	ldrb	r3, [r7, #15]
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	4413      	add	r3, r2
 800298a:	2200      	movs	r2, #0
 800298c:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 8002990:	e040      	b.n	8002a14 <PWM_BC_ModulationForSyncTransfer+0x120>
          }
          else if (PWM_BC_SYNCHRONOUS_RECTIFICATION_MOD == HandlePtr->modulation_type)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8002998:	2b02      	cmp	r3, #2
 800299a:	d13b      	bne.n	8002a14 <PWM_BC_ModulationForSyncTransfer+0x120>
          {
            /* enable dead time for complementary modulation */
            XMC_CCU8_SLICE_ConfigureDeadTime(HandlePtr->phase_ptr[count]->slice_ptr,HandlePtr->config_ptr->deadtime_control[count]);
 800299c:	7bfb      	ldrb	r3, [r7, #15]
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	4413      	add	r3, r2
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	6819      	ldr	r1, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80029ac:	7bfb      	ldrb	r3, [r7, #15]
 80029ae:	4413      	add	r3, r2
 80029b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80029b4:	4608      	mov	r0, r1
 80029b6:	4619      	mov	r1, r3
 80029b8:	f7fe fcd2 	bl	8001360 <XMC_CCU8_SLICE_ConfigureDeadTime>
 80029bc:	e02a      	b.n	8002a14 <PWM_BC_ModulationForSyncTransfer+0x120>
          {
            /* Do nothing */
          }
        }
        /* if low side switch is ON */
        else if ((HandlePtr->config_ptr->ph_mcpatt_compmask[count] << 1U) ==
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029c2:	7bfa      	ldrb	r2, [r7, #15]
 80029c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029c8:	005a      	lsls	r2, r3, #1
            (mcmshadow & (uint32_t)(HandlePtr->config_ptr->ph_mcpatt_compmask[count] << 1U)))
 80029ca:	8979      	ldrh	r1, [r7, #10]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029d0:	7bf8      	ldrb	r0, [r7, #15]
 80029d2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	400b      	ands	r3, r1
          {
            /* Do nothing */
          }
        }
        /* if low side switch is ON */
        else if ((HandlePtr->config_ptr->ph_mcpatt_compmask[count] << 1U) ==
 80029da:	429a      	cmp	r2, r3
 80029dc:	d11a      	bne.n	8002a14 <PWM_BC_ModulationForSyncTransfer+0x120>
            (mcmshadow & (uint32_t)(HandlePtr->config_ptr->ph_mcpatt_compmask[count] << 1U)))
        {
          HandlePtr->ph_cmpflag[count] = PWM_BC_COMPARE_PERIOD;
 80029de:	7bfb      	ldrb	r3, [r7, #15]
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	4413      	add	r3, r2
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
          /* disable dead time */
          XMC_CCU8_SLICE_ConfigureDeadTime(HandlePtr->phase_ptr[count]->slice_ptr,(uint8_t)0);
 80029ea:	7bfb      	ldrb	r3, [r7, #15]
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4413      	add	r3, r2
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4618      	mov	r0, r3
 80029f8:	2100      	movs	r1, #0
 80029fa:	f7fe fcb1 	bl	8001360 <XMC_CCU8_SLICE_ConfigureDeadTime>

          /* For HighSide and Complementary modulation, low side switch duty = 100 % => ph_cmpflag = 1
           * For low side modulation type, low side switch duty = period - duty => ph_cmpflag = 3
           */
          if (PWM_BC_LOWSIDE_MOD == HandlePtr->modulation_type)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d105      	bne.n	8002a14 <PWM_BC_ModulationForSyncTransfer+0x120>
          {
            HandlePtr->ph_cmpflag[count] = PWM_BC_COMPARE_DUTY;
 8002a08:	7bfb      	ldrb	r3, [r7, #15]
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	2202      	movs	r2, #2
 8002a10:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
  mcmval = XMC_POSIF_MCM_GetMultiChannelPattern(HandlePtr->posif_module_ptr);
  mcmshadow = XMC_POSIF_MCM_GetShadowMultiChannelPattern(HandlePtr->posif_module_ptr);

  if (PWM_BC_SYNCHRONOUS_RECTIFICATION_BALANCED_MOD != HandlePtr->modulation_type)
  {
    for (count = (uint8_t)0; count < PWM_BC_MAXPHASE_COUNT; count++)
 8002a14:	7bfb      	ldrb	r3, [r7, #15]
 8002a16:	3301      	adds	r3, #1
 8002a18:	73fb      	strb	r3, [r7, #15]
 8002a1a:	7bfb      	ldrb	r3, [r7, #15]
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d983      	bls.n	8002928 <PWM_BC_ModulationForSyncTransfer+0x34>
      {
        /* Do nothing */
      }
    }
  }
}
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop

08002a28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a2c:	4b04      	ldr	r3, [pc, #16]	; (8002a40 <__NVIC_GetPriorityGrouping+0x18>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a34:	0a1b      	lsrs	r3, r3, #8
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	e000ed00 	.word	0xe000ed00

08002a44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	db0b      	blt.n	8002a6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002a56:	4908      	ldr	r1, [pc, #32]	; (8002a78 <__NVIC_EnableIRQ+0x34>)
 8002a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5c:	095b      	lsrs	r3, r3, #5
 8002a5e:	79fa      	ldrb	r2, [r7, #7]
 8002a60:	f002 021f 	and.w	r2, r2, #31
 8002a64:	2001      	movs	r0, #1
 8002a66:	fa00 f202 	lsl.w	r2, r0, r2
 8002a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	e000e100 	.word	0xe000e100

08002a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	4603      	mov	r3, r0
 8002a84:	6039      	str	r1, [r7, #0]
 8002a86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	db0a      	blt.n	8002aa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a90:	490d      	ldr	r1, [pc, #52]	; (8002ac8 <__NVIC_SetPriority+0x4c>)
 8002a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a96:	683a      	ldr	r2, [r7, #0]
 8002a98:	b2d2      	uxtb	r2, r2
 8002a9a:	0092      	lsls	r2, r2, #2
 8002a9c:	b2d2      	uxtb	r2, r2
 8002a9e:	440b      	add	r3, r1
 8002aa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8002aa4:	e00a      	b.n	8002abc <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aa6:	4909      	ldr	r1, [pc, #36]	; (8002acc <__NVIC_SetPriority+0x50>)
 8002aa8:	79fb      	ldrb	r3, [r7, #7]
 8002aaa:	f003 030f 	and.w	r3, r3, #15
 8002aae:	3b04      	subs	r3, #4
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	b2d2      	uxtb	r2, r2
 8002ab4:	0092      	lsls	r2, r2, #2
 8002ab6:	b2d2      	uxtb	r2, r2
 8002ab8:	440b      	add	r3, r1
 8002aba:	761a      	strb	r2, [r3, #24]
  }
}
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	e000e100 	.word	0xe000e100
 8002acc:	e000ed00 	.word	0xe000ed00

08002ad0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b089      	sub	sp, #36	; 0x24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f003 0307 	and.w	r3, r3, #7
 8002ae2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	f1c3 0307 	rsb	r3, r3, #7
 8002aea:	2b06      	cmp	r3, #6
 8002aec:	bf28      	it	cs
 8002aee:	2306      	movcs	r3, #6
 8002af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	3306      	adds	r3, #6
 8002af6:	2b06      	cmp	r3, #6
 8002af8:	d902      	bls.n	8002b00 <NVIC_EncodePriority+0x30>
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	3b01      	subs	r3, #1
 8002afe:	e000      	b.n	8002b02 <NVIC_EncodePriority+0x32>
 8002b00:	2300      	movs	r3, #0
 8002b02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	2201      	movs	r2, #1
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	1e5a      	subs	r2, r3, #1
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	401a      	ands	r2, r3
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	2101      	movs	r1, #1
 8002b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b1e:	1e59      	subs	r1, r3, #1
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8002b24:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3724      	adds	r7, #36	; 0x24
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop

08002b34 <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	b25b      	sxtb	r3, r3
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7ff ff7e 	bl	8002a44 <__NVIC_EnableIRQ>
}
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop

08002b50 <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
 8002b50:	b590      	push	{r4, r7, lr}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	781c      	ldrb	r4, [r3, #0]
 8002b5c:	f7ff ff64 	bl	8002a28 <__NVIC_GetPriorityGrouping>
 8002b60:	4601      	mov	r1, r0
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	785b      	ldrb	r3, [r3, #1]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8002b66:	461a      	mov	r2, r3
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	789b      	ldrb	r3, [r3, #2]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8002b6c:	4608      	mov	r0, r1
 8002b6e:	4611      	mov	r1, r2
 8002b70:	461a      	mov	r2, r3
 8002b72:	f7ff ffad 	bl	8002ad0 <NVIC_EncodePriority>
 8002b76:	4602      	mov	r2, r0
 8002b78:	b263      	sxtb	r3, r4
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	4611      	mov	r1, r2
 8002b7e:	f7ff ff7d 	bl	8002a7c <__NVIC_SetPriority>
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
  if (handler->enable_at_init == true)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	78db      	ldrb	r3, [r3, #3]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d002      	beq.n	8002b90 <INTERRUPT_Init+0x40>
  {
    INTERRUPT_Enable(handler);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f7ff ffd2 	bl	8002b34 <INTERRUPT_Enable>
  {
    INTERRUPT_Enable(handler);
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd90      	pop	{r4, r7, pc}
 8002b9a:	bf00      	nop

08002b9c <XMC_POSIF_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_POSIF_Stop() \n\n\n
 */
__STATIC_INLINE void XMC_POSIF_SetMode(XMC_POSIF_t *const peripheral, const XMC_POSIF_MODE_t mode)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	70fb      	strb	r3, [r7, #3]
  peripheral->PCONF = ((peripheral->PCONF & ~(uint32_t)(POSIF_PCONF_FSEL_Msk)) |
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f023 0203 	bic.w	r2, r3, #3
                     (((uint32_t)mode << POSIF_PCONF_FSEL_Pos) & (uint32_t)POSIF_PCONF_FSEL_Msk));
 8002bb0:	78fb      	ldrb	r3, [r7, #3]
 8002bb2:	f003 0303 	and.w	r3, r3, #3
 * \par<b>Related APIs:</b><BR>
 * XMC_POSIF_Stop() \n\n\n
 */
__STATIC_INLINE void XMC_POSIF_SetMode(XMC_POSIF_t *const peripheral, const XMC_POSIF_MODE_t mode)
{
  peripheral->PCONF = ((peripheral->PCONF & ~(uint32_t)(POSIF_PCONF_FSEL_Msk)) |
 8002bb6:	431a      	orrs	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	601a      	str	r2, [r3, #0]
                     (((uint32_t)mode << POSIF_PCONF_FSEL_Pos) & (uint32_t)POSIF_PCONF_FSEL_Msk));
}
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop

08002bc8 <GLOBAL_POSIF_Init>:

/**
 * This function initializes the global_posif app and low level app.
 */
GLOBAL_POSIF_STATUS_t GLOBAL_POSIF_Init(GLOBAL_POSIF_t*const HandlePtr)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  GLOBAL_POSIF_STATUS_t status = GLOBAL_POSIF_STATUS_SUCCESS;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	73fb      	strb	r3, [r7, #15]

  if (GLOBAL_POSIF_STATE_UNINITIALISED == HandlePtr->state)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	791b      	ldrb	r3, [r3, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d10d      	bne.n	8002bf8 <GLOBAL_POSIF_Init+0x30>
  {  
    /*Enable the posif Module*/
    XMC_POSIF_Enable(HandlePtr->moduleptr);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7fe fc31 	bl	8001448 <XMC_POSIF_Enable>
    XMC_POSIF_SetMode(HandlePtr->moduleptr, XMC_POSIF_MODE_MCM);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	2102      	movs	r1, #2
 8002bee:	f7ff ffd5 	bl	8002b9c <XMC_POSIF_SetMode>

    HandlePtr->state = GLOBAL_POSIF_STATE_INITIALISED;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	711a      	strb	r2, [r3, #4]
  }

  return status ;
 8002bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop

08002c04 <XMC_CCU8_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR> 
 *  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU8_GIDLC_SPRB_Msk;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	60da      	str	r2, [r3, #12]
}
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop

08002c24 <GLOBAL_CCU8_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU8_STATUS_t GLOBAL_CCU8_Init(GLOBAL_CCU8_t* handle)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU8_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	7b5b      	ldrb	r3, [r3, #13]
 8002c30:	f083 0301 	eor.w	r3, r3, #1
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00f      	beq.n	8002c5a <GLOBAL_CCU8_Init+0x36>
  {
    /* Enable CCU8 module */
    XMC_CCU8_Init(handle->module_ptr,handle->mcs_action);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	689a      	ldr	r2, [r3, #8]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	7b1b      	ldrb	r3, [r3, #12]
 8002c42:	4610      	mov	r0, r2
 8002c44:	4619      	mov	r1, r3
 8002c46:	f7fe f9c9 	bl	8000fdc <XMC_CCU8_Init>
    /* Start the prescaler */
    XMC_CCU8_StartPrescaler(handle->module_ptr);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7ff ffd8 	bl	8002c04 <XMC_CCU8_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU8_STATUS_SUCCESS);
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	60da      	str	r2, [r3, #12]
}
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop

08002c84 <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	7b5b      	ldrb	r3, [r3, #13]
 8002c90:	f083 0301 	eor.w	r3, r3, #1
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00f      	beq.n	8002cba <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	689a      	ldr	r2, [r3, #8]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	7b1b      	ldrb	r3, [r3, #12]
 8002ca2:	4610      	mov	r0, r2
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	f7fe f889 	bl	8000dbc <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7ff ffd8 	bl	8002c64 <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3708      	adds	r7, #8
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <XMC_VADC_GLOBAL_DisablePostCalibration>:
 * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
 * None
 */

__STATIC_INLINE void XMC_VADC_GLOBAL_DisablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, uint32_t group_number)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GLOBAL_DisablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_number));
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	3310      	adds	r3, #16
 8002cd8:	4619      	mov	r1, r3
 8002cda:	2301      	movs	r3, #1
 8002cdc:	408b      	lsls	r3, r1
 8002cde:	431a      	orrs	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <GLOBAL_ADC_Init>:
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/**
 * This function initializes all instances of the ADC Global APP and low level app.
 */
GLOBAL_ADC_STATUS_t GLOBAL_ADC_Init(GLOBAL_ADC_t *const handle_ptr)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_ADC_Init:Invalid handle_ptr", (handle_ptr != NULL))
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  uint32_t group_index;
#endif

  if (GLOBAL_ADC_UNINITIALIZED == handle_ptr->init_state)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	7e1b      	ldrb	r3, [r3, #24]
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d149      	bne.n	8002d94 <GLOBAL_ADC_Init+0xa4>
  {  
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	695a      	ldr	r2, [r3, #20]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	4610      	mov	r0, r2
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	f7fe fc3c 	bl	8001588 <XMC_VADC_GLOBAL_Init>

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 8002d10:	2300      	movs	r3, #0
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	e02f      	b.n	8002d76 <GLOBAL_ADC_Init+0x86>
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d1e:	6819      	ldr	r1, [r3, #0]
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	4608      	mov	r0, r1
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	f7fe fccd 	bl	80016cc <XMC_VADC_GROUP_Init>
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);

      /* Switch on the converter of the Group[group_index]*/
      XMC_VADC_GROUP_SetPowerMode(handle_ptr->group_ptrs_array[group_index]->group_handle,
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	68fa      	ldr	r2, [r7, #12]
 8002d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	2103      	movs	r1, #3
 8002d40:	f7fe fd54 	bl	80017ec <XMC_VADC_GROUP_SetPowerMode>
                                  XMC_VADC_GROUP_POWERMODE_NORMAL);

      /* Disable the post calibration option for the respective group*/
      if ((bool)false == handle_ptr->group_ptrs_array[group_index]->post_calibration)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d4c:	7a1b      	ldrb	r3, [r3, #8]
 8002d4e:	f083 0301 	eor.w	r3, r3, #1
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d005      	beq.n	8002d64 <GLOBAL_ADC_Init+0x74>
      {
        XMC_VADC_GLOBAL_DisablePostCalibration(handle_ptr->module_ptr,group_index);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	68f9      	ldr	r1, [r7, #12]
 8002d60:	f7ff ffb0 	bl	8002cc4 <XMC_VADC_GLOBAL_DisablePostCalibration>

#if(XMC_VADC_SHS_AVAILABLE == 1U)
      XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(handle_ptr->global_shs_ptr, (XMC_VADC_GROUP_INDEX_t)group_index);
#endif

      handle_ptr->group_ptrs_array[group_index]->state = GLOBAL_ADC_SUCCESS;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	68fa      	ldr	r2, [r7, #12]
 8002d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	725a      	strb	r2, [r3, #9]
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	3301      	adds	r3, #1
 8002d74:	60fb      	str	r3, [r7, #12]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2b03      	cmp	r3, #3
 8002d7a:	d9cc      	bls.n	8002d16 <GLOBAL_ADC_Init+0x26>
#endif
#endif /* _XMC_VADC_GROUP_AVAILABLE_ */
#if(XMC_VADC_SHS_AVAILABLE == 1U)
    XMC_VADC_GLOBAL_SHS_SetAnalogReference(handle_ptr->global_shs_ptr, GLOBAL_ADC_AREF_VALUE);
#endif
    if((bool)true == handle_ptr->enable_startup_calibration)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	7e5b      	ldrb	r3, [r3, #25]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d004      	beq.n	8002d8e <GLOBAL_ADC_Init+0x9e>
    {
    	XMC_VADC_GLOBAL_StartupCalibration(handle_ptr->module_ptr);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	695b      	ldr	r3, [r3, #20]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7fe fc4b 	bl	8001624 <XMC_VADC_GLOBAL_StartupCalibration>
    }
    handle_ptr->init_state = GLOBAL_ADC_SUCCESS;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	761a      	strb	r2, [r3, #24]
  }
  return (handle_ptr->init_state);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	7e1b      	ldrb	r3, [r3, #24]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <EVENT_GENERATOR_Init>:

/*
 * This function Initializes a EVENT_GENERATOR APP instances based on user configuration.
 */
EVENT_GENERATOR_STATUS_t EVENT_GENERATOR_Init(EVENT_GENERATOR_t *const handle)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Checking for null handle */
  XMC_ASSERT("EVENT_GENERATOR_Init:handle NULL" , (handle != NULL));
  
  /* Checking for initialization state of the instance */
  if (false == handle->init_status)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	7b5b      	ldrb	r3, [r3, #13]
 8002dac:	f083 0301 	eor.w	r3, r3, #1
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d012      	beq.n	8002ddc <EVENT_GENERATOR_Init+0x3c>
  {
    /* Hardware initialization based on UI */
    XMC_ERU_OGU_Init(handle->eru, handle->channel, handle->config);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6819      	ldr	r1, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	7b1a      	ldrb	r2, [r3, #12]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	4608      	mov	r0, r1
 8002dc4:	4611      	mov	r1, r2
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	f7fe fb08 	bl	80013dc <XMC_ERU_OGU_Init>
    #if (EVENT_GENERATOR_NMI_SUPPORTED == 1U)
    /* Promote the eru event as NMI, Applicable only for XMC4000 devices */
    XMC_SCU_INTERRUPT_EnableNmiRequest(handle->nmi_eru_msk);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7fd fc45 	bl	8000660 <XMC_SCU_INTERRUPT_EnableNmiRequest>
    #endif
    /* Update the init status of the instance */
    handle->init_status = true;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	735a      	strb	r2, [r3, #13]
  }
  
  return EVENT_GENERATOR_STATUS_SUCCESS;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop

08002de8 <EVENT_DETECTOR_Init>:

/*
 * This function Initializes a EVENT_DETECTOR APP instances (ERSx+ETLx) based on user configuration.
 */
EVENT_DETECTOR_STATUS_t EVENT_DETECTOR_Init(EVENT_DETECTOR_t *const handle)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  /* Checking for null handle */
  XMC_ASSERT("EVENT_DETECTOR_Init:handle NULL" , (handle != NULL));

  /* Checking for initialization state of the instance */
  if (false == handle->init_status)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	7b1b      	ldrb	r3, [r3, #12]
 8002df4:	f083 0301 	eor.w	r3, r3, #1
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00d      	beq.n	8002e1a <EVENT_DETECTOR_Init+0x32>
  {
    /* Hardware initialization based on UI */
    XMC_ERU_ETL_Init(handle->eru, handle->channel, handle->config);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6819      	ldr	r1, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	791a      	ldrb	r2, [r3, #4]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	4608      	mov	r0, r1
 8002e0c:	4611      	mov	r1, r2
 8002e0e:	461a      	mov	r2, r3
 8002e10:	f7fe fabe 	bl	8001390 <XMC_ERU_ETL_Init>
    /* Update the init status of the instance */
    handle->init_status = true;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	731a      	strb	r2, [r3, #12]
  }
  
  return EVENT_DETECTOR_STATUS_SUCCESS;
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3708      	adds	r7, #8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6819      	ldr	r1, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	7c1a      	ldrb	r2, [r3, #16]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	3304      	adds	r3, #4
 8002e38:	4608      	mov	r0, r1
 8002e3a:	4611      	mov	r1, r2
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	f7fd fac5 	bl	80003cc <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6819      	ldr	r1, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	7c1a      	ldrb	r2, [r3, #16]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	7c5b      	ldrb	r3, [r3, #17]
 8002e4e:	4608      	mov	r0, r1
 8002e50:	4611      	mov	r1, r2
 8002e52:	461a      	mov	r2, r3
 8002e54:	f7fe fad6 	bl	8001404 <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop

08002e64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f003 0307 	and.w	r3, r3, #7
 8002e72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e74:	4b0c      	ldr	r3, [pc, #48]	; (8002ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e7a:	68ba      	ldr	r2, [r7, #8]
 8002e7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e80:	4013      	ands	r3, r2
 8002e82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8002e8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e94:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8002e96:	4a04      	ldr	r2, [pc, #16]	; (8002ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	60d3      	str	r3, [r2, #12]
}
 8002e9c:	3714      	adds	r7, #20
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	e000ed00 	.word	0xe000ed00

08002eac <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 8002eb2:	2001      	movs	r0, #1
 8002eb4:	f7ff ffd6 	bl	8002e64 <__NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002eb8:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 8002eba:	4b21      	ldr	r3, [pc, #132]	; (8002f40 <SystemCoreSetup+0x94>)
 8002ebc:	4a21      	ldr	r2, [pc, #132]	; (8002f44 <SystemCoreSetup+0x98>)
 8002ebe:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002ec0:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8002ec4:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8002ec6:	4a1e      	ldr	r2, [pc, #120]	; (8002f40 <SystemCoreSetup+0x94>)
 8002ec8:	4b1d      	ldr	r3, [pc, #116]	; (8002f40 <SystemCoreSetup+0x94>)
 8002eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ece:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ed2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 8002ed6:	4b1c      	ldr	r3, [pc, #112]	; (8002f48 <SystemCoreSetup+0x9c>)
 8002ed8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002edc:	3314      	adds	r3, #20
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f023 030f 	bic.w	r3, r3, #15
 8002ee8:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f043 0303 	orr.w	r3, r3, #3
 8002ef0:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8002ef2:	4b15      	ldr	r3, [pc, #84]	; (8002f48 <SystemCoreSetup+0x9c>)
 8002ef4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ef8:	3314      	adds	r3, #20
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 8002efe:	4a10      	ldr	r2, [pc, #64]	; (8002f40 <SystemCoreSetup+0x94>)
 8002f00:	4b0f      	ldr	r3, [pc, #60]	; (8002f40 <SystemCoreSetup+0x94>)
 8002f02:	695b      	ldr	r3, [r3, #20]
 8002f04:	f023 0310 	bic.w	r3, r3, #16
 8002f08:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 8002f0a:	4a0d      	ldr	r2, [pc, #52]	; (8002f40 <SystemCoreSetup+0x94>)
 8002f0c:	4b0c      	ldr	r3, [pc, #48]	; (8002f40 <SystemCoreSetup+0x94>)
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	f023 0308 	bic.w	r3, r3, #8
 8002f14:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002f16:	4a0a      	ldr	r2, [pc, #40]	; (8002f40 <SystemCoreSetup+0x94>)
 8002f18:	4b09      	ldr	r3, [pc, #36]	; (8002f40 <SystemCoreSetup+0x94>)
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f20:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 8002f22:	4a07      	ldr	r2, [pc, #28]	; (8002f40 <SystemCoreSetup+0x94>)
 8002f24:	4b06      	ldr	r3, [pc, #24]	; (8002f40 <SystemCoreSetup+0x94>)
 8002f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f28:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002f2c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 8002f2e:	4a04      	ldr	r2, [pc, #16]	; (8002f40 <SystemCoreSetup+0x94>)
 8002f30:	4b03      	ldr	r3, [pc, #12]	; (8002f40 <SystemCoreSetup+0x94>)
 8002f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f38:	6253      	str	r3, [r2, #36]	; 0x24
}
 8002f3a:	3708      	adds	r7, #8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	e000ed00 	.word	0xe000ed00
 8002f44:	08000000 	.word	0x08000000
 8002f48:	58001000 	.word	0x58001000

08002f4c <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 8002f54:	2300      	movs	r3, #0
 8002f56:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	701a      	strb	r2, [r3, #0]

  return (status);
 8002f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3714      	adds	r7, #20
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 8002f70:	4b02      	ldr	r3, [pc, #8]	; (8002f7c <OSCHP_GetFrequency+0x10>)
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr
 8002f7c:	00b71b00 	.word	0x00b71b00

08002f80 <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 8002f80:	b5b0      	push	{r4, r5, r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 8002f86:	4b12      	ldr	r3, [pc, #72]	; (8002fd0 <SystemCoreClockSetup+0x50>)
 8002f88:	1d3c      	adds	r4, r7, #4
 8002f8a:	461d      	mov	r5, r3
 8002f8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f90:	682b      	ldr	r3, [r5, #0]
 8002f92:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 8002f94:	1d3b      	adds	r3, r7, #4
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7fd faec 	bl	8000574 <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 8002f9c:	2000      	movs	r0, #0
 8002f9e:	f7fd fbe9 	bl	8000774 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 8002fa2:	2000      	movs	r0, #0
 8002fa4:	f7fd fb9e 	bl	80006e4 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 8002fa8:	2004      	movs	r0, #4
 8002faa:	f7fd fc6f 	bl	800088c <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 8002fae:	2001      	movs	r0, #1
 8002fb0:	2120      	movs	r1, #32
 8002fb2:	f7fd fcb7 	bl	8000924 <XMC_SCU_CLOCK_StartUsbPll>

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 8002fb6:	2000      	movs	r0, #0
 8002fb8:	f7fd fba8 	bl	800070c <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 8002fbc:	2001      	movs	r0, #1
 8002fbe:	f7fd fc8d 	bl	80008dc <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 8002fc2:	2001      	movs	r0, #1
 8002fc4:	f7fd fc76 	bl	80008b4 <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 8002fc8:	3718      	adds	r7, #24
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bdb0      	pop	{r4, r5, r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	08009a30 	.word	0x08009a30

08002fd4 <XMC_GPIO_SetOutputLevel>:
 *
 */


__STATIC_INLINE void XMC_GPIO_SetOutputLevel(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_OUTPUT_LEVEL_t level)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	460b      	mov	r3, r1
 8002fde:	607a      	str	r2, [r7, #4]
 8002fe0:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid output level", XMC_GPIO_CHECK_OUTPUT_LEVEL(level));
  
  port->OMR = (uint32_t)level << pin;
 8002fe2:	7afb      	ldrb	r3, [r7, #11]
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	409a      	lsls	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	605a      	str	r2, [r3, #4]
}
 8002fec:	3714      	adds	r7, #20
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop

08002ff8 <BUS_IO_Init>:
* @param handle_ptr Pointer pointing to APP data structure.
* @return BUS_IO_STATUS_t BUS_IO APP status.
*/

BUS_IO_STATUS_t BUS_IO_Init(BUS_IO_t *const handle_ptr)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  uint8_t i;

  XMC_ASSERT("BUS_IO_Init: handle_ptr null pointer", handle_ptr != NULL);

  if ((bool)false == handle_ptr->initialized)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	7c5b      	ldrb	r3, [r3, #17]
 8003004:	f083 0301 	eor.w	r3, r3, #1
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d020      	beq.n	8003050 <BUS_IO_Init+0x58>
  {
    /* Iterate the list of pins initializing the pin according to the gpio_config */
    for (i = 0U; i < handle_ptr->number_of_pins; i++)
 800300e:	2300      	movs	r3, #0
 8003010:	73fb      	strb	r3, [r7, #15]
 8003012:	e015      	b.n	8003040 <BUS_IO_Init+0x48>
    {
      /* Initializes input / output characteristics */
      XMC_GPIO_Init(handle_ptr->pin_array[i].gpio_port, handle_ptr->pin_array[i].gpio_pin, &handle_ptr->gpio_config);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	7bfb      	ldrb	r3, [r7, #15]
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	4413      	add	r3, r2
 800301e:	6819      	ldr	r1, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	7bfb      	ldrb	r3, [r7, #15]
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	4413      	add	r3, r2
 800302a:	791a      	ldrb	r2, [r3, #4]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	3304      	adds	r3, #4
 8003030:	4608      	mov	r0, r1
 8003032:	4611      	mov	r1, r2
 8003034:	461a      	mov	r2, r3
 8003036:	f7fd f9c9 	bl	80003cc <XMC_GPIO_Init>
  XMC_ASSERT("BUS_IO_Init: handle_ptr null pointer", handle_ptr != NULL);

  if ((bool)false == handle_ptr->initialized)
  {
    /* Iterate the list of pins initializing the pin according to the gpio_config */
    for (i = 0U; i < handle_ptr->number_of_pins; i++)
 800303a:	7bfb      	ldrb	r3, [r7, #15]
 800303c:	3301      	adds	r3, #1
 800303e:	73fb      	strb	r3, [r7, #15]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	7c1b      	ldrb	r3, [r3, #16]
 8003044:	7bfa      	ldrb	r2, [r7, #15]
 8003046:	429a      	cmp	r2, r3
 8003048:	d3e4      	bcc.n	8003014 <BUS_IO_Init+0x1c>
    {
      /* Initializes input / output characteristics */
      XMC_GPIO_Init(handle_ptr->pin_array[i].gpio_port, handle_ptr->pin_array[i].gpio_pin, &handle_ptr->gpio_config);
    }
    handle_ptr->initialized = (bool)true;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2201      	movs	r2, #1
 800304e:	745a      	strb	r2, [r3, #17]
  }
  return (BUS_IO_STATUS_OK);
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop

0800305c <BUS_IO_Write>:
  return(count);
}

/* Function to set the pins bus state */
void BUS_IO_Write(BUS_IO_t *const handle_ptr, const uint16_t data)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	460b      	mov	r3, r1
 8003066:	807b      	strh	r3, [r7, #2]
  uint8_t i;
  const BUS_IO_PORT_PIN_t *bus_io_port_pin;

  XMC_ASSERT("BUS_IO_Write: handle_ptr null pointer", handle_ptr != NULL);

  bus_io_port_pin = handle_ptr->pin_array;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	60bb      	str	r3, [r7, #8]
  /* Iterate the list of pins setting the pin state according the pin position in the list, , from LSB to MSB */
  for (i = 0U; i < handle_ptr->number_of_pins; i++)
 800306e:	2300      	movs	r3, #0
 8003070:	73fb      	strb	r3, [r7, #15]
 8003072:	e023      	b.n	80030bc <BUS_IO_Write+0x60>
  {
    if (data & (uint16_t)((uint16_t)1 << i))
 8003074:	7bfb      	ldrb	r3, [r7, #15]
 8003076:	2201      	movs	r2, #1
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	b29a      	uxth	r2, r3
 800307e:	887b      	ldrh	r3, [r7, #2]
 8003080:	4013      	ands	r3, r2
 8003082:	b29b      	uxth	r3, r3
 8003084:	2b00      	cmp	r3, #0
 8003086:	d009      	beq.n	800309c <BUS_IO_Write+0x40>
    {
      XMC_GPIO_SetOutputLevel(bus_io_port_pin->gpio_port, bus_io_port_pin->gpio_pin, XMC_GPIO_OUTPUT_LEVEL_HIGH);
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	791b      	ldrb	r3, [r3, #4]
 8003090:	4610      	mov	r0, r2
 8003092:	4619      	mov	r1, r3
 8003094:	2201      	movs	r2, #1
 8003096:	f7ff ff9d 	bl	8002fd4 <XMC_GPIO_SetOutputLevel>
 800309a:	e009      	b.n	80030b0 <BUS_IO_Write+0x54>
    }
    else
    {
      XMC_GPIO_SetOutputLevel(bus_io_port_pin->gpio_port, bus_io_port_pin->gpio_pin, XMC_GPIO_OUTPUT_LEVEL_LOW);
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	791b      	ldrb	r3, [r3, #4]
 80030a4:	4610      	mov	r0, r2
 80030a6:	4619      	mov	r1, r3
 80030a8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80030ac:	f7ff ff92 	bl	8002fd4 <XMC_GPIO_SetOutputLevel>
    }
   bus_io_port_pin++;
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	3308      	adds	r3, #8
 80030b4:	60bb      	str	r3, [r7, #8]

  XMC_ASSERT("BUS_IO_Write: handle_ptr null pointer", handle_ptr != NULL);

  bus_io_port_pin = handle_ptr->pin_array;
  /* Iterate the list of pins setting the pin state according the pin position in the list, , from LSB to MSB */
  for (i = 0U; i < handle_ptr->number_of_pins; i++)
 80030b6:	7bfb      	ldrb	r3, [r7, #15]
 80030b8:	3301      	adds	r3, #1
 80030ba:	73fb      	strb	r3, [r7, #15]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	7c1b      	ldrb	r3, [r3, #16]
 80030c0:	7bfa      	ldrb	r2, [r7, #15]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d3d6      	bcc.n	8003074 <BUS_IO_Write+0x18>
    {
      XMC_GPIO_SetOutputLevel(bus_io_port_pin->gpio_port, bus_io_port_pin->gpio_pin, XMC_GPIO_OUTPUT_LEVEL_LOW);
    }
   bus_io_port_pin++;
  }
}
 80030c6:	3710      	adds	r7, #16
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030d0:	4b04      	ldr	r3, [pc, #16]	; (80030e4 <__NVIC_GetPriorityGrouping+0x18>)
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80030d8:	0a1b      	lsrs	r3, r3, #8
}
 80030da:	4618      	mov	r0, r3
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr
 80030e4:	e000ed00 	.word	0xe000ed00

080030e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	4603      	mov	r3, r0
 80030f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	db0b      	blt.n	8003112 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80030fa:	4908      	ldr	r1, [pc, #32]	; (800311c <__NVIC_EnableIRQ+0x34>)
 80030fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003100:	095b      	lsrs	r3, r3, #5
 8003102:	79fa      	ldrb	r2, [r7, #7]
 8003104:	f002 021f 	and.w	r2, r2, #31
 8003108:	2001      	movs	r0, #1
 800310a:	fa00 f202 	lsl.w	r2, r0, r2
 800310e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr
 800311c:	e000e100 	.word	0xe000e100

08003120 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	4603      	mov	r3, r0
 8003128:	6039      	str	r1, [r7, #0]
 800312a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800312c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003130:	2b00      	cmp	r3, #0
 8003132:	db0a      	blt.n	800314a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003134:	490d      	ldr	r1, [pc, #52]	; (800316c <__NVIC_SetPriority+0x4c>)
 8003136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800313a:	683a      	ldr	r2, [r7, #0]
 800313c:	b2d2      	uxtb	r2, r2
 800313e:	0092      	lsls	r2, r2, #2
 8003140:	b2d2      	uxtb	r2, r2
 8003142:	440b      	add	r3, r1
 8003144:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8003148:	e00a      	b.n	8003160 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800314a:	4909      	ldr	r1, [pc, #36]	; (8003170 <__NVIC_SetPriority+0x50>)
 800314c:	79fb      	ldrb	r3, [r7, #7]
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	3b04      	subs	r3, #4
 8003154:	683a      	ldr	r2, [r7, #0]
 8003156:	b2d2      	uxtb	r2, r2
 8003158:	0092      	lsls	r2, r2, #2
 800315a:	b2d2      	uxtb	r2, r2
 800315c:	440b      	add	r3, r1
 800315e:	761a      	strb	r2, [r3, #24]
  }
}
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	e000e100 	.word	0xe000e100
 8003170:	e000ed00 	.word	0xe000ed00

08003174 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003174:	b480      	push	{r7}
 8003176:	b089      	sub	sp, #36	; 0x24
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f003 0307 	and.w	r3, r3, #7
 8003186:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	f1c3 0307 	rsb	r3, r3, #7
 800318e:	2b06      	cmp	r3, #6
 8003190:	bf28      	it	cs
 8003192:	2306      	movcs	r3, #6
 8003194:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	3306      	adds	r3, #6
 800319a:	2b06      	cmp	r3, #6
 800319c:	d902      	bls.n	80031a4 <NVIC_EncodePriority+0x30>
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	3b01      	subs	r3, #1
 80031a2:	e000      	b.n	80031a6 <NVIC_EncodePriority+0x32>
 80031a4:	2300      	movs	r3, #0
 80031a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	2201      	movs	r2, #1
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	1e5a      	subs	r2, r3, #1
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	401a      	ands	r2, r3
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	2101      	movs	r1, #1
 80031be:	fa01 f303 	lsl.w	r3, r1, r3
 80031c2:	1e59      	subs	r1, r3, #1
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80031c8:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3724      	adds	r7, #36	; 0x24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop

080031d8 <XMC_VADC_GLOBAL_BackgroundTriggerConversion>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerConversion(XMC_VADC_GLOBAL_t *const global_ptr)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerConversion:Wrong Module Pointer", (global_ptr == VADC))
  global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_LDEV_Msk;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80031e6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop

080031fc <XMC_VADC_GLOBAL_BackgroundAddChannelToSequence>:
 *  XMC_VADC_GLOBAL_BackgroundAddMultipleChannels()<BR>
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(XMC_VADC_GLOBAL_t *const global_ptr,
                                                                    const uint32_t grp_num,
                                                                    const uint32_t ch_num)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Group Number",((grp_num) < XMC_VADC_MAXIMUM_NUM_GROUPS))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Channel Number",
             ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))

  global_ptr->BRSSEL[grp_num] |= (uint32_t)((uint32_t)1 << ch_num);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	68ba      	ldr	r2, [r7, #8]
 800320c:	3260      	adds	r2, #96	; 0x60
 800320e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2101      	movs	r1, #1
 8003216:	fa01 f303 	lsl.w	r3, r1, r3
 800321a:	ea42 0103 	orr.w	r1, r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	68ba      	ldr	r2, [r7, #8]
 8003222:	3260      	adds	r2, #96	; 0x60
 8003224:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8003228:	3714      	adds	r7, #20
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop

08003234 <XMC_VADC_GROUP_ResultInit>:
 * XMC_VADC_GROUP_AddResultToFifo()<BR> XMC_VADC_GROUP_EnableResultEvent()<br> XMC_VADC_GROUP_DisableResultEvent()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_ResultInit(XMC_VADC_GROUP_t *const group_ptr,
                                               const uint32_t res_reg_num,
                                               const XMC_VADC_RESULT_CONFIG_t *config)
{
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_ResultInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->RCR[res_reg_num] = config->g_rcr;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6819      	ldr	r1, [r3, #0]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	68ba      	ldr	r2, [r7, #8]
 8003248:	32a0      	adds	r2, #160	; 0xa0
 800324a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 800324e:	3714      	adds	r7, #20
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <XMC_VADC_GROUP_GetResult>:
 * \par<b>Related APIs:</b><br>
 * XMC_VADC_GROUP_GetDetailedResult().
 */
__STATIC_INLINE XMC_VADC_RESULT_SIZE_t XMC_VADC_GROUP_GetResult(XMC_VADC_GROUP_t *const group_ptr, 
                                                                const uint32_t res_reg)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))

  return ((XMC_VADC_RESULT_SIZE_t)group_ptr->RES[res_reg]);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	32c0      	adds	r2, #192	; 0xc0
 8003268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800326c:	b29b      	uxth	r3, r3
}
 800326e:	4618      	mov	r0, r3
 8003270:	370c      	adds	r7, #12
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop

0800327c <ADC_MEASUREMENT_Init>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialization routine to call ADC LLD API's */
ADC_MEASUREMENT_STATUS_t ADC_MEASUREMENT_Init(ADC_MEASUREMENT_t *const handle_ptr)
{
 800327c:	b590      	push	{r4, r7, lr}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint8_t j;
  ADC_MEASUREMENT_STATUS_t status;

  XMC_ASSERT("ADC_MEASUREMENT_Init:Invalid handle_ptr", (handle_ptr != NULL))

  if (ADC_MEASUREMENT_STATUS_UNINITIALIZED == handle_ptr->init_state)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	7e1b      	ldrb	r3, [r3, #24]
 8003288:	2b02      	cmp	r3, #2
 800328a:	f040 8099 	bne.w	80033c0 <ADC_MEASUREMENT_Init+0x144>
  {
    /* Call the function to initialise Clock and ADC global functional units*/
    status = (ADC_MEASUREMENT_STATUS_t) GLOBAL_ADC_Init(handle_ptr->global_handle);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	4618      	mov	r0, r3
 8003294:	f7ff fd2c 	bl	8002cf0 <GLOBAL_ADC_Init>
 8003298:	4603      	mov	r3, r0
 800329a:	73bb      	strb	r3, [r7, #14]
  
    /*Initialize the Global Conversion class 0*/
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	695a      	ldr	r2, [r3, #20]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	4610      	mov	r0, r2
 80032a8:	6819      	ldr	r1, [r3, #0]
 80032aa:	2200      	movs	r2, #0
 80032ac:	2300      	movs	r3, #0
 80032ae:	f7fe f995 	bl	80015dc <XMC_VADC_GLOBAL_InputClassInit>
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
    		                              XMC_VADC_GROUP_CONV_STD,ADC_MEASUREMENT_ICLASS_NUM_XMC11);
#endif
  
    /* Initialize the Background Scan hardware */
    XMC_VADC_GLOBAL_BackgroundInit(handle_ptr->global_handle->module_ptr, handle_ptr->backgnd_config_handle);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	695a      	ldr	r2, [r3, #20]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	4610      	mov	r0, r2
 80032be:	4619      	mov	r1, r3
 80032c0:	f7fe fab0 	bl	8001824 <XMC_VADC_GLOBAL_BackgroundInit>
#if (XMC_VADC_GROUP_AVAILABLE == 0U)
    /* Initialize the global result register */
    XMC_VADC_GLOBAL_ResultInit(handle_ptr->global_handle->module_ptr,handle_ptr->array->res_handle);
#endif

    for (j = (uint8_t)0; j < (uint8_t)ADC_MEASUREMENT_MAXCHANNELS; j++)
 80032c4:	2300      	movs	r3, #0
 80032c6:	73fb      	strb	r3, [r7, #15]
 80032c8:	e02e      	b.n	8003328 <ADC_MEASUREMENT_Init+0xac>
    {
      indexed = handle_ptr->array->channel_array[j];
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	7bfa      	ldrb	r2, [r7, #15]
 80032d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032d4:	60bb      	str	r3, [r7, #8]
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
      /* Initialize for configured channels*/
      XMC_VADC_GROUP_ChannelInit(indexed->group_handle,(uint32_t)indexed->ch_num, indexed->ch_handle);
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	689a      	ldr	r2, [r3, #8]
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	7b5b      	ldrb	r3, [r3, #13]
 80032de:	4619      	mov	r1, r3
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4610      	mov	r0, r2
 80032e6:	461a      	mov	r2, r3
 80032e8:	f7fe fb1a 	bl	8001920 <XMC_VADC_GROUP_ChannelInit>
  
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	689a      	ldr	r2, [r3, #8]
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	789b      	ldrb	r3, [r3, #2]
 80032f6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	4619      	mov	r1, r3
                                indexed->res_handle);
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	685b      	ldr	r3, [r3, #4]
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
      /* Initialize for configured channels*/
      XMC_VADC_GROUP_ChannelInit(indexed->group_handle,(uint32_t)indexed->ch_num, indexed->ch_handle);
  
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
 8003302:	4610      	mov	r0, r2
 8003304:	461a      	mov	r2, r3
 8003306:	f7ff ff95 	bl	8003234 <XMC_VADC_GROUP_ResultInit>
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	695a      	ldr	r2, [r3, #20]
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	7b1b      	ldrb	r3, [r3, #12]
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 8003314:	4619      	mov	r1, r3
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	7b5b      	ldrb	r3, [r3, #13]
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 800331a:	4610      	mov	r0, r2
 800331c:	461a      	mov	r2, r3
 800331e:	f7ff ff6d 	bl	80031fc <XMC_VADC_GLOBAL_BackgroundAddChannelToSequence>
#if (XMC_VADC_GROUP_AVAILABLE == 0U)
    /* Initialize the global result register */
    XMC_VADC_GLOBAL_ResultInit(handle_ptr->global_handle->module_ptr,handle_ptr->array->res_handle);
#endif

    for (j = (uint8_t)0; j < (uint8_t)ADC_MEASUREMENT_MAXCHANNELS; j++)
 8003322:	7bfb      	ldrb	r3, [r7, #15]
 8003324:	3301      	adds	r3, #1
 8003326:	73fb      	strb	r3, [r7, #15]
 8003328:	7bfb      	ldrb	r3, [r7, #15]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d9cd      	bls.n	80032ca <ADC_MEASUREMENT_Init+0x4e>
        status |= (ADC_MEASUREMENT_STATUS_t) ANALOG_IO_Init(indexed->analog_io_config);
      }
#endif
    }
#if(UC_SERIES != XMC11)
    if ((handle_ptr->backgnd_config_handle->req_src_interrupt) && (handle_ptr->req_src_intr_handle != NULL ))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	7a1b      	ldrb	r3, [r3, #8]
 8003334:	f003 0308 	and.w	r3, r3, #8
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d02c      	beq.n	8003398 <ADC_MEASUREMENT_Init+0x11c>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d028      	beq.n	8003398 <ADC_MEASUREMENT_Init+0x11c>
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	b2dc      	uxtb	r4, r3
 800334e:	f7ff febd 	bl	80030cc <__NVIC_GetPriorityGrouping>
 8003352:	4601      	mov	r1, r0
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	691b      	ldr	r3, [r3, #16]
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 8003358:	685a      	ldr	r2, [r3, #4]
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	691b      	ldr	r3, [r3, #16]
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	4608      	mov	r0, r1
 8003362:	4611      	mov	r1, r2
 8003364:	461a      	mov	r2, r3
 8003366:	f7ff ff05 	bl	8003174 <NVIC_EncodePriority>
 800336a:	4602      	mov	r2, r0
 800336c:	b263      	sxtb	r3, r4
 800336e:	4618      	mov	r0, r3
 8003370:	4611      	mov	r1, r2
 8003372:	f7ff fed5 	bl	8003120 <__NVIC_SetPriority>
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
#endif
      /* Connect background Request Source Event to NVIC node */
      XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(handle_ptr->global_handle->module_ptr,
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	695a      	ldr	r2, [r3, #20]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	7e5b      	ldrb	r3, [r3, #25]
 8003380:	4610      	mov	r0, r2
 8003382:	4619      	mov	r1, r3
 8003384:	f7fe f97e 	bl	8001684 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode>
    		                                         (XMC_VADC_SR_t) handle_ptr->srv_req_node);
    
      /* Enable Background Scan Request source IRQ */
      NVIC_EnableIRQ((IRQn_Type)handle_ptr->req_src_intr_handle->node_id);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	b2db      	uxtb	r3, r3
 8003390:	b25b      	sxtb	r3, r3
 8003392:	4618      	mov	r0, r3
 8003394:	f7ff fea8 	bl	80030e8 <__NVIC_EnableIRQ>
    /* Enable Background Scan Request source IRQ */
    NVIC_EnableIRQ((IRQn_Type)handle_ptr->result_intr_handle->node_id);
#endif
#endif
    /* Mux Configuration is done*/
    if (handle_ptr->mux_config != NULL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	695b      	ldr	r3, [r3, #20]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d002      	beq.n	80033a6 <ADC_MEASUREMENT_Init+0x12a>
    {
    	(handle_ptr->mux_config)();
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	695b      	ldr	r3, [r3, #20]
 80033a4:	4798      	blx	r3
    }
  
    if (handle_ptr->start_conversion != (bool)false)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	7e9b      	ldrb	r3, [r3, #26]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d005      	beq.n	80033ba <ADC_MEASUREMENT_Init+0x13e>
    {
      /* Start conversion manually using load event trigger*/
      XMC_VADC_GLOBAL_BackgroundTriggerConversion(handle_ptr->global_handle->module_ptr);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7ff ff0f 	bl	80031d8 <XMC_VADC_GLOBAL_BackgroundTriggerConversion>
    }
    handle_ptr->init_state = status;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	7bba      	ldrb	r2, [r7, #14]
 80033be:	761a      	strb	r2, [r3, #24]
  }
  return (handle_ptr->init_state);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	7e1b      	ldrb	r3, [r3, #24]
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3714      	adds	r7, #20
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd90      	pop	{r4, r7, pc}

080033cc <ADC_MEASUREMENT_StartConversion>:
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

/* This API will Software trigger ADC Background request source and starts conversion*/
void ADC_MEASUREMENT_StartConversion(ADC_MEASUREMENT_t *const handle_ptr)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("ADC_MEASUREMENT_Start:Invalid handle_ptr", (handle_ptr != NULL))

  /* Generate a load event to start background request source conversion*/
  XMC_VADC_GLOBAL_BackgroundTriggerConversion(handle_ptr->global_handle->module_ptr);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	4618      	mov	r0, r3
 80033dc:	f7ff fefc 	bl	80031d8 <XMC_VADC_GLOBAL_BackgroundTriggerConversion>
}
 80033e0:	3708      	adds	r7, #8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop

080033e8 <ADC_MEASUREMENT_GetResult>:
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
#if(XMC_VADC_GROUP_AVAILABLE == 1U)
/* This API will get the result of a conversion for a specific channel*/
XMC_VADC_RESULT_SIZE_t ADC_MEASUREMENT_GetResult(ADC_MEASUREMENT_CHANNEL_t *const handle_ptr)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  XMC_VADC_RESULT_SIZE_t result;

  XMC_ASSERT("ADC_MEASUREMENT_GetResult:Invalid handle_ptr", (handle_ptr != NULL))

  result = XMC_VADC_GROUP_GetResult(handle_ptr->group_handle, handle_ptr->ch_handle->result_reg_number);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689a      	ldr	r2, [r3, #8]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	789b      	ldrb	r3, [r3, #2]
 80033fa:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	4610      	mov	r0, r2
 8003402:	4619      	mov	r1, r3
 8003404:	f7ff ff28 	bl	8003258 <XMC_VADC_GROUP_GetResult>
 8003408:	4603      	mov	r3, r0
 800340a:	81fb      	strh	r3, [r7, #14]

  return (result);
 800340c:	89fb      	ldrh	r3, [r7, #14]
}
 800340e:	4618      	mov	r0, r3
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop

08003418 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
DAVE_STATUS_t DAVE_Init(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 800341e:	2300      	movs	r3, #0
 8003420:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 8003422:	4871      	ldr	r0, [pc, #452]	; (80035e8 <DAVE_Init+0x1d0>)
 8003424:	f7ff fd92 	bl	8002f4c <CLOCK_XMC4_Init>
 8003428:	4603      	mov	r3, r0
 800342a:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 800342c:	79fb      	ldrb	r3, [r7, #7]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d104      	bne.n	800343c <DAVE_Init+0x24>
  {
	 /**  Initialization of DIGITAL_IO APP instance Hall1 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&Hall1); 
 8003432:	486e      	ldr	r0, [pc, #440]	; (80035ec <DAVE_Init+0x1d4>)
 8003434:	f7ff fcf6 	bl	8002e24 <DIGITAL_IO_Init>
 8003438:	4603      	mov	r3, r0
 800343a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800343c:	79fb      	ldrb	r3, [r7, #7]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d104      	bne.n	800344c <DAVE_Init+0x34>
  {
	 /**  Initialization of DIGITAL_IO APP instance Hall2 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&Hall2); 
 8003442:	486b      	ldr	r0, [pc, #428]	; (80035f0 <DAVE_Init+0x1d8>)
 8003444:	f7ff fcee 	bl	8002e24 <DIGITAL_IO_Init>
 8003448:	4603      	mov	r3, r0
 800344a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800344c:	79fb      	ldrb	r3, [r7, #7]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d104      	bne.n	800345c <DAVE_Init+0x44>
  {
	 /**  Initialization of DIGITAL_IO APP instance LED2 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LED2); 
 8003452:	4868      	ldr	r0, [pc, #416]	; (80035f4 <DAVE_Init+0x1dc>)
 8003454:	f7ff fce6 	bl	8002e24 <DIGITAL_IO_Init>
 8003458:	4603      	mov	r3, r0
 800345a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800345c:	79fb      	ldrb	r3, [r7, #7]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d104      	bne.n	800346c <DAVE_Init+0x54>
  {
	 /**  Initialization of DIGITAL_IO APP instance LED1 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LED1); 
 8003462:	4865      	ldr	r0, [pc, #404]	; (80035f8 <DAVE_Init+0x1e0>)
 8003464:	f7ff fcde 	bl	8002e24 <DIGITAL_IO_Init>
 8003468:	4603      	mov	r3, r0
 800346a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800346c:	79fb      	ldrb	r3, [r7, #7]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d104      	bne.n	800347c <DAVE_Init+0x64>
  {
	 /**  Initialization of INTERRUPT APP instance PeriodMatchInt */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&PeriodMatchInt); 
 8003472:	4862      	ldr	r0, [pc, #392]	; (80035fc <DAVE_Init+0x1e4>)
 8003474:	f7ff fb6c 	bl	8002b50 <INTERRUPT_Init>
 8003478:	4603      	mov	r3, r0
 800347a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800347c:	79fb      	ldrb	r3, [r7, #7]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d104      	bne.n	800348c <DAVE_Init+0x74>
  {
	 /**  Initialization of DIGITAL_IO APP instance BTN_1 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&BTN_1); 
 8003482:	485f      	ldr	r0, [pc, #380]	; (8003600 <DAVE_Init+0x1e8>)
 8003484:	f7ff fcce 	bl	8002e24 <DIGITAL_IO_Init>
 8003488:	4603      	mov	r3, r0
 800348a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800348c:	79fb      	ldrb	r3, [r7, #7]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d104      	bne.n	800349c <DAVE_Init+0x84>
  {
	 /**  Initialization of DIGITAL_IO APP instance BTN_2 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&BTN_2); 
 8003492:	485c      	ldr	r0, [pc, #368]	; (8003604 <DAVE_Init+0x1ec>)
 8003494:	f7ff fcc6 	bl	8002e24 <DIGITAL_IO_Init>
 8003498:	4603      	mov	r3, r0
 800349a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800349c:	79fb      	ldrb	r3, [r7, #7]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d104      	bne.n	80034ac <DAVE_Init+0x94>
  {
	 /**  Initialization of PWM_BC APP instance PWM_BC_0 */
	 init_status = (DAVE_STATUS_t)PWM_BC_Init(&PWM_BC_0); 
 80034a2:	4859      	ldr	r0, [pc, #356]	; (8003608 <DAVE_Init+0x1f0>)
 80034a4:	f7fe feae 	bl	8002204 <PWM_BC_Init>
 80034a8:	4603      	mov	r3, r0
 80034aa:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80034ac:	79fb      	ldrb	r3, [r7, #7]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d104      	bne.n	80034bc <DAVE_Init+0xa4>
  {
	 /**  Initialization of DIGITAL_IO APP instance O_G_EN */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&O_G_EN); 
 80034b2:	4856      	ldr	r0, [pc, #344]	; (800360c <DAVE_Init+0x1f4>)
 80034b4:	f7ff fcb6 	bl	8002e24 <DIGITAL_IO_Init>
 80034b8:	4603      	mov	r3, r0
 80034ba:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80034bc:	79fb      	ldrb	r3, [r7, #7]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d104      	bne.n	80034cc <DAVE_Init+0xb4>
  {
	 /**  Initialization of DIGITAL_IO APP instance I_nFAULT */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&I_nFAULT); 
 80034c2:	4853      	ldr	r0, [pc, #332]	; (8003610 <DAVE_Init+0x1f8>)
 80034c4:	f7ff fcae 	bl	8002e24 <DIGITAL_IO_Init>
 80034c8:	4603      	mov	r3, r0
 80034ca:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80034cc:	79fb      	ldrb	r3, [r7, #7]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d104      	bne.n	80034dc <DAVE_Init+0xc4>
  {
	 /**  Initialization of DIGITAL_IO APP instance Hall3 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&Hall3); 
 80034d2:	4850      	ldr	r0, [pc, #320]	; (8003614 <DAVE_Init+0x1fc>)
 80034d4:	f7ff fca6 	bl	8002e24 <DIGITAL_IO_Init>
 80034d8:	4603      	mov	r3, r0
 80034da:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80034dc:	79fb      	ldrb	r3, [r7, #7]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d104      	bne.n	80034ec <DAVE_Init+0xd4>
  {
	 /**  Initialization of TIMER APP instance LCD_Timer */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&LCD_Timer); 
 80034e2:	484d      	ldr	r0, [pc, #308]	; (8003618 <DAVE_Init+0x200>)
 80034e4:	f7fe fb5c 	bl	8001ba0 <TIMER_Init>
 80034e8:	4603      	mov	r3, r0
 80034ea:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80034ec:	79fb      	ldrb	r3, [r7, #7]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d104      	bne.n	80034fc <DAVE_Init+0xe4>
  {
	 /**  Initialization of DIGITAL_IO APP instance Motor_Start */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&Motor_Start); 
 80034f2:	484a      	ldr	r0, [pc, #296]	; (800361c <DAVE_Init+0x204>)
 80034f4:	f7ff fc96 	bl	8002e24 <DIGITAL_IO_Init>
 80034f8:	4603      	mov	r3, r0
 80034fa:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80034fc:	79fb      	ldrb	r3, [r7, #7]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d104      	bne.n	800350c <DAVE_Init+0xf4>
  {
	 /**  Initialization of DIGITAL_IO APP instance IN_Temp */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&IN_Temp); 
 8003502:	4847      	ldr	r0, [pc, #284]	; (8003620 <DAVE_Init+0x208>)
 8003504:	f7ff fc8e 	bl	8002e24 <DIGITAL_IO_Init>
 8003508:	4603      	mov	r3, r0
 800350a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800350c:	79fb      	ldrb	r3, [r7, #7]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d104      	bne.n	800351c <DAVE_Init+0x104>
  {
	 /**  Initialization of DIGITAL_IO APP instance LCD_Enable */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LCD_Enable); 
 8003512:	4844      	ldr	r0, [pc, #272]	; (8003624 <DAVE_Init+0x20c>)
 8003514:	f7ff fc86 	bl	8002e24 <DIGITAL_IO_Init>
 8003518:	4603      	mov	r3, r0
 800351a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800351c:	79fb      	ldrb	r3, [r7, #7]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d104      	bne.n	800352c <DAVE_Init+0x114>
  {
	 /**  Initialization of DIGITAL_IO APP instance LCD_RS */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LCD_RS); 
 8003522:	4841      	ldr	r0, [pc, #260]	; (8003628 <DAVE_Init+0x210>)
 8003524:	f7ff fc7e 	bl	8002e24 <DIGITAL_IO_Init>
 8003528:	4603      	mov	r3, r0
 800352a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800352c:	79fb      	ldrb	r3, [r7, #7]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d104      	bne.n	800353c <DAVE_Init+0x124>
  {
	 /**  Initialization of INTERRUPT APP instance INT_LCD_Timer */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INT_LCD_Timer); 
 8003532:	483e      	ldr	r0, [pc, #248]	; (800362c <DAVE_Init+0x214>)
 8003534:	f7ff fb0c 	bl	8002b50 <INTERRUPT_Init>
 8003538:	4603      	mov	r3, r0
 800353a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800353c:	79fb      	ldrb	r3, [r7, #7]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d104      	bne.n	800354c <DAVE_Init+0x134>
  {
	 /**  Initialization of BUS_IO APP instance LCD_DATA */
	 init_status = (DAVE_STATUS_t)BUS_IO_Init(&LCD_DATA); 
 8003542:	483b      	ldr	r0, [pc, #236]	; (8003630 <DAVE_Init+0x218>)
 8003544:	f7ff fd58 	bl	8002ff8 <BUS_IO_Init>
 8003548:	4603      	mov	r3, r0
 800354a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800354c:	79fb      	ldrb	r3, [r7, #7]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d104      	bne.n	800355c <DAVE_Init+0x144>
  {
	 /**  Initialization of DIGITAL_IO APP instance LCD_RW */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LCD_RW); 
 8003552:	4838      	ldr	r0, [pc, #224]	; (8003634 <DAVE_Init+0x21c>)
 8003554:	f7ff fc66 	bl	8002e24 <DIGITAL_IO_Init>
 8003558:	4603      	mov	r3, r0
 800355a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800355c:	79fb      	ldrb	r3, [r7, #7]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d104      	bne.n	800356c <DAVE_Init+0x154>
  {
	 /**  Initialization of ADC_MEASUREMENT APP instance ADC_Voltage */
	 init_status = (DAVE_STATUS_t)ADC_MEASUREMENT_Init(&ADC_Voltage); 
 8003562:	4835      	ldr	r0, [pc, #212]	; (8003638 <DAVE_Init+0x220>)
 8003564:	f7ff fe8a 	bl	800327c <ADC_MEASUREMENT_Init>
 8003568:	4603      	mov	r3, r0
 800356a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800356c:	79fb      	ldrb	r3, [r7, #7]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d104      	bne.n	800357c <DAVE_Init+0x164>
  {
	 /**  Initialization of EVENT_DETECTOR APP instance EVENT_DETECTOR_0 */
	 init_status = (DAVE_STATUS_t)EVENT_DETECTOR_Init(&EVENT_DETECTOR_0); 
 8003572:	4832      	ldr	r0, [pc, #200]	; (800363c <DAVE_Init+0x224>)
 8003574:	f7ff fc38 	bl	8002de8 <EVENT_DETECTOR_Init>
 8003578:	4603      	mov	r3, r0
 800357a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800357c:	79fb      	ldrb	r3, [r7, #7]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d104      	bne.n	800358c <DAVE_Init+0x174>
  {
	 /**  Initialization of EVENT_GENERATOR APP instance EVENT_GENERATOR_0 */
	 init_status = (DAVE_STATUS_t)EVENT_GENERATOR_Init(&EVENT_GENERATOR_0); 
 8003582:	482f      	ldr	r0, [pc, #188]	; (8003640 <DAVE_Init+0x228>)
 8003584:	f7ff fc0c 	bl	8002da0 <EVENT_GENERATOR_Init>
 8003588:	4603      	mov	r3, r0
 800358a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800358c:	79fb      	ldrb	r3, [r7, #7]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d104      	bne.n	800359c <DAVE_Init+0x184>
  {
	 /**  Initialization of INTERRUPT APP instance INT_Timer1000ms */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INT_Timer1000ms); 
 8003592:	482c      	ldr	r0, [pc, #176]	; (8003644 <DAVE_Init+0x22c>)
 8003594:	f7ff fadc 	bl	8002b50 <INTERRUPT_Init>
 8003598:	4603      	mov	r3, r0
 800359a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800359c:	79fb      	ldrb	r3, [r7, #7]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d104      	bne.n	80035ac <DAVE_Init+0x194>
  {
	 /**  Initialization of TIMER APP instance Timer_1000ms */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&Timer_1000ms); 
 80035a2:	4829      	ldr	r0, [pc, #164]	; (8003648 <DAVE_Init+0x230>)
 80035a4:	f7fe fafc 	bl	8001ba0 <TIMER_Init>
 80035a8:	4603      	mov	r3, r0
 80035aa:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80035ac:	79fb      	ldrb	r3, [r7, #7]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d104      	bne.n	80035bc <DAVE_Init+0x1a4>
  {
	 /**  Initialization of INTERRUPT APP instance INT_Hall1 */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INT_Hall1); 
 80035b2:	4826      	ldr	r0, [pc, #152]	; (800364c <DAVE_Init+0x234>)
 80035b4:	f7ff facc 	bl	8002b50 <INTERRUPT_Init>
 80035b8:	4603      	mov	r3, r0
 80035ba:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80035bc:	79fb      	ldrb	r3, [r7, #7]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d104      	bne.n	80035cc <DAVE_Init+0x1b4>
  {
	 /**  Initialization of TIMER APP instance Timer_debouncing */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&Timer_debouncing); 
 80035c2:	4823      	ldr	r0, [pc, #140]	; (8003650 <DAVE_Init+0x238>)
 80035c4:	f7fe faec 	bl	8001ba0 <TIMER_Init>
 80035c8:	4603      	mov	r3, r0
 80035ca:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80035cc:	79fb      	ldrb	r3, [r7, #7]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d104      	bne.n	80035dc <DAVE_Init+0x1c4>
  {
	 /**  Initialization of INTERRUPT APP instance INT_Timer20ms */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INT_Timer20ms); 
 80035d2:	4820      	ldr	r0, [pc, #128]	; (8003654 <DAVE_Init+0x23c>)
 80035d4:	f7ff fabc 	bl	8002b50 <INTERRUPT_Init>
 80035d8:	4603      	mov	r3, r0
 80035da:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 80035dc:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 80035de:	4618      	mov	r0, r3
 80035e0:	3708      	adds	r7, #8
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	20000bb4 	.word	0x20000bb4
 80035ec:	08009918 	.word	0x08009918
 80035f0:	0800992c 	.word	0x0800992c
 80035f4:	08009940 	.word	0x08009940
 80035f8:	08009954 	.word	0x08009954
 80035fc:	08009890 	.word	0x08009890
 8003600:	08009968 	.word	0x08009968
 8003604:	0800997c 	.word	0x0800997c
 8003608:	200000a0 	.word	0x200000a0
 800360c:	08009990 	.word	0x08009990
 8003610:	080099a4 	.word	0x080099a4
 8003614:	080099b8 	.word	0x080099b8
 8003618:	20000008 	.word	0x20000008
 800361c:	080099cc 	.word	0x080099cc
 8003620:	080099e0 	.word	0x080099e0
 8003624:	080099f4 	.word	0x080099f4
 8003628:	08009a08 	.word	0x08009a08
 800362c:	08009894 	.word	0x08009894
 8003630:	2000025c 	.word	0x2000025c
 8003634:	08009a1c 	.word	0x08009a1c
 8003638:	200002b0 	.word	0x200002b0
 800363c:	2000024c 	.word	0x2000024c
 8003640:	2000023c 	.word	0x2000023c
 8003644:	08009898 	.word	0x08009898
 8003648:	20000038 	.word	0x20000038
 800364c:	0800989c 	.word	0x0800989c
 8003650:	20000068 	.word	0x20000068
 8003654:	080098a0 	.word	0x080098a0

08003658 <ADChandler>:
 *
 *  Created on: 10 Jun 2019
 *      Author: Administrator
 */
#include <ADC.h>
 void ADChandler(void){
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
	ADC.ADCVolt=ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_A)/1.26;
 800365c:	482e      	ldr	r0, [pc, #184]	; (8003718 <ADChandler+0xc0>)
 800365e:	f7ff fec3 	bl	80033e8 <ADC_MEASUREMENT_GetResult>
 8003662:	4603      	mov	r3, r0
 8003664:	4618      	mov	r0, r3
 8003666:	f001 fc49 	bl	8004efc <__aeabi_i2d>
 800366a:	4602      	mov	r2, r0
 800366c:	460b      	mov	r3, r1
 800366e:	4610      	mov	r0, r2
 8003670:	4619      	mov	r1, r3
 8003672:	a323      	add	r3, pc, #140	; (adr r3, 8003700 <ADChandler+0xa8>)
 8003674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003678:	f001 fdd0 	bl	800521c <__aeabi_ddiv>
 800367c:	4602      	mov	r2, r0
 800367e:	460b      	mov	r3, r1
 8003680:	4610      	mov	r0, r2
 8003682:	4619      	mov	r1, r3
 8003684:	f001 ff3a 	bl	80054fc <__aeabi_d2uiz>
 8003688:	4603      	mov	r3, r0
 800368a:	b29a      	uxth	r2, r3
 800368c:	4b23      	ldr	r3, [pc, #140]	; (800371c <ADChandler+0xc4>)
 800368e:	805a      	strh	r2, [r3, #2]
	rtU_temp.SpannungamNTC=(real_T)ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_B)/1260;
 8003690:	4823      	ldr	r0, [pc, #140]	; (8003720 <ADChandler+0xc8>)
 8003692:	f7ff fea9 	bl	80033e8 <ADC_MEASUREMENT_GetResult>
 8003696:	4603      	mov	r3, r0
 8003698:	4618      	mov	r0, r3
 800369a:	f001 fc1f 	bl	8004edc <__aeabi_ui2d>
 800369e:	4602      	mov	r2, r0
 80036a0:	460b      	mov	r3, r1
 80036a2:	4610      	mov	r0, r2
 80036a4:	4619      	mov	r1, r3
 80036a6:	a318      	add	r3, pc, #96	; (adr r3, 8003708 <ADChandler+0xb0>)
 80036a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ac:	f001 fdb6 	bl	800521c <__aeabi_ddiv>
 80036b0:	4602      	mov	r2, r0
 80036b2:	460b      	mov	r3, r1
 80036b4:	491b      	ldr	r1, [pc, #108]	; (8003724 <ADChandler+0xcc>)
 80036b6:	e9c1 2300 	strd	r2, r3, [r1]
	rtU_temp.Versorgungsspannung=3.3;
 80036ba:	491a      	ldr	r1, [pc, #104]	; (8003724 <ADChandler+0xcc>)
 80036bc:	a314      	add	r3, pc, #80	; (adr r3, 8003710 <ADChandler+0xb8>)
 80036be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c2:	e9c1 2302 	strd	r2, r3, [r1, #8]
	LCD.IstVolt=(float)ADC.ADCVolt/1000;
 80036c6:	4b15      	ldr	r3, [pc, #84]	; (800371c <ADChandler+0xc4>)
 80036c8:	885b      	ldrh	r3, [r3, #2]
 80036ca:	ee07 3a90 	vmov	s15, r3
 80036ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036d2:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8003728 <ADChandler+0xd0>
 80036d6:	eec7 7a87 	vdiv.f32	s15, s15, s14
 80036da:	4b14      	ldr	r3, [pc, #80]	; (800372c <ADChandler+0xd4>)
 80036dc:	edc3 7a01 	vstr	s15, [r3, #4]
	Temperatur_step();
 80036e0:	f000 feee 	bl	80044c0 <Temperatur_step>
	LCD.IstTemp=(float)rtY_temp.TEMP_CELSIUS;
 80036e4:	4b12      	ldr	r3, [pc, #72]	; (8003730 <ADChandler+0xd8>)
 80036e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ea:	4610      	mov	r0, r2
 80036ec:	4619      	mov	r1, r3
 80036ee:	f001 ff25 	bl	800553c <__aeabi_d2f>
 80036f2:	4602      	mov	r2, r0
 80036f4:	4b0d      	ldr	r3, [pc, #52]	; (800372c <ADChandler+0xd4>)
 80036f6:	609a      	str	r2, [r3, #8]
}
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	f3af 8000 	nop.w
 8003700:	c28f5c29 	.word	0xc28f5c29
 8003704:	3ff428f5 	.word	0x3ff428f5
 8003708:	00000000 	.word	0x00000000
 800370c:	4093b000 	.word	0x4093b000
 8003710:	66666666 	.word	0x66666666
 8003714:	400a6666 	.word	0x400a6666
 8003718:	2000027c 	.word	0x2000027c
 800371c:	20000c18 	.word	0x20000c18
 8003720:	20000298 	.word	0x20000298
 8003724:	20000c30 	.word	0x20000c30
 8003728:	447a0000 	.word	0x447a0000
 800372c:	20000bc0 	.word	0x20000bc0
 8003730:	20000c28 	.word	0x20000c28
 8003734:	f3af 8000 	nop.w

08003738 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	460b      	mov	r3, r1
 8003742:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8003744:	78fb      	ldrb	r3, [r7, #3]
 8003746:	2201      	movs	r2, #1
 8003748:	409a      	lsls	r2, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	605a      	str	r2, [r3, #4]
}
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	460b      	mov	r3, r1
 8003762:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003768:	78fb      	ldrb	r3, [r7, #3]
 800376a:	fa22 f303 	lsr.w	r3, r2, r3
 800376e:	f003 0301 	and.w	r3, r3, #1
}
 8003772:	4618      	mov	r0, r3
 8003774:	370c      	adds	r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop

08003780 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	7c1b      	ldrb	r3, [r3, #16]
 8003790:	4610      	mov	r0, r2
 8003792:	4619      	mov	r1, r3
 8003794:	f7ff ffd0 	bl	8003738 <XMC_GPIO_SetOutputHigh>
}
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop

080037a0 <DIGITAL_IO_GetInput>:
* }
*  @endcode
*/

__STATIC_INLINE uint32_t DIGITAL_IO_GetInput(const DIGITAL_IO_t *const handler)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_GetInput: handler null pointer", handler != NULL);
  return XMC_GPIO_GetInput(handler->gpio_port, handler->gpio_pin);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	7c1b      	ldrb	r3, [r3, #16]
 80037b0:	4610      	mov	r0, r2
 80037b2:	4619      	mov	r1, r3
 80037b4:	f7ff ffd0 	bl	8003758 <XMC_GPIO_GetInput>
 80037b8:	4603      	mov	r3, r0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3708      	adds	r7, #8
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop

080037c4 <Buttonhandler>:
#include <Buttons.h>
#include <LCD.h>

struct Buttons BTN = {1,0,1,0,0,0};

void Buttonhandler(void){
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
	BTN.BTN1_status = DIGITAL_IO_GetInput(&BTN_1);
 80037c8:	4827      	ldr	r0, [pc, #156]	; (8003868 <Buttonhandler+0xa4>)
 80037ca:	f7ff ffe9 	bl	80037a0 <DIGITAL_IO_GetInput>
 80037ce:	4603      	mov	r3, r0
 80037d0:	b2da      	uxtb	r2, r3
 80037d2:	4b26      	ldr	r3, [pc, #152]	; (800386c <Buttonhandler+0xa8>)
 80037d4:	701a      	strb	r2, [r3, #0]
	BTN.BTN2_status = DIGITAL_IO_GetInput(&BTN_2);
 80037d6:	4826      	ldr	r0, [pc, #152]	; (8003870 <Buttonhandler+0xac>)
 80037d8:	f7ff ffe2 	bl	80037a0 <DIGITAL_IO_GetInput>
 80037dc:	4603      	mov	r3, r0
 80037de:	b2da      	uxtb	r2, r3
 80037e0:	4b22      	ldr	r3, [pc, #136]	; (800386c <Buttonhandler+0xa8>)
 80037e2:	70da      	strb	r2, [r3, #3]
	if(BTN.BTN1_status!=0&&BTN.debouncer==0){
 80037e4:	4b21      	ldr	r3, [pc, #132]	; (800386c <Buttonhandler+0xa8>)
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d019      	beq.n	8003820 <Buttonhandler+0x5c>
 80037ec:	4b1f      	ldr	r3, [pc, #124]	; (800386c <Buttonhandler+0xa8>)
 80037ee:	785b      	ldrb	r3, [r3, #1]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d115      	bne.n	8003820 <Buttonhandler+0x5c>

				ResetGateDriver();
 80037f4:	f000 fcee 	bl	80041d4 <ResetGateDriver>
				BTN.BTN1_status = DIGITAL_IO_GetInput(&BTN_1);
 80037f8:	481b      	ldr	r0, [pc, #108]	; (8003868 <Buttonhandler+0xa4>)
 80037fa:	f7ff ffd1 	bl	80037a0 <DIGITAL_IO_GetInput>
 80037fe:	4603      	mov	r3, r0
 8003800:	b2da      	uxtb	r2, r3
 8003802:	4b1a      	ldr	r3, [pc, #104]	; (800386c <Buttonhandler+0xa8>)
 8003804:	701a      	strb	r2, [r3, #0]
				if(BTN.BTN1_status!=0){
 8003806:	4b19      	ldr	r3, [pc, #100]	; (800386c <Buttonhandler+0xa8>)
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d008      	beq.n	8003820 <Buttonhandler+0x5c>
					BTN.counter++;
 800380e:	4b17      	ldr	r3, [pc, #92]	; (800386c <Buttonhandler+0xa8>)
 8003810:	799b      	ldrb	r3, [r3, #6]
 8003812:	3301      	adds	r3, #1
 8003814:	b2da      	uxtb	r2, r3
 8003816:	4b15      	ldr	r3, [pc, #84]	; (800386c <Buttonhandler+0xa8>)
 8003818:	719a      	strb	r2, [r3, #6]
					BTN.debouncer=1;
 800381a:	4b14      	ldr	r3, [pc, #80]	; (800386c <Buttonhandler+0xa8>)
 800381c:	2201      	movs	r2, #1
 800381e:	705a      	strb	r2, [r3, #1]
				}

								}


	if(BTN.BTN2_status!=0&&BTN.debouncer2==0){
 8003820:	4b12      	ldr	r3, [pc, #72]	; (800386c <Buttonhandler+0xa8>)
 8003822:	78db      	ldrb	r3, [r3, #3]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d013      	beq.n	8003850 <Buttonhandler+0x8c>
 8003828:	4b10      	ldr	r3, [pc, #64]	; (800386c <Buttonhandler+0xa8>)
 800382a:	789b      	ldrb	r3, [r3, #2]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d10f      	bne.n	8003850 <Buttonhandler+0x8c>
		ResetGateDriver();
 8003830:	f000 fcd0 	bl	80041d4 <ResetGateDriver>
		BTN.BTN2_status = DIGITAL_IO_GetInput(&BTN_2);
 8003834:	480e      	ldr	r0, [pc, #56]	; (8003870 <Buttonhandler+0xac>)
 8003836:	f7ff ffb3 	bl	80037a0 <DIGITAL_IO_GetInput>
 800383a:	4603      	mov	r3, r0
 800383c:	b2da      	uxtb	r2, r3
 800383e:	4b0b      	ldr	r3, [pc, #44]	; (800386c <Buttonhandler+0xa8>)
 8003840:	70da      	strb	r2, [r3, #3]

			if(BTN.BTN2_status!=0){
 8003842:	4b0a      	ldr	r3, [pc, #40]	; (800386c <Buttonhandler+0xa8>)
 8003844:	78db      	ldrb	r3, [r3, #3]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d002      	beq.n	8003850 <Buttonhandler+0x8c>

				BTN.debouncer2=1;
 800384a:	4b08      	ldr	r3, [pc, #32]	; (800386c <Buttonhandler+0xa8>)
 800384c:	2201      	movs	r2, #1
 800384e:	709a      	strb	r2, [r3, #2]
			}

	}
	if(BTN.counter==1){
 8003850:	4b06      	ldr	r3, [pc, #24]	; (800386c <Buttonhandler+0xa8>)
 8003852:	799b      	ldrb	r3, [r3, #6]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d105      	bne.n	8003864 <Buttonhandler+0xa0>
		DIGITAL_IO_SetOutputHigh(&O_G_EN);
 8003858:	4806      	ldr	r0, [pc, #24]	; (8003874 <Buttonhandler+0xb0>)
 800385a:	f7ff ff91 	bl	8003780 <DIGITAL_IO_SetOutputHigh>
		PWM_BC_Start(&PWM_BC_0);
 800385e:	4806      	ldr	r0, [pc, #24]	; (8003878 <Buttonhandler+0xb4>)
 8003860:	f7fe fe8c 	bl	800257c <PWM_BC_Start>

	}

}
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	08009968 	.word	0x08009968
 800386c:	200002cc 	.word	0x200002cc
 8003870:	0800997c 	.word	0x0800997c
 8003874:	08009990 	.word	0x08009990
 8003878:	200000a0 	.word	0x200000a0

0800387c <CCU40_2_IRQHandler>:

#include <Interupts.h>
#include <lut.h>

void LCD_Timer_IR(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
	ResetGateDriver();
 8003880:	f000 fca8 	bl	80041d4 <ResetGateDriver>
	ADC_MEASUREMENT_StartConversion(&ADC_Voltage);
 8003884:	4819      	ldr	r0, [pc, #100]	; (80038ec <CCU40_2_IRQHandler+0x70>)
 8003886:	f7ff fda1 	bl	80033cc <ADC_MEASUREMENT_StartConversion>
	TIMER_ClearEvent(&LCD_Timer);
 800388a:	4819      	ldr	r0, [pc, #100]	; (80038f0 <CCU40_2_IRQHandler+0x74>)
 800388c:	f7fe fa94 	bl	8001db8 <TIMER_ClearEvent>
	TIMER_Stop(&LCD_Timer);
 8003890:	4817      	ldr	r0, [pc, #92]	; (80038f0 <CCU40_2_IRQHandler+0x74>)
 8003892:	f7fe f9c1 	bl	8001c18 <TIMER_Stop>
	TIMER_Clear(&LCD_Timer);
 8003896:	4816      	ldr	r0, [pc, #88]	; (80038f0 <CCU40_2_IRQHandler+0x74>)
 8003898:	f7fe faa0 	bl	8001ddc <TIMER_Clear>
	LCD_SetDuty(LCD.IstTemp);
 800389c:	4b15      	ldr	r3, [pc, #84]	; (80038f4 <CCU40_2_IRQHandler+0x78>)
 800389e:	edd3 7a02 	vldr	s15, [r3, #8]
 80038a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038a6:	ee17 0a90 	vmov	r0, s15
 80038aa:	f000 fbc9 	bl	8004040 <LCD_SetDuty>
	LCD_SetDelay(Posifval.ten_milli_count);
 80038ae:	4b12      	ldr	r3, [pc, #72]	; (80038f8 <CCU40_2_IRQHandler+0x7c>)
 80038b0:	881b      	ldrh	r3, [r3, #0]
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	b21b      	sxth	r3, r3
 80038b6:	4618      	mov	r0, r3
 80038b8:	f000 fbea 	bl	8004090 <LCD_SetDelay>
	LCD_IstVolt(LCD.IstVolt);
 80038bc:	4b0d      	ldr	r3, [pc, #52]	; (80038f4 <CCU40_2_IRQHandler+0x78>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f000 fb61 	bl	8003f88 <LCD_IstVolt>
	LCD_SollVolt(LCD.SollVolt);
 80038c6:	4b0b      	ldr	r3, [pc, #44]	; (80038f4 <CCU40_2_IRQHandler+0x78>)
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f000 fb8a 	bl	8003fe4 <LCD_SollVolt>
	LCD_SollRPM(LCD.SollRpm);
 80038d0:	4b08      	ldr	r3, [pc, #32]	; (80038f4 <CCU40_2_IRQHandler+0x78>)
 80038d2:	881b      	ldrh	r3, [r3, #0]
 80038d4:	4618      	mov	r0, r3
 80038d6:	f000 fb07 	bl	8003ee8 <LCD_SollRPM>
	LCD_IstRPM(LCD.IstRpm);
 80038da:	4b06      	ldr	r3, [pc, #24]	; (80038f4 <CCU40_2_IRQHandler+0x78>)
 80038dc:	885b      	ldrh	r3, [r3, #2]
 80038de:	4618      	mov	r0, r3
 80038e0:	f000 fb2a 	bl	8003f38 <LCD_IstRPM>
    DisplayTask();
 80038e4:	f000 f914 	bl	8003b10 <DisplayTask>
}
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	200002b0 	.word	0x200002b0
 80038f0:	20000008 	.word	0x20000008
 80038f4:	20000bc0 	.word	0x20000bc0
 80038f8:	20000324 	.word	0x20000324
 80038fc:	00000000 	.word	0x00000000

08003900 <CCU43_1_IRQHandler>:

void IR_Debouncing(void){
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
	ResetGateDriver();
 8003904:	f000 fc66 	bl	80041d4 <ResetGateDriver>
	if(BTN.debouncer!=0){
 8003908:	4b3b      	ldr	r3, [pc, #236]	; (80039f8 <CCU43_1_IRQHandler+0xf8>)
 800390a:	785b      	ldrb	r3, [r3, #1]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d002      	beq.n	8003916 <CCU43_1_IRQHandler+0x16>
		/*if(Posifval.ten_milli_count>30){
			Posifval.ten_milli_count-=2;
			if(Posifval.ten_milli_count<=70&&Posifval.ten_milli_count>=44){Posifval.ten_milli_count=40;}
			}
		else{Posifval.ten_milli_count=100;Posifval.duty_cycle=350;speedindex=0;}*/
		BTN.debouncer=0;
 8003910:	4b39      	ldr	r3, [pc, #228]	; (80039f8 <CCU43_1_IRQHandler+0xf8>)
 8003912:	2200      	movs	r2, #0
 8003914:	705a      	strb	r2, [r3, #1]

										}
	if(BTN.debouncer2!=0){
 8003916:	4b38      	ldr	r3, [pc, #224]	; (80039f8 <CCU43_1_IRQHandler+0xf8>)
 8003918:	789b      	ldrb	r3, [r3, #2]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d060      	beq.n	80039e0 <CCU43_1_IRQHandler+0xe0>

		if(LCD.SollVolt>3.3){
 800391e:	4b37      	ldr	r3, [pc, #220]	; (80039fc <CCU43_1_IRQHandler+0xfc>)
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	4618      	mov	r0, r3
 8003924:	f001 fafc 	bl	8004f20 <__aeabi_f2d>
 8003928:	4602      	mov	r2, r0
 800392a:	460b      	mov	r3, r1
 800392c:	4610      	mov	r0, r2
 800392e:	4619      	mov	r1, r3
 8003930:	a32d      	add	r3, pc, #180	; (adr r3, 80039e8 <CCU43_1_IRQHandler+0xe8>)
 8003932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003936:	f001 fdd7 	bl	80054e8 <__aeabi_dcmpgt>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d004      	beq.n	800394a <CCU43_1_IRQHandler+0x4a>
			LCD.SollVolt=1;
 8003940:	4b2e      	ldr	r3, [pc, #184]	; (80039fc <CCU43_1_IRQHandler+0xfc>)
 8003942:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003946:	60da      	str	r2, [r3, #12]
 8003948:	e047      	b.n	80039da <CCU43_1_IRQHandler+0xda>
		}
		else{
			LCD.SollVolt+=0.1;
 800394a:	4b2c      	ldr	r3, [pc, #176]	; (80039fc <CCU43_1_IRQHandler+0xfc>)
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	4618      	mov	r0, r3
 8003950:	f001 fae6 	bl	8004f20 <__aeabi_f2d>
 8003954:	4602      	mov	r2, r0
 8003956:	460b      	mov	r3, r1
 8003958:	4610      	mov	r0, r2
 800395a:	4619      	mov	r1, r3
 800395c:	a324      	add	r3, pc, #144	; (adr r3, 80039f0 <CCU43_1_IRQHandler+0xf0>)
 800395e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003962:	f001 f97f 	bl	8004c64 <__adddf3>
 8003966:	4602      	mov	r2, r0
 8003968:	460b      	mov	r3, r1
 800396a:	4610      	mov	r0, r2
 800396c:	4619      	mov	r1, r3
 800396e:	f001 fde5 	bl	800553c <__aeabi_d2f>
 8003972:	4602      	mov	r2, r0
 8003974:	4b21      	ldr	r3, [pc, #132]	; (80039fc <CCU43_1_IRQHandler+0xfc>)
 8003976:	60da      	str	r2, [r3, #12]
			rtU_lut.In1_lut=(double)LCD.SollVolt;
 8003978:	4b20      	ldr	r3, [pc, #128]	; (80039fc <CCU43_1_IRQHandler+0xfc>)
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	4618      	mov	r0, r3
 800397e:	f001 facf 	bl	8004f20 <__aeabi_f2d>
 8003982:	4602      	mov	r2, r0
 8003984:	460b      	mov	r3, r1
 8003986:	491e      	ldr	r1, [pc, #120]	; (8003a00 <CCU43_1_IRQHandler+0x100>)
 8003988:	e9c1 2300 	strd	r2, r3, [r1]

			lut_step();
 800398c:	f000 fe8a 	bl	80046a4 <lut_step>

			if(rtY_lut.Out1_lut>=30&&rtY_lut.Out1_lut<=110 ){
 8003990:	4b1c      	ldr	r3, [pc, #112]	; (8003a04 <CCU43_1_IRQHandler+0x104>)
 8003992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003996:	4610      	mov	r0, r2
 8003998:	4619      	mov	r1, r3
 800399a:	f04f 0200 	mov.w	r2, #0
 800399e:	4b1a      	ldr	r3, [pc, #104]	; (8003a08 <CCU43_1_IRQHandler+0x108>)
 80039a0:	f001 fd98 	bl	80054d4 <__aeabi_dcmpge>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d017      	beq.n	80039da <CCU43_1_IRQHandler+0xda>
 80039aa:	4b16      	ldr	r3, [pc, #88]	; (8003a04 <CCU43_1_IRQHandler+0x104>)
 80039ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b0:	4610      	mov	r0, r2
 80039b2:	4619      	mov	r1, r3
 80039b4:	f04f 0200 	mov.w	r2, #0
 80039b8:	4b14      	ldr	r3, [pc, #80]	; (8003a0c <CCU43_1_IRQHandler+0x10c>)
 80039ba:	f001 fd81 	bl	80054c0 <__aeabi_dcmple>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00a      	beq.n	80039da <CCU43_1_IRQHandler+0xda>
			Posifval.ten_milli_count= rtY_lut.Out1_lut ;}
 80039c4:	4b0f      	ldr	r3, [pc, #60]	; (8003a04 <CCU43_1_IRQHandler+0x104>)
 80039c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ca:	4610      	mov	r0, r2
 80039cc:	4619      	mov	r1, r3
 80039ce:	f001 fd95 	bl	80054fc <__aeabi_d2uiz>
 80039d2:	4603      	mov	r3, r0
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	4b0e      	ldr	r3, [pc, #56]	; (8003a10 <CCU43_1_IRQHandler+0x110>)
 80039d8:	801a      	strh	r2, [r3, #0]
		}
		BTN.debouncer2=0;
 80039da:	4b07      	ldr	r3, [pc, #28]	; (80039f8 <CCU43_1_IRQHandler+0xf8>)
 80039dc:	2200      	movs	r2, #0
 80039de:	709a      	strb	r2, [r3, #2]
	}

}
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	f3af 8000 	nop.w
 80039e8:	66666666 	.word	0x66666666
 80039ec:	400a6666 	.word	0x400a6666
 80039f0:	9999999a 	.word	0x9999999a
 80039f4:	3fb99999 	.word	0x3fb99999
 80039f8:	200002cc 	.word	0x200002cc
 80039fc:	20000bc0 	.word	0x20000bc0
 8003a00:	20000c40 	.word	0x20000c40
 8003a04:	20000c48 	.word	0x20000c48
 8003a08:	403e0000 	.word	0x403e0000
 8003a0c:	405b8000 	.word	0x405b8000
 8003a10:	20000324 	.word	0x20000324
 8003a14:	f3af 8000 	nop.w

08003a18 <CCU41_1_IRQHandler>:
void IR_Timer_1000ms(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
	ResetGateDriver();
 8003a1c:	f000 fbda 	bl	80041d4 <ResetGateDriver>

	LCD.IstRpm=revolves_counter*60;
 8003a20:	4b0c      	ldr	r3, [pc, #48]	; (8003a54 <CCU41_1_IRQHandler+0x3c>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	461a      	mov	r2, r3
 8003a28:	0112      	lsls	r2, r2, #4
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	4b09      	ldr	r3, [pc, #36]	; (8003a58 <CCU41_1_IRQHandler+0x40>)
 8003a32:	805a      	strh	r2, [r3, #2]
	LCD_IstRPM(LCD.IstRpm);
 8003a34:	4b08      	ldr	r3, [pc, #32]	; (8003a58 <CCU41_1_IRQHandler+0x40>)
 8003a36:	885b      	ldrh	r3, [r3, #2]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f000 fa7d 	bl	8003f38 <LCD_IstRPM>
	ResetGateDriver();
 8003a3e:	f000 fbc9 	bl	80041d4 <ResetGateDriver>
	revolves_counter=0;
 8003a42:	4b04      	ldr	r3, [pc, #16]	; (8003a54 <CCU41_1_IRQHandler+0x3c>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	601a      	str	r2, [r3, #0]

	//DIGITAL_IO_ToggleOutput(&LED1);
	lasthallint_count=hallint_count;
 8003a48:	4b04      	ldr	r3, [pc, #16]	; (8003a5c <CCU41_1_IRQHandler+0x44>)
 8003a4a:	881a      	ldrh	r2, [r3, #0]
 8003a4c:	4b04      	ldr	r3, [pc, #16]	; (8003a60 <CCU41_1_IRQHandler+0x48>)
 8003a4e:	801a      	strh	r2, [r3, #0]


}
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	20000be0 	.word	0x20000be0
 8003a58:	20000bc0 	.word	0x20000bc0
 8003a5c:	20000bdc 	.word	0x20000bdc
 8003a60:	20000bde 	.word	0x20000bde

08003a64 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8003a70:	78fb      	ldrb	r3, [r7, #3]
 8003a72:	2201      	movs	r2, #1
 8003a74:	409a      	lsls	r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	605a      	str	r2, [r3, #4]
}
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 8003a90:	78fb      	ldrb	r3, [r7, #3]
 8003a92:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003a96:	409a      	lsls	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	605a      	str	r2, [r3, #4]
}
 8003a9c:	370c      	adds	r7, #12
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop

08003aa8 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	7c1b      	ldrb	r3, [r3, #16]
 8003ab8:	4610      	mov	r0, r2
 8003aba:	4619      	mov	r1, r3
 8003abc:	f7ff ffd2 	bl	8003a64 <XMC_GPIO_SetOutputHigh>
}
 8003ac0:	3708      	adds	r7, #8
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop

08003ac8 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	7c1b      	ldrb	r3, [r3, #16]
 8003ad8:	4610      	mov	r0, r2
 8003ada:	4619      	mov	r1, r3
 8003adc:	f7ff ffd2 	bl	8003a84 <XMC_GPIO_SetOutputLow>
}
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop

08003ae8 <DelayTimer>:
			{'V', 'o', 'l', 't', ':', ' ', ' ', ' ', ' ', ' ', ' ', 'V', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'V', },
			{'T', 'e', 'm', 'p', ':', ' ', ' ', ' ', ' ', ' ', 'D', 'e', 'l', 'a', 'y', ':', ' ', ' ', ' ', ' ', }
			};


void DelayTimer(int TimerLength){
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
	TIMER_SetTimeInterval(&LCD_Timer, TimerLength);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4806      	ldr	r0, [pc, #24]	; (8003b0c <DelayTimer+0x24>)
 8003af4:	4619      	mov	r1, r3
 8003af6:	f7fe f8cb 	bl	8001c90 <TIMER_SetTimeInterval>
	TIMER_Start(&LCD_Timer);
 8003afa:	4804      	ldr	r0, [pc, #16]	; (8003b0c <DelayTimer+0x24>)
 8003afc:	f7fe f86e 	bl	8001bdc <TIMER_Start>
	ResetGateDriver();
 8003b00:	f000 fb68 	bl	80041d4 <ResetGateDriver>

}
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	20000008 	.word	0x20000008

08003b10 <DisplayTask>:




void DisplayTask(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	af00      	add	r7, sp, #0
	ResetGateDriver();
 8003b14:	f000 fb5e 	bl	80041d4 <ResetGateDriver>
	if(LCD_Init_Status)
 8003b18:	4ba9      	ldr	r3, [pc, #676]	; (8003dc0 <DisplayTask+0x2b0>)
 8003b1a:	881b      	ldrh	r3, [r3, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f000 8113 	beq.w	8003d48 <DisplayTask+0x238>
	{
		switch(LCD_state)
 8003b22:	4ba8      	ldr	r3, [pc, #672]	; (8003dc4 <DisplayTask+0x2b4>)
 8003b24:	881b      	ldrh	r3, [r3, #0]
 8003b26:	2b07      	cmp	r3, #7
 8003b28:	f200 810c 	bhi.w	8003d44 <DisplayTask+0x234>
 8003b2c:	a201      	add	r2, pc, #4	; (adr r2, 8003b34 <DisplayTask+0x24>)
 8003b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b32:	bf00      	nop
 8003b34:	08003b55 	.word	0x08003b55
 8003b38:	08003b71 	.word	0x08003b71
 8003b3c:	08003bd3 	.word	0x08003bd3
 8003b40:	08003bef 	.word	0x08003bef
 8003b44:	08003c51 	.word	0x08003c51
 8003b48:	08003c6d 	.word	0x08003c6d
 8003b4c:	08003ccf 	.word	0x08003ccf
 8003b50:	08003ceb 	.word	0x08003ceb
		{
		case 0: //Start
			LCD_Befehl(0x80);
 8003b54:	2080      	movs	r0, #128	; 0x80
 8003b56:	f000 f983 	bl	8003e60 <LCD_Befehl>
			DelayTimer(5000);
 8003b5a:	f241 3088 	movw	r0, #5000	; 0x1388
 8003b5e:	f7ff ffc3 	bl	8003ae8 <DelayTimer>

			LCD_state++;
 8003b62:	4b98      	ldr	r3, [pc, #608]	; (8003dc4 <DisplayTask+0x2b4>)
 8003b64:	881b      	ldrh	r3, [r3, #0]
 8003b66:	3301      	adds	r3, #1
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	4b96      	ldr	r3, [pc, #600]	; (8003dc4 <DisplayTask+0x2b4>)
 8003b6c:	801a      	strh	r2, [r3, #0]
			break;
 8003b6e:	e0ea      	b.n	8003d46 <DisplayTask+0x236>

		case 1: //Erste Zeile
			LCD_Write(LCD_Display[LCD_Zeile][LCD_ZeilePos]);
 8003b70:	4b95      	ldr	r3, [pc, #596]	; (8003dc8 <DisplayTask+0x2b8>)
 8003b72:	881b      	ldrh	r3, [r3, #0]
 8003b74:	4619      	mov	r1, r3
 8003b76:	4b95      	ldr	r3, [pc, #596]	; (8003dcc <DisplayTask+0x2bc>)
 8003b78:	881b      	ldrh	r3, [r3, #0]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	4a94      	ldr	r2, [pc, #592]	; (8003dd0 <DisplayTask+0x2c0>)
 8003b7e:	460b      	mov	r3, r1
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	440b      	add	r3, r1
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	4403      	add	r3, r0
 8003b88:	4413      	add	r3, r2
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f000 f989 	bl	8003ea4 <LCD_Write>
			if(LCD_ZeilePos == 19)
 8003b92:	4b8e      	ldr	r3, [pc, #568]	; (8003dcc <DisplayTask+0x2bc>)
 8003b94:	881b      	ldrh	r3, [r3, #0]
 8003b96:	2b13      	cmp	r3, #19
 8003b98:	d10c      	bne.n	8003bb4 <DisplayTask+0xa4>
			{
				LCD_ZeilePos = 0;
 8003b9a:	4b8c      	ldr	r3, [pc, #560]	; (8003dcc <DisplayTask+0x2bc>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	801a      	strh	r2, [r3, #0]
				LCD_Zeile = 1;
 8003ba0:	4b89      	ldr	r3, [pc, #548]	; (8003dc8 <DisplayTask+0x2b8>)
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	801a      	strh	r2, [r3, #0]
				LCD_state++;
 8003ba6:	4b87      	ldr	r3, [pc, #540]	; (8003dc4 <DisplayTask+0x2b4>)
 8003ba8:	881b      	ldrh	r3, [r3, #0]
 8003baa:	3301      	adds	r3, #1
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	4b85      	ldr	r3, [pc, #532]	; (8003dc4 <DisplayTask+0x2b4>)
 8003bb0:	801a      	strh	r2, [r3, #0]
 8003bb2:	e009      	b.n	8003bc8 <DisplayTask+0xb8>
			}
			else
			{
				LCD_ZeilePos++;
 8003bb4:	4b85      	ldr	r3, [pc, #532]	; (8003dcc <DisplayTask+0x2bc>)
 8003bb6:	881b      	ldrh	r3, [r3, #0]
 8003bb8:	3301      	adds	r3, #1
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	4b83      	ldr	r3, [pc, #524]	; (8003dcc <DisplayTask+0x2bc>)
 8003bbe:	801a      	strh	r2, [r3, #0]
				DelayTimer(5000);
 8003bc0:	f241 3088 	movw	r0, #5000	; 0x1388
 8003bc4:	f7ff ff90 	bl	8003ae8 <DelayTimer>
							}

			DelayTimer(5000);
 8003bc8:	f241 3088 	movw	r0, #5000	; 0x1388
 8003bcc:	f7ff ff8c 	bl	8003ae8 <DelayTimer>
			break;
 8003bd0:	e0b9      	b.n	8003d46 <DisplayTask+0x236>

		case 2: //Adresse zweite Zeile
			LCD_Befehl(0xC0);
 8003bd2:	20c0      	movs	r0, #192	; 0xc0
 8003bd4:	f000 f944 	bl	8003e60 <LCD_Befehl>
			DelayTimer(5000);
 8003bd8:	f241 3088 	movw	r0, #5000	; 0x1388
 8003bdc:	f7ff ff84 	bl	8003ae8 <DelayTimer>
			LCD_state++;
 8003be0:	4b78      	ldr	r3, [pc, #480]	; (8003dc4 <DisplayTask+0x2b4>)
 8003be2:	881b      	ldrh	r3, [r3, #0]
 8003be4:	3301      	adds	r3, #1
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	4b76      	ldr	r3, [pc, #472]	; (8003dc4 <DisplayTask+0x2b4>)
 8003bea:	801a      	strh	r2, [r3, #0]
			break;
 8003bec:	e0ab      	b.n	8003d46 <DisplayTask+0x236>

		case 3: //Schreibe zweite Zeile
			LCD_Write(LCD_Display[LCD_Zeile][LCD_ZeilePos]);
 8003bee:	4b76      	ldr	r3, [pc, #472]	; (8003dc8 <DisplayTask+0x2b8>)
 8003bf0:	881b      	ldrh	r3, [r3, #0]
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	4b75      	ldr	r3, [pc, #468]	; (8003dcc <DisplayTask+0x2bc>)
 8003bf6:	881b      	ldrh	r3, [r3, #0]
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	4a75      	ldr	r2, [pc, #468]	; (8003dd0 <DisplayTask+0x2c0>)
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	440b      	add	r3, r1
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4403      	add	r3, r0
 8003c06:	4413      	add	r3, r2
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f000 f94a 	bl	8003ea4 <LCD_Write>
			if(LCD_ZeilePos == 19)
 8003c10:	4b6e      	ldr	r3, [pc, #440]	; (8003dcc <DisplayTask+0x2bc>)
 8003c12:	881b      	ldrh	r3, [r3, #0]
 8003c14:	2b13      	cmp	r3, #19
 8003c16:	d10c      	bne.n	8003c32 <DisplayTask+0x122>
			{
				LCD_ZeilePos = 0;
 8003c18:	4b6c      	ldr	r3, [pc, #432]	; (8003dcc <DisplayTask+0x2bc>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	801a      	strh	r2, [r3, #0]
				LCD_Zeile = 2;
 8003c1e:	4b6a      	ldr	r3, [pc, #424]	; (8003dc8 <DisplayTask+0x2b8>)
 8003c20:	2202      	movs	r2, #2
 8003c22:	801a      	strh	r2, [r3, #0]
				LCD_state++;
 8003c24:	4b67      	ldr	r3, [pc, #412]	; (8003dc4 <DisplayTask+0x2b4>)
 8003c26:	881b      	ldrh	r3, [r3, #0]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	4b65      	ldr	r3, [pc, #404]	; (8003dc4 <DisplayTask+0x2b4>)
 8003c2e:	801a      	strh	r2, [r3, #0]
 8003c30:	e009      	b.n	8003c46 <DisplayTask+0x136>
			}
			else
			{
				LCD_ZeilePos++;
 8003c32:	4b66      	ldr	r3, [pc, #408]	; (8003dcc <DisplayTask+0x2bc>)
 8003c34:	881b      	ldrh	r3, [r3, #0]
 8003c36:	3301      	adds	r3, #1
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	4b64      	ldr	r3, [pc, #400]	; (8003dcc <DisplayTask+0x2bc>)
 8003c3c:	801a      	strh	r2, [r3, #0]
				DelayTimer(5000);
 8003c3e:	f241 3088 	movw	r0, #5000	; 0x1388
 8003c42:	f7ff ff51 	bl	8003ae8 <DelayTimer>
			}

			DelayTimer(5000);
 8003c46:	f241 3088 	movw	r0, #5000	; 0x1388
 8003c4a:	f7ff ff4d 	bl	8003ae8 <DelayTimer>
			break;
 8003c4e:	e07a      	b.n	8003d46 <DisplayTask+0x236>

		case 4: //Adresse 3. Zeile
			LCD_Befehl(0x94);
 8003c50:	2094      	movs	r0, #148	; 0x94
 8003c52:	f000 f905 	bl	8003e60 <LCD_Befehl>
			DelayTimer(5000);
 8003c56:	f241 3088 	movw	r0, #5000	; 0x1388
 8003c5a:	f7ff ff45 	bl	8003ae8 <DelayTimer>
			LCD_state++;
 8003c5e:	4b59      	ldr	r3, [pc, #356]	; (8003dc4 <DisplayTask+0x2b4>)
 8003c60:	881b      	ldrh	r3, [r3, #0]
 8003c62:	3301      	adds	r3, #1
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	4b57      	ldr	r3, [pc, #348]	; (8003dc4 <DisplayTask+0x2b4>)
 8003c68:	801a      	strh	r2, [r3, #0]
			break;
 8003c6a:	e06c      	b.n	8003d46 <DisplayTask+0x236>

		case 5: //Schreibe dritte Zeile
			LCD_Write(LCD_Display[LCD_Zeile][LCD_ZeilePos]);
 8003c6c:	4b56      	ldr	r3, [pc, #344]	; (8003dc8 <DisplayTask+0x2b8>)
 8003c6e:	881b      	ldrh	r3, [r3, #0]
 8003c70:	4619      	mov	r1, r3
 8003c72:	4b56      	ldr	r3, [pc, #344]	; (8003dcc <DisplayTask+0x2bc>)
 8003c74:	881b      	ldrh	r3, [r3, #0]
 8003c76:	4618      	mov	r0, r3
 8003c78:	4a55      	ldr	r2, [pc, #340]	; (8003dd0 <DisplayTask+0x2c0>)
 8003c7a:	460b      	mov	r3, r1
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	440b      	add	r3, r1
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	4403      	add	r3, r0
 8003c84:	4413      	add	r3, r2
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f000 f90b 	bl	8003ea4 <LCD_Write>
			if(LCD_ZeilePos == 19)
 8003c8e:	4b4f      	ldr	r3, [pc, #316]	; (8003dcc <DisplayTask+0x2bc>)
 8003c90:	881b      	ldrh	r3, [r3, #0]
 8003c92:	2b13      	cmp	r3, #19
 8003c94:	d10c      	bne.n	8003cb0 <DisplayTask+0x1a0>
			{
				LCD_ZeilePos = 0;
 8003c96:	4b4d      	ldr	r3, [pc, #308]	; (8003dcc <DisplayTask+0x2bc>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	801a      	strh	r2, [r3, #0]
				LCD_Zeile = 3;
 8003c9c:	4b4a      	ldr	r3, [pc, #296]	; (8003dc8 <DisplayTask+0x2b8>)
 8003c9e:	2203      	movs	r2, #3
 8003ca0:	801a      	strh	r2, [r3, #0]
				LCD_state++;
 8003ca2:	4b48      	ldr	r3, [pc, #288]	; (8003dc4 <DisplayTask+0x2b4>)
 8003ca4:	881b      	ldrh	r3, [r3, #0]
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	4b46      	ldr	r3, [pc, #280]	; (8003dc4 <DisplayTask+0x2b4>)
 8003cac:	801a      	strh	r2, [r3, #0]
 8003cae:	e009      	b.n	8003cc4 <DisplayTask+0x1b4>
			}
			else
			{
				LCD_ZeilePos++;
 8003cb0:	4b46      	ldr	r3, [pc, #280]	; (8003dcc <DisplayTask+0x2bc>)
 8003cb2:	881b      	ldrh	r3, [r3, #0]
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	b29a      	uxth	r2, r3
 8003cb8:	4b44      	ldr	r3, [pc, #272]	; (8003dcc <DisplayTask+0x2bc>)
 8003cba:	801a      	strh	r2, [r3, #0]
				DelayTimer(5000);
 8003cbc:	f241 3088 	movw	r0, #5000	; 0x1388
 8003cc0:	f7ff ff12 	bl	8003ae8 <DelayTimer>
			}

			DelayTimer(5000);
 8003cc4:	f241 3088 	movw	r0, #5000	; 0x1388
 8003cc8:	f7ff ff0e 	bl	8003ae8 <DelayTimer>
			break;
 8003ccc:	e03b      	b.n	8003d46 <DisplayTask+0x236>

		case 6: //set address for line 3
			LCD_Befehl(0xD4);
 8003cce:	20d4      	movs	r0, #212	; 0xd4
 8003cd0:	f000 f8c6 	bl	8003e60 <LCD_Befehl>
			DelayTimer(5000);
 8003cd4:	f241 3088 	movw	r0, #5000	; 0x1388
 8003cd8:	f7ff ff06 	bl	8003ae8 <DelayTimer>

			LCD_state++;
 8003cdc:	4b39      	ldr	r3, [pc, #228]	; (8003dc4 <DisplayTask+0x2b4>)
 8003cde:	881b      	ldrh	r3, [r3, #0]
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	4b37      	ldr	r3, [pc, #220]	; (8003dc4 <DisplayTask+0x2b4>)
 8003ce6:	801a      	strh	r2, [r3, #0]
			break;
 8003ce8:	e02d      	b.n	8003d46 <DisplayTask+0x236>

		case 7: //Write line 4
			LCD_Write(LCD_Display[LCD_Zeile][LCD_ZeilePos]);
 8003cea:	4b37      	ldr	r3, [pc, #220]	; (8003dc8 <DisplayTask+0x2b8>)
 8003cec:	881b      	ldrh	r3, [r3, #0]
 8003cee:	4619      	mov	r1, r3
 8003cf0:	4b36      	ldr	r3, [pc, #216]	; (8003dcc <DisplayTask+0x2bc>)
 8003cf2:	881b      	ldrh	r3, [r3, #0]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	4a36      	ldr	r2, [pc, #216]	; (8003dd0 <DisplayTask+0x2c0>)
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	440b      	add	r3, r1
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	4403      	add	r3, r0
 8003d02:	4413      	add	r3, r2
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f000 f8cc 	bl	8003ea4 <LCD_Write>
			if(LCD_ZeilePos == 19)
 8003d0c:	4b2f      	ldr	r3, [pc, #188]	; (8003dcc <DisplayTask+0x2bc>)
 8003d0e:	881b      	ldrh	r3, [r3, #0]
 8003d10:	2b13      	cmp	r3, #19
 8003d12:	d10c      	bne.n	8003d2e <DisplayTask+0x21e>
			{
				LCD_ZeilePos = 0;
 8003d14:	4b2d      	ldr	r3, [pc, #180]	; (8003dcc <DisplayTask+0x2bc>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	801a      	strh	r2, [r3, #0]
				LCD_Zeile = 0;
 8003d1a:	4b2b      	ldr	r3, [pc, #172]	; (8003dc8 <DisplayTask+0x2b8>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	801a      	strh	r2, [r3, #0]
				LCD_state = 0;
 8003d20:	4b28      	ldr	r3, [pc, #160]	; (8003dc4 <DisplayTask+0x2b4>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	801a      	strh	r2, [r3, #0]
				DelayTimer(20000000);
 8003d26:	482b      	ldr	r0, [pc, #172]	; (8003dd4 <DisplayTask+0x2c4>)
 8003d28:	f7ff fede 	bl	8003ae8 <DelayTimer>
			{
				LCD_ZeilePos++;
				DelayTimer(11000);

			}
			break;
 8003d2c:	e00b      	b.n	8003d46 <DisplayTask+0x236>
				DelayTimer(20000000);

			}
			else
			{
				LCD_ZeilePos++;
 8003d2e:	4b27      	ldr	r3, [pc, #156]	; (8003dcc <DisplayTask+0x2bc>)
 8003d30:	881b      	ldrh	r3, [r3, #0]
 8003d32:	3301      	adds	r3, #1
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	4b25      	ldr	r3, [pc, #148]	; (8003dcc <DisplayTask+0x2bc>)
 8003d38:	801a      	strh	r2, [r3, #0]
				DelayTimer(11000);
 8003d3a:	f642 20f8 	movw	r0, #11000	; 0x2af8
 8003d3e:	f7ff fed3 	bl	8003ae8 <DelayTimer>

			}
			break;
 8003d42:	e000      	b.n	8003d46 <DisplayTask+0x236>

		default:
			break;
 8003d44:	bf00      	nop
 8003d46:	e083      	b.n	8003e50 <DisplayTask+0x340>

		}
	}
	else //Init Display
	{
		switch (LCD_state)
 8003d48:	4b1e      	ldr	r3, [pc, #120]	; (8003dc4 <DisplayTask+0x2b4>)
 8003d4a:	881b      	ldrh	r3, [r3, #0]
 8003d4c:	2b06      	cmp	r3, #6
 8003d4e:	d87e      	bhi.n	8003e4e <DisplayTask+0x33e>
 8003d50:	a201      	add	r2, pc, #4	; (adr r2, 8003d58 <DisplayTask+0x248>)
 8003d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d56:	bf00      	nop
 8003d58:	08003d75 	.word	0x08003d75
 8003d5c:	08003d89 	.word	0x08003d89
 8003d60:	08003da3 	.word	0x08003da3
 8003d64:	08003de1 	.word	0x08003de1
 8003d68:	08003dfd 	.word	0x08003dfd
 8003d6c:	08003e17 	.word	0x08003e17
 8003d70:	08003e33 	.word	0x08003e33
		{

		case 0:
			DelayTimer(1000000);
 8003d74:	4818      	ldr	r0, [pc, #96]	; (8003dd8 <DisplayTask+0x2c8>)
 8003d76:	f7ff feb7 	bl	8003ae8 <DelayTimer>
			LCD_state++;
 8003d7a:	4b12      	ldr	r3, [pc, #72]	; (8003dc4 <DisplayTask+0x2b4>)
 8003d7c:	881b      	ldrh	r3, [r3, #0]
 8003d7e:	3301      	adds	r3, #1
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	4b10      	ldr	r3, [pc, #64]	; (8003dc4 <DisplayTask+0x2b4>)
 8003d84:	801a      	strh	r2, [r3, #0]
			break;
 8003d86:	e063      	b.n	8003e50 <DisplayTask+0x340>

		case 1: //FunctionSet 1
			LCD_Befehl(0x38);
 8003d88:	2038      	movs	r0, #56	; 0x38
 8003d8a:	f000 f869 	bl	8003e60 <LCD_Befehl>
			DelayTimer(500000);
 8003d8e:	4813      	ldr	r0, [pc, #76]	; (8003ddc <DisplayTask+0x2cc>)
 8003d90:	f7ff feaa 	bl	8003ae8 <DelayTimer>
			LCD_state++;
 8003d94:	4b0b      	ldr	r3, [pc, #44]	; (8003dc4 <DisplayTask+0x2b4>)
 8003d96:	881b      	ldrh	r3, [r3, #0]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	4b09      	ldr	r3, [pc, #36]	; (8003dc4 <DisplayTask+0x2b4>)
 8003d9e:	801a      	strh	r2, [r3, #0]
			break;
 8003da0:	e056      	b.n	8003e50 <DisplayTask+0x340>

		case 2: //FunctionSet 2
			LCD_Befehl(0x38);
 8003da2:	2038      	movs	r0, #56	; 0x38
 8003da4:	f000 f85c 	bl	8003e60 <LCD_Befehl>
			DelayTimer(20000);
 8003da8:	f644 6020 	movw	r0, #20000	; 0x4e20
 8003dac:	f7ff fe9c 	bl	8003ae8 <DelayTimer>
			LCD_state++;
 8003db0:	4b04      	ldr	r3, [pc, #16]	; (8003dc4 <DisplayTask+0x2b4>)
 8003db2:	881b      	ldrh	r3, [r3, #0]
 8003db4:	3301      	adds	r3, #1
 8003db6:	b29a      	uxth	r2, r3
 8003db8:	4b02      	ldr	r3, [pc, #8]	; (8003dc4 <DisplayTask+0x2b4>)
 8003dba:	801a      	strh	r2, [r3, #0]
			break;
 8003dbc:	e048      	b.n	8003e50 <DisplayTask+0x340>
 8003dbe:	bf00      	nop
 8003dc0:	20000bd2 	.word	0x20000bd2
 8003dc4:	20000bd0 	.word	0x20000bd0
 8003dc8:	20000bd4 	.word	0x20000bd4
 8003dcc:	20000bd6 	.word	0x20000bd6
 8003dd0:	200002d4 	.word	0x200002d4
 8003dd4:	01312d00 	.word	0x01312d00
 8003dd8:	000f4240 	.word	0x000f4240
 8003ddc:	0007a120 	.word	0x0007a120

		case 3: //Display Off
			LCD_Befehl(0x08);
 8003de0:	2008      	movs	r0, #8
 8003de2:	f000 f83d 	bl	8003e60 <LCD_Befehl>
			DelayTimer(6000);
 8003de6:	f241 7070 	movw	r0, #6000	; 0x1770
 8003dea:	f7ff fe7d 	bl	8003ae8 <DelayTimer>
			LCD_state++;
 8003dee:	4b19      	ldr	r3, [pc, #100]	; (8003e54 <DisplayTask+0x344>)
 8003df0:	881b      	ldrh	r3, [r3, #0]
 8003df2:	3301      	adds	r3, #1
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	4b17      	ldr	r3, [pc, #92]	; (8003e54 <DisplayTask+0x344>)
 8003df8:	801a      	strh	r2, [r3, #0]
			break;
 8003dfa:	e029      	b.n	8003e50 <DisplayTask+0x340>

		case 4: //Display Clear
			LCD_Befehl(0x01);
 8003dfc:	2001      	movs	r0, #1
 8003dfe:	f000 f82f 	bl	8003e60 <LCD_Befehl>
			DelayTimer(300000);
 8003e02:	4815      	ldr	r0, [pc, #84]	; (8003e58 <DisplayTask+0x348>)
 8003e04:	f7ff fe70 	bl	8003ae8 <DelayTimer>
			LCD_state++;
 8003e08:	4b12      	ldr	r3, [pc, #72]	; (8003e54 <DisplayTask+0x344>)
 8003e0a:	881b      	ldrh	r3, [r3, #0]
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	4b10      	ldr	r3, [pc, #64]	; (8003e54 <DisplayTask+0x344>)
 8003e12:	801a      	strh	r2, [r3, #0]
			break;
 8003e14:	e01c      	b.n	8003e50 <DisplayTask+0x340>

		case 5: //entry mode set
			LCD_Befehl(0x06);
 8003e16:	2006      	movs	r0, #6
 8003e18:	f000 f822 	bl	8003e60 <LCD_Befehl>
			DelayTimer(6000);
 8003e1c:	f241 7070 	movw	r0, #6000	; 0x1770
 8003e20:	f7ff fe62 	bl	8003ae8 <DelayTimer>
			LCD_state++;
 8003e24:	4b0b      	ldr	r3, [pc, #44]	; (8003e54 <DisplayTask+0x344>)
 8003e26:	881b      	ldrh	r3, [r3, #0]
 8003e28:	3301      	adds	r3, #1
 8003e2a:	b29a      	uxth	r2, r3
 8003e2c:	4b09      	ldr	r3, [pc, #36]	; (8003e54 <DisplayTask+0x344>)
 8003e2e:	801a      	strh	r2, [r3, #0]
			break;
 8003e30:	e00e      	b.n	8003e50 <DisplayTask+0x340>

		case 6: //Display on
			LCD_Befehl(0x0C);
 8003e32:	200c      	movs	r0, #12
 8003e34:	f000 f814 	bl	8003e60 <LCD_Befehl>
			DelayTimer(20000);
 8003e38:	f644 6020 	movw	r0, #20000	; 0x4e20
 8003e3c:	f7ff fe54 	bl	8003ae8 <DelayTimer>
			LCD_Init_Status = 1;
 8003e40:	4b06      	ldr	r3, [pc, #24]	; (8003e5c <DisplayTask+0x34c>)
 8003e42:	2201      	movs	r2, #1
 8003e44:	801a      	strh	r2, [r3, #0]
			LCD_state = 0;
 8003e46:	4b03      	ldr	r3, [pc, #12]	; (8003e54 <DisplayTask+0x344>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	801a      	strh	r2, [r3, #0]
			break;
 8003e4c:	e000      	b.n	8003e50 <DisplayTask+0x340>

		default:
			break;
 8003e4e:	bf00      	nop
		}
	}
}
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	20000bd0 	.word	0x20000bd0
 8003e58:	000493e0 	.word	0x000493e0
 8003e5c:	20000bd2 	.word	0x20000bd2

08003e60 <LCD_Befehl>:

void LCD_Befehl(unsigned char command)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	4603      	mov	r3, r0
 8003e68:	71fb      	strb	r3, [r7, #7]
	DIGITAL_IO_SetOutputLow(&LCD_RS);
 8003e6a:	480a      	ldr	r0, [pc, #40]	; (8003e94 <LCD_Befehl+0x34>)
 8003e6c:	f7ff fe2c 	bl	8003ac8 <DIGITAL_IO_SetOutputLow>
	DIGITAL_IO_SetOutputLow(&LCD_RW);
 8003e70:	4809      	ldr	r0, [pc, #36]	; (8003e98 <LCD_Befehl+0x38>)
 8003e72:	f7ff fe29 	bl	8003ac8 <DIGITAL_IO_SetOutputLow>
	BUS_IO_Write(&LCD_DATA, command);
 8003e76:	79fb      	ldrb	r3, [r7, #7]
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	4808      	ldr	r0, [pc, #32]	; (8003e9c <LCD_Befehl+0x3c>)
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	f7ff f8ed 	bl	800305c <BUS_IO_Write>
    DIGITAL_IO_SetOutputHigh(&LCD_Enable);
 8003e82:	4807      	ldr	r0, [pc, #28]	; (8003ea0 <LCD_Befehl+0x40>)
 8003e84:	f7ff fe10 	bl	8003aa8 <DIGITAL_IO_SetOutputHigh>
    DIGITAL_IO_SetOutputLow(&LCD_Enable);
 8003e88:	4805      	ldr	r0, [pc, #20]	; (8003ea0 <LCD_Befehl+0x40>)
 8003e8a:	f7ff fe1d 	bl	8003ac8 <DIGITAL_IO_SetOutputLow>
}
 8003e8e:	3708      	adds	r7, #8
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	08009a08 	.word	0x08009a08
 8003e98:	08009a1c 	.word	0x08009a1c
 8003e9c:	2000025c 	.word	0x2000025c
 8003ea0:	080099f4 	.word	0x080099f4

08003ea4 <LCD_Write>:

void LCD_Write(unsigned char letter)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	4603      	mov	r3, r0
 8003eac:	71fb      	strb	r3, [r7, #7]
	DIGITAL_IO_SetOutputHigh(&LCD_RS);
 8003eae:	480a      	ldr	r0, [pc, #40]	; (8003ed8 <LCD_Write+0x34>)
 8003eb0:	f7ff fdfa 	bl	8003aa8 <DIGITAL_IO_SetOutputHigh>
	DIGITAL_IO_SetOutputLow(&LCD_RW);
 8003eb4:	4809      	ldr	r0, [pc, #36]	; (8003edc <LCD_Write+0x38>)
 8003eb6:	f7ff fe07 	bl	8003ac8 <DIGITAL_IO_SetOutputLow>
	BUS_IO_Write(&LCD_DATA, letter);
 8003eba:	79fb      	ldrb	r3, [r7, #7]
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	4808      	ldr	r0, [pc, #32]	; (8003ee0 <LCD_Write+0x3c>)
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	f7ff f8cb 	bl	800305c <BUS_IO_Write>
    DIGITAL_IO_SetOutputHigh(&LCD_Enable);
 8003ec6:	4807      	ldr	r0, [pc, #28]	; (8003ee4 <LCD_Write+0x40>)
 8003ec8:	f7ff fdee 	bl	8003aa8 <DIGITAL_IO_SetOutputHigh>

    DIGITAL_IO_SetOutputLow(&LCD_Enable);
 8003ecc:	4805      	ldr	r0, [pc, #20]	; (8003ee4 <LCD_Write+0x40>)
 8003ece:	f7ff fdfb 	bl	8003ac8 <DIGITAL_IO_SetOutputLow>
}
 8003ed2:	3708      	adds	r7, #8
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	08009a08 	.word	0x08009a08
 8003edc:	08009a1c 	.word	0x08009a1c
 8003ee0:	2000025c 	.word	0x2000025c
 8003ee4:	080099f4 	.word	0x080099f4

08003ee8 <LCD_SollRPM>:
void LCD_SollRPM(unsigned short RPM)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	4603      	mov	r3, r0
 8003ef0:	80fb      	strh	r3, [r7, #6]
	char sRPM[4];
	sprintf(sRPM, "%*d",4,RPM);
 8003ef2:	88fb      	ldrh	r3, [r7, #6]
 8003ef4:	f107 0208 	add.w	r2, r7, #8
 8003ef8:	4610      	mov	r0, r2
 8003efa:	490d      	ldr	r1, [pc, #52]	; (8003f30 <LCD_SollRPM+0x48>)
 8003efc:	2204      	movs	r2, #4
 8003efe:	f001 ff4f 	bl	8005da0 <sprintf>
	for(int i = 0; i<4; i++)
 8003f02:	2300      	movs	r3, #0
 8003f04:	60fb      	str	r3, [r7, #12]
 8003f06:	e00d      	b.n	8003f24 <LCD_SollRPM+0x3c>
	{
		LCD_Display[1][6+i] = sRPM[i];
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	3306      	adds	r3, #6
 8003f0c:	f107 0108 	add.w	r1, r7, #8
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	440a      	add	r2, r1
 8003f14:	7811      	ldrb	r1, [r2, #0]
 8003f16:	4a07      	ldr	r2, [pc, #28]	; (8003f34 <LCD_SollRPM+0x4c>)
 8003f18:	4413      	add	r3, r2
 8003f1a:	460a      	mov	r2, r1
 8003f1c:	751a      	strb	r2, [r3, #20]
}
void LCD_SollRPM(unsigned short RPM)
{
	char sRPM[4];
	sprintf(sRPM, "%*d",4,RPM);
	for(int i = 0; i<4; i++)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	3301      	adds	r3, #1
 8003f22:	60fb      	str	r3, [r7, #12]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2b03      	cmp	r3, #3
 8003f28:	ddee      	ble.n	8003f08 <LCD_SollRPM+0x20>
	{
		LCD_Display[1][6+i] = sRPM[i];
	}
}
 8003f2a:	3710      	adds	r7, #16
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	08009a94 	.word	0x08009a94
 8003f34:	200002d4 	.word	0x200002d4

08003f38 <LCD_IstRPM>:
void LCD_IstRPM(uint32_t RPM)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b086      	sub	sp, #24
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
	char sRPM[5];
	sprintf(sRPM, "%*.d",5,RPM);
 8003f40:	f107 030c 	add.w	r3, r7, #12
 8003f44:	4618      	mov	r0, r3
 8003f46:	490e      	ldr	r1, [pc, #56]	; (8003f80 <LCD_IstRPM+0x48>)
 8003f48:	2205      	movs	r2, #5
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f001 ff28 	bl	8005da0 <sprintf>
	for(int i = 0; i<5; i++)
 8003f50:	2300      	movs	r3, #0
 8003f52:	617b      	str	r3, [r7, #20]
 8003f54:	e00d      	b.n	8003f72 <LCD_IstRPM+0x3a>
	{
		LCD_Display[1][13+i] = sRPM[i];
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	330d      	adds	r3, #13
 8003f5a:	f107 010c 	add.w	r1, r7, #12
 8003f5e:	697a      	ldr	r2, [r7, #20]
 8003f60:	440a      	add	r2, r1
 8003f62:	7811      	ldrb	r1, [r2, #0]
 8003f64:	4a07      	ldr	r2, [pc, #28]	; (8003f84 <LCD_IstRPM+0x4c>)
 8003f66:	4413      	add	r3, r2
 8003f68:	460a      	mov	r2, r1
 8003f6a:	751a      	strb	r2, [r3, #20]
}
void LCD_IstRPM(uint32_t RPM)
{
	char sRPM[5];
	sprintf(sRPM, "%*.d",5,RPM);
	for(int i = 0; i<5; i++)
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	3301      	adds	r3, #1
 8003f70:	617b      	str	r3, [r7, #20]
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	2b04      	cmp	r3, #4
 8003f76:	ddee      	ble.n	8003f56 <LCD_IstRPM+0x1e>
	{
		LCD_Display[1][13+i] = sRPM[i];
	}
}
 8003f78:	3718      	adds	r7, #24
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	08009a98 	.word	0x08009a98
 8003f84:	200002d4 	.word	0x200002d4

08003f88 <LCD_IstVolt>:
void LCD_IstVolt(float IstVolt)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af02      	add	r7, sp, #8
 8003f8e:	6078      	str	r0, [r7, #4]
	char sVolt[4];
	sprintf(sVolt, "%*.2f",4,IstVolt);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 ffc5 	bl	8004f20 <__aeabi_f2d>
 8003f96:	4602      	mov	r2, r0
 8003f98:	460b      	mov	r3, r1
 8003f9a:	f107 0108 	add.w	r1, r7, #8
 8003f9e:	e9cd 2300 	strd	r2, r3, [sp]
 8003fa2:	4608      	mov	r0, r1
 8003fa4:	490d      	ldr	r1, [pc, #52]	; (8003fdc <LCD_IstVolt+0x54>)
 8003fa6:	2204      	movs	r2, #4
 8003fa8:	f001 fefa 	bl	8005da0 <sprintf>
	for(int i = 0; i<4; i++)
 8003fac:	2300      	movs	r3, #0
 8003fae:	60fb      	str	r3, [r7, #12]
 8003fb0:	e00e      	b.n	8003fd0 <LCD_IstVolt+0x48>
	{
		LCD_Display[2][14+i] = sVolt[i];
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	330e      	adds	r3, #14
 8003fb6:	f107 0108 	add.w	r1, r7, #8
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	440a      	add	r2, r1
 8003fbe:	7811      	ldrb	r1, [r2, #0]
 8003fc0:	4a07      	ldr	r2, [pc, #28]	; (8003fe0 <LCD_IstVolt+0x58>)
 8003fc2:	4413      	add	r3, r2
 8003fc4:	460a      	mov	r2, r1
 8003fc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
void LCD_IstVolt(float IstVolt)
{
	char sVolt[4];
	sprintf(sVolt, "%*.2f",4,IstVolt);
	for(int i = 0; i<4; i++)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	3301      	adds	r3, #1
 8003fce:	60fb      	str	r3, [r7, #12]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2b03      	cmp	r3, #3
 8003fd4:	dded      	ble.n	8003fb2 <LCD_IstVolt+0x2a>
	{
		LCD_Display[2][14+i] = sVolt[i];
	}
}
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	08009aa0 	.word	0x08009aa0
 8003fe0:	200002d4 	.word	0x200002d4

08003fe4 <LCD_SollVolt>:
void LCD_SollVolt(float SollVolt)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b086      	sub	sp, #24
 8003fe8:	af02      	add	r7, sp, #8
 8003fea:	6078      	str	r0, [r7, #4]
	char sVolt[4];
	sprintf(sVolt, "%*.2f",4,SollVolt);
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f000 ff97 	bl	8004f20 <__aeabi_f2d>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	f107 0108 	add.w	r1, r7, #8
 8003ffa:	e9cd 2300 	strd	r2, r3, [sp]
 8003ffe:	4608      	mov	r0, r1
 8004000:	490d      	ldr	r1, [pc, #52]	; (8004038 <LCD_SollVolt+0x54>)
 8004002:	2204      	movs	r2, #4
 8004004:	f001 fecc 	bl	8005da0 <sprintf>
	for(int i = 0; i<4; i++)
 8004008:	2300      	movs	r3, #0
 800400a:	60fb      	str	r3, [r7, #12]
 800400c:	e00e      	b.n	800402c <LCD_SollVolt+0x48>
	{
		LCD_Display[2][6+i] = sVolt[i];
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	3306      	adds	r3, #6
 8004012:	f107 0108 	add.w	r1, r7, #8
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	440a      	add	r2, r1
 800401a:	7811      	ldrb	r1, [r2, #0]
 800401c:	4a07      	ldr	r2, [pc, #28]	; (800403c <LCD_SollVolt+0x58>)
 800401e:	4413      	add	r3, r2
 8004020:	460a      	mov	r2, r1
 8004022:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
void LCD_SollVolt(float SollVolt)
{
	char sVolt[4];
	sprintf(sVolt, "%*.2f",4,SollVolt);
	for(int i = 0; i<4; i++)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	3301      	adds	r3, #1
 800402a:	60fb      	str	r3, [r7, #12]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2b03      	cmp	r3, #3
 8004030:	dded      	ble.n	800400e <LCD_SollVolt+0x2a>
	{
		LCD_Display[2][6+i] = sVolt[i];
	}
}
 8004032:	3710      	adds	r7, #16
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	08009aa0 	.word	0x08009aa0
 800403c:	200002d4 	.word	0x200002d4

08004040 <LCD_SetDuty>:

void LCD_SetDuty(uint32_t duty_cycle)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
	char sDuty[3];
	sprintf(sDuty, "%*d" ,3,duty_cycle);
 8004048:	f107 0308 	add.w	r3, r7, #8
 800404c:	4618      	mov	r0, r3
 800404e:	490e      	ldr	r1, [pc, #56]	; (8004088 <LCD_SetDuty+0x48>)
 8004050:	2203      	movs	r2, #3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f001 fea4 	bl	8005da0 <sprintf>
	for(int i = 0; i<3; i++)
 8004058:	2300      	movs	r3, #0
 800405a:	60fb      	str	r3, [r7, #12]
 800405c:	e00e      	b.n	800407c <LCD_SetDuty+0x3c>
	{
		LCD_Display[3][6+i] = sDuty[i];
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	3306      	adds	r3, #6
 8004062:	f107 0108 	add.w	r1, r7, #8
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	440a      	add	r2, r1
 800406a:	7811      	ldrb	r1, [r2, #0]
 800406c:	4a07      	ldr	r2, [pc, #28]	; (800408c <LCD_SetDuty+0x4c>)
 800406e:	4413      	add	r3, r2
 8004070:	460a      	mov	r2, r1
 8004072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

void LCD_SetDuty(uint32_t duty_cycle)
{
	char sDuty[3];
	sprintf(sDuty, "%*d" ,3,duty_cycle);
	for(int i = 0; i<3; i++)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	3301      	adds	r3, #1
 800407a:	60fb      	str	r3, [r7, #12]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2b02      	cmp	r3, #2
 8004080:	dded      	ble.n	800405e <LCD_SetDuty+0x1e>
	{
		LCD_Display[3][6+i] = sDuty[i];
	}
}
 8004082:	3710      	adds	r7, #16
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	08009a94 	.word	0x08009a94
 800408c:	200002d4 	.word	0x200002d4

08004090 <LCD_SetDelay>:
void LCD_SetDelay(short delay)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	4603      	mov	r3, r0
 8004098:	80fb      	strh	r3, [r7, #6]
	char sDelay[3];
	sprintf(sDelay, "%*d",3,delay);
 800409a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800409e:	f107 0208 	add.w	r2, r7, #8
 80040a2:	4610      	mov	r0, r2
 80040a4:	490d      	ldr	r1, [pc, #52]	; (80040dc <LCD_SetDelay+0x4c>)
 80040a6:	2203      	movs	r2, #3
 80040a8:	f001 fe7a 	bl	8005da0 <sprintf>
	for(int i = 0; i<3; i++)
 80040ac:	2300      	movs	r3, #0
 80040ae:	60fb      	str	r3, [r7, #12]
 80040b0:	e00e      	b.n	80040d0 <LCD_SetDelay+0x40>
	{
		LCD_Display[3][17+i] = sDelay[i];
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	3311      	adds	r3, #17
 80040b6:	f107 0108 	add.w	r1, r7, #8
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	440a      	add	r2, r1
 80040be:	7811      	ldrb	r1, [r2, #0]
 80040c0:	4a07      	ldr	r2, [pc, #28]	; (80040e0 <LCD_SetDelay+0x50>)
 80040c2:	4413      	add	r3, r2
 80040c4:	460a      	mov	r2, r1
 80040c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
void LCD_SetDelay(short delay)
{
	char sDelay[3];
	sprintf(sDelay, "%*d",3,delay);
	for(int i = 0; i<3; i++)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	3301      	adds	r3, #1
 80040ce:	60fb      	str	r3, [r7, #12]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	dded      	ble.n	80040b2 <LCD_SetDelay+0x22>
	{
		LCD_Display[3][17+i] = sDelay[i];
	}
}
 80040d6:	3710      	adds	r7, #16
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	08009a94 	.word	0x08009a94
 80040e0:	200002d4 	.word	0x200002d4

080040e4 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	460b      	mov	r3, r1
 80040ee:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 80040f0:	78fb      	ldrb	r3, [r7, #3]
 80040f2:	2201      	movs	r2, #1
 80040f4:	409a      	lsls	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	605a      	str	r2, [r3, #4]
}
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	460b      	mov	r3, r1
 800410e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 8004110:	78fb      	ldrb	r3, [r7, #3]
 8004112:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004116:	409a      	lsls	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	605a      	str	r2, [r3, #4]
}
 800411c:	370c      	adds	r7, #12
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop

08004128 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	460b      	mov	r3, r1
 8004132:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004138:	78fb      	ldrb	r3, [r7, #3]
 800413a:	fa22 f303 	lsr.w	r3, r2, r3
 800413e:	f003 0301 	and.w	r3, r3, #1
}
 8004142:	4618      	mov	r0, r3
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop

08004150 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	7c1b      	ldrb	r3, [r3, #16]
 8004160:	4610      	mov	r0, r2
 8004162:	4619      	mov	r1, r3
 8004164:	f7ff ffbe 	bl	80040e4 <XMC_GPIO_SetOutputHigh>
}
 8004168:	3708      	adds	r7, #8
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop

08004170 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	7c1b      	ldrb	r3, [r3, #16]
 8004180:	4610      	mov	r0, r2
 8004182:	4619      	mov	r1, r3
 8004184:	f7ff ffbe 	bl	8004104 <XMC_GPIO_SetOutputLow>
}
 8004188:	3708      	adds	r7, #8
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop

08004190 <DIGITAL_IO_GetInput>:
* }
*  @endcode
*/

__STATIC_INLINE uint32_t DIGITAL_IO_GetInput(const DIGITAL_IO_t *const handler)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_GetInput: handler null pointer", handler != NULL);
  return XMC_GPIO_GetInput(handler->gpio_port, handler->gpio_pin);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	7c1b      	ldrb	r3, [r3, #16]
 80041a0:	4610      	mov	r0, r2
 80041a2:	4619      	mov	r1, r3
 80041a4:	f7ff ffc0 	bl	8004128 <XMC_GPIO_GetInput>
 80041a8:	4603      	mov	r3, r0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3708      	adds	r7, #8
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop

080041b4 <XMC_POSIF_MCM_UpdateMultiChannelPattern>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_POSIF_MCM_SetMultiChannelPattern() \n\n\n
 */
__STATIC_INLINE void XMC_POSIF_MCM_UpdateMultiChannelPattern(XMC_POSIF_t *const peripheral)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  peripheral->MCMS |= (uint32_t)POSIF_MCMS_STMR_Msk;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041c0:	f043 0204 	orr.w	r2, r3, #4
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	649a      	str	r2, [r3, #72]	; 0x48
}
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop

080041d4 <ResetGateDriver>:
 */

#include <Posif_BLDC.h>
struct Posif_BLDC Posifval = {108,300,0,1};
void ResetGateDriver(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
	if(!DIGITAL_IO_GetInput(&I_nFAULT))
 80041da:	480c      	ldr	r0, [pc, #48]	; (800420c <ResetGateDriver+0x38>)
 80041dc:	f7ff ffd8 	bl	8004190 <DIGITAL_IO_GetInput>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d10f      	bne.n	8004206 <ResetGateDriver+0x32>
	{
		DIGITAL_IO_SetOutputLow(&O_G_EN);
 80041e6:	480a      	ldr	r0, [pc, #40]	; (8004210 <ResetGateDriver+0x3c>)
 80041e8:	f7ff ffc2 	bl	8004170 <DIGITAL_IO_SetOutputLow>
		for(int y=0;y<30;y++){
 80041ec:	2300      	movs	r3, #0
 80041ee:	607b      	str	r3, [r7, #4]
 80041f0:	e003      	b.n	80041fa <ResetGateDriver+0x26>
		asm("nop");
 80041f2:	bf00      	nop
void ResetGateDriver(void)
{
	if(!DIGITAL_IO_GetInput(&I_nFAULT))
	{
		DIGITAL_IO_SetOutputLow(&O_G_EN);
		for(int y=0;y<30;y++){
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	3301      	adds	r3, #1
 80041f8:	607b      	str	r3, [r7, #4]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2b1d      	cmp	r3, #29
 80041fe:	ddf8      	ble.n	80041f2 <ResetGateDriver+0x1e>
		asm("nop");
		}
		DIGITAL_IO_SetOutputHigh(&O_G_EN);
 8004200:	4803      	ldr	r0, [pc, #12]	; (8004210 <ResetGateDriver+0x3c>)
 8004202:	f7ff ffa5 	bl	8004150 <DIGITAL_IO_SetOutputHigh>

	}

}
 8004206:	3708      	adds	r7, #8
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	080099a4 	.word	0x080099a4
 8004210:	08009990 	.word	0x08009990

08004214 <CCU80_3_IRQHandler>:
void PeriodMatchInterruptHandler(void)

{
 8004214:	b580      	push	{r7, lr}
 8004216:	af00      	add	r7, sp, #0
	//ResetGateDriver();

if(Posifval.count > Posifval.ten_milli_count) /*Check if it is time to apply next pattern?*/
 8004218:	4b17      	ldr	r3, [pc, #92]	; (8004278 <CCU80_3_IRQHandler+0x64>)
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	4a16      	ldr	r2, [pc, #88]	; (8004278 <CCU80_3_IRQHandler+0x64>)
 800421e:	8812      	ldrh	r2, [r2, #0]
 8004220:	4293      	cmp	r3, r2
 8004222:	d922      	bls.n	800426a <CCU80_3_IRQHandler+0x56>

{

if(Posifval.pat_index > (uint8_t)6) /*Check if pattern index is greater than 6*/
 8004224:	4b14      	ldr	r3, [pc, #80]	; (8004278 <CCU80_3_IRQHandler+0x64>)
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	2b06      	cmp	r3, #6
 800422a:	d902      	bls.n	8004232 <CCU80_3_IRQHandler+0x1e>

{

	Posifval.pat_index = (uint8_t)1;
 800422c:	4b12      	ldr	r3, [pc, #72]	; (8004278 <CCU80_3_IRQHandler+0x64>)
 800422e:	2201      	movs	r2, #1
 8004230:	609a      	str	r2, [r3, #8]

}


PWM_BC_SetNextMCPatt(&PWM_BC_0,Posifval.pat_index); /*Sets the MCM pattern to shadow register*/
 8004232:	4b11      	ldr	r3, [pc, #68]	; (8004278 <CCU80_3_IRQHandler+0x64>)
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	b2db      	uxtb	r3, r3
 8004238:	4810      	ldr	r0, [pc, #64]	; (800427c <CCU80_3_IRQHandler+0x68>)
 800423a:	4619      	mov	r1, r3
 800423c:	f7fe fae6 	bl	800280c <PWM_BC_SetNextMCPatt>


PWM_BC_ModulationForSyncTransfer(&PWM_BC_0); /*Compare value update*/
 8004240:	480e      	ldr	r0, [pc, #56]	; (800427c <CCU80_3_IRQHandler+0x68>)
 8004242:	f7fe fb57 	bl	80028f4 <PWM_BC_ModulationForSyncTransfer>
//PWM_BC_ModulationForImmedTransfer(&PWM_BC_0);
XMC_POSIF_MCM_UpdateMultiChannelPattern(POSIF0);/*Immediate Shadow transfer*/
 8004246:	480e      	ldr	r0, [pc, #56]	; (8004280 <CCU80_3_IRQHandler+0x6c>)
 8004248:	f7ff ffb4 	bl	80041b4 <XMC_POSIF_MCM_UpdateMultiChannelPattern>


/*Apply dutycyle*/

PWM_BC_DutyCycleUpdate(&PWM_BC_0,Posifval.duty_cycle);
 800424c:	4b0a      	ldr	r3, [pc, #40]	; (8004278 <CCU80_3_IRQHandler+0x64>)
 800424e:	885b      	ldrh	r3, [r3, #2]
 8004250:	480a      	ldr	r0, [pc, #40]	; (800427c <CCU80_3_IRQHandler+0x68>)
 8004252:	4619      	mov	r1, r3
 8004254:	f7fe faf8 	bl	8002848 <PWM_BC_DutyCycleUpdate>


Posifval.pat_index++;
 8004258:	4b07      	ldr	r3, [pc, #28]	; (8004278 <CCU80_3_IRQHandler+0x64>)
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	3301      	adds	r3, #1
 800425e:	4a06      	ldr	r2, [pc, #24]	; (8004278 <CCU80_3_IRQHandler+0x64>)
 8004260:	6093      	str	r3, [r2, #8]

Posifval.count = 0;
 8004262:	4b05      	ldr	r3, [pc, #20]	; (8004278 <CCU80_3_IRQHandler+0x64>)
 8004264:	2200      	movs	r2, #0
 8004266:	605a      	str	r2, [r3, #4]
 8004268:	e004      	b.n	8004274 <CCU80_3_IRQHandler+0x60>

else

{

	Posifval.count++;
 800426a:	4b03      	ldr	r3, [pc, #12]	; (8004278 <CCU80_3_IRQHandler+0x64>)
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	3301      	adds	r3, #1
 8004270:	4a01      	ldr	r2, [pc, #4]	; (8004278 <CCU80_3_IRQHandler+0x64>)
 8004272:	6053      	str	r3, [r2, #4]

}


}
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	20000324 	.word	0x20000324
 800427c:	200000a0 	.word	0x200000a0
 8004280:	40028000 	.word	0x40028000

08004284 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	460b      	mov	r3, r1
 800428e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004294:	78fb      	ldrb	r3, [r7, #3]
 8004296:	fa22 f303 	lsr.w	r3, r2, r3
 800429a:	f003 0301 	and.w	r3, r3, #1
}
 800429e:	4618      	mov	r0, r3
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop

080042ac <DIGITAL_IO_GetInput>:
* }
*  @endcode
*/

__STATIC_INLINE uint32_t DIGITAL_IO_GetInput(const DIGITAL_IO_t *const handler)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_GetInput: handler null pointer", handler != NULL);
  return XMC_GPIO_GetInput(handler->gpio_port, handler->gpio_pin);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	7c1b      	ldrb	r3, [r3, #16]
 80042bc:	4610      	mov	r0, r2
 80042be:	4619      	mov	r1, r3
 80042c0:	f7ff ffe0 	bl	8004284 <XMC_GPIO_GetInput>
 80042c4:	4603      	mov	r3, r0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3708      	adds	r7, #8
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop

080042d0 <Speedhandler>:
uint16_t speedindex=0;
uint8_t Hall1_status=0;
uint16_t hallint_count=0;
uint16_t lasthallint_count=0;
uint32_t revolves_counter=0;
void Speedhandler(void){
 80042d0:	b580      	push	{r7, lr}
 80042d2:	af00      	add	r7, sp, #0
	ResetGateDriver();
 80042d4:	f7ff ff7e 	bl	80041d4 <ResetGateDriver>
	if(Posifval.ten_milli_count==95){speedindex=1;}
 80042d8:	4b58      	ldr	r3, [pc, #352]	; (800443c <Speedhandler+0x16c>)
 80042da:	881b      	ldrh	r3, [r3, #0]
 80042dc:	2b5f      	cmp	r3, #95	; 0x5f
 80042de:	d103      	bne.n	80042e8 <Speedhandler+0x18>
 80042e0:	4b57      	ldr	r3, [pc, #348]	; (8004440 <Speedhandler+0x170>)
 80042e2:	2201      	movs	r2, #1
 80042e4:	801a      	strh	r2, [r3, #0]
 80042e6:	e05a      	b.n	800439e <Speedhandler+0xce>
	else if(Posifval.ten_milli_count>95){speedindex=0;}
 80042e8:	4b54      	ldr	r3, [pc, #336]	; (800443c <Speedhandler+0x16c>)
 80042ea:	881b      	ldrh	r3, [r3, #0]
 80042ec:	2b5f      	cmp	r3, #95	; 0x5f
 80042ee:	d903      	bls.n	80042f8 <Speedhandler+0x28>
 80042f0:	4b53      	ldr	r3, [pc, #332]	; (8004440 <Speedhandler+0x170>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	801a      	strh	r2, [r3, #0]
 80042f6:	e052      	b.n	800439e <Speedhandler+0xce>
	else if(Posifval.ten_milli_count<95&&Posifval.ten_milli_count>80){speedindex=2;}
 80042f8:	4b50      	ldr	r3, [pc, #320]	; (800443c <Speedhandler+0x16c>)
 80042fa:	881b      	ldrh	r3, [r3, #0]
 80042fc:	2b5e      	cmp	r3, #94	; 0x5e
 80042fe:	d807      	bhi.n	8004310 <Speedhandler+0x40>
 8004300:	4b4e      	ldr	r3, [pc, #312]	; (800443c <Speedhandler+0x16c>)
 8004302:	881b      	ldrh	r3, [r3, #0]
 8004304:	2b50      	cmp	r3, #80	; 0x50
 8004306:	d903      	bls.n	8004310 <Speedhandler+0x40>
 8004308:	4b4d      	ldr	r3, [pc, #308]	; (8004440 <Speedhandler+0x170>)
 800430a:	2202      	movs	r2, #2
 800430c:	801a      	strh	r2, [r3, #0]
 800430e:	e046      	b.n	800439e <Speedhandler+0xce>
	else if(Posifval.ten_milli_count==80){speedindex=3;}
 8004310:	4b4a      	ldr	r3, [pc, #296]	; (800443c <Speedhandler+0x16c>)
 8004312:	881b      	ldrh	r3, [r3, #0]
 8004314:	2b50      	cmp	r3, #80	; 0x50
 8004316:	d103      	bne.n	8004320 <Speedhandler+0x50>
 8004318:	4b49      	ldr	r3, [pc, #292]	; (8004440 <Speedhandler+0x170>)
 800431a:	2203      	movs	r2, #3
 800431c:	801a      	strh	r2, [r3, #0]
 800431e:	e03e      	b.n	800439e <Speedhandler+0xce>
	else if(Posifval.ten_milli_count<80&&Posifval.ten_milli_count>=70){speedindex=4;}
 8004320:	4b46      	ldr	r3, [pc, #280]	; (800443c <Speedhandler+0x16c>)
 8004322:	881b      	ldrh	r3, [r3, #0]
 8004324:	2b4f      	cmp	r3, #79	; 0x4f
 8004326:	d807      	bhi.n	8004338 <Speedhandler+0x68>
 8004328:	4b44      	ldr	r3, [pc, #272]	; (800443c <Speedhandler+0x16c>)
 800432a:	881b      	ldrh	r3, [r3, #0]
 800432c:	2b45      	cmp	r3, #69	; 0x45
 800432e:	d903      	bls.n	8004338 <Speedhandler+0x68>
 8004330:	4b43      	ldr	r3, [pc, #268]	; (8004440 <Speedhandler+0x170>)
 8004332:	2204      	movs	r2, #4
 8004334:	801a      	strh	r2, [r3, #0]
 8004336:	e032      	b.n	800439e <Speedhandler+0xce>
	else if(Posifval.ten_milli_count<70&&Posifval.ten_milli_count>=60){speedindex=5;}
 8004338:	4b40      	ldr	r3, [pc, #256]	; (800443c <Speedhandler+0x16c>)
 800433a:	881b      	ldrh	r3, [r3, #0]
 800433c:	2b45      	cmp	r3, #69	; 0x45
 800433e:	d807      	bhi.n	8004350 <Speedhandler+0x80>
 8004340:	4b3e      	ldr	r3, [pc, #248]	; (800443c <Speedhandler+0x16c>)
 8004342:	881b      	ldrh	r3, [r3, #0]
 8004344:	2b3b      	cmp	r3, #59	; 0x3b
 8004346:	d903      	bls.n	8004350 <Speedhandler+0x80>
 8004348:	4b3d      	ldr	r3, [pc, #244]	; (8004440 <Speedhandler+0x170>)
 800434a:	2205      	movs	r2, #5
 800434c:	801a      	strh	r2, [r3, #0]
 800434e:	e026      	b.n	800439e <Speedhandler+0xce>
	else if(Posifval.ten_milli_count<60&&Posifval.ten_milli_count>50){speedindex=6;}
 8004350:	4b3a      	ldr	r3, [pc, #232]	; (800443c <Speedhandler+0x16c>)
 8004352:	881b      	ldrh	r3, [r3, #0]
 8004354:	2b3b      	cmp	r3, #59	; 0x3b
 8004356:	d807      	bhi.n	8004368 <Speedhandler+0x98>
 8004358:	4b38      	ldr	r3, [pc, #224]	; (800443c <Speedhandler+0x16c>)
 800435a:	881b      	ldrh	r3, [r3, #0]
 800435c:	2b32      	cmp	r3, #50	; 0x32
 800435e:	d903      	bls.n	8004368 <Speedhandler+0x98>
 8004360:	4b37      	ldr	r3, [pc, #220]	; (8004440 <Speedhandler+0x170>)
 8004362:	2206      	movs	r2, #6
 8004364:	801a      	strh	r2, [r3, #0]
 8004366:	e01a      	b.n	800439e <Speedhandler+0xce>
	else if(Posifval.ten_milli_count<50&&Posifval.ten_milli_count>44){speedindex=7;}
 8004368:	4b34      	ldr	r3, [pc, #208]	; (800443c <Speedhandler+0x16c>)
 800436a:	881b      	ldrh	r3, [r3, #0]
 800436c:	2b31      	cmp	r3, #49	; 0x31
 800436e:	d807      	bhi.n	8004380 <Speedhandler+0xb0>
 8004370:	4b32      	ldr	r3, [pc, #200]	; (800443c <Speedhandler+0x16c>)
 8004372:	881b      	ldrh	r3, [r3, #0]
 8004374:	2b2c      	cmp	r3, #44	; 0x2c
 8004376:	d903      	bls.n	8004380 <Speedhandler+0xb0>
 8004378:	4b31      	ldr	r3, [pc, #196]	; (8004440 <Speedhandler+0x170>)
 800437a:	2207      	movs	r2, #7
 800437c:	801a      	strh	r2, [r3, #0]
 800437e:	e00e      	b.n	800439e <Speedhandler+0xce>
	else if(Posifval.ten_milli_count<44&&Posifval.ten_milli_count>32){speedindex=8;}
 8004380:	4b2e      	ldr	r3, [pc, #184]	; (800443c <Speedhandler+0x16c>)
 8004382:	881b      	ldrh	r3, [r3, #0]
 8004384:	2b2b      	cmp	r3, #43	; 0x2b
 8004386:	d807      	bhi.n	8004398 <Speedhandler+0xc8>
 8004388:	4b2c      	ldr	r3, [pc, #176]	; (800443c <Speedhandler+0x16c>)
 800438a:	881b      	ldrh	r3, [r3, #0]
 800438c:	2b20      	cmp	r3, #32
 800438e:	d903      	bls.n	8004398 <Speedhandler+0xc8>
 8004390:	4b2b      	ldr	r3, [pc, #172]	; (8004440 <Speedhandler+0x170>)
 8004392:	2208      	movs	r2, #8
 8004394:	801a      	strh	r2, [r3, #0]
 8004396:	e002      	b.n	800439e <Speedhandler+0xce>
	else {speedindex=9;}
 8004398:	4b29      	ldr	r3, [pc, #164]	; (8004440 <Speedhandler+0x170>)
 800439a:	2209      	movs	r2, #9
 800439c:	801a      	strh	r2, [r3, #0]
		switch(speedindex) {
 800439e:	4b28      	ldr	r3, [pc, #160]	; (8004440 <Speedhandler+0x170>)
 80043a0:	881b      	ldrh	r3, [r3, #0]
 80043a2:	2b09      	cmp	r3, #9
 80043a4:	d848      	bhi.n	8004438 <Speedhandler+0x168>
 80043a6:	a201      	add	r2, pc, #4	; (adr r2, 80043ac <Speedhandler+0xdc>)
 80043a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ac:	080043d5 	.word	0x080043d5
 80043b0:	080043df 	.word	0x080043df
 80043b4:	080043e9 	.word	0x080043e9
 80043b8:	080043f3 	.word	0x080043f3
 80043bc:	080043fd 	.word	0x080043fd
 80043c0:	08004407 	.word	0x08004407
 80043c4:	08004411 	.word	0x08004411
 80043c8:	0800441b 	.word	0x0800441b
 80043cc:	08004425 	.word	0x08004425
 80043d0:	0800442f 	.word	0x0800442f
		case 0: Posifval.duty_cycle=375; break;
 80043d4:	4b19      	ldr	r3, [pc, #100]	; (800443c <Speedhandler+0x16c>)
 80043d6:	f240 1277 	movw	r2, #375	; 0x177
 80043da:	805a      	strh	r2, [r3, #2]
 80043dc:	e02d      	b.n	800443a <Speedhandler+0x16a>
			case 1: Posifval.duty_cycle=400; break;
 80043de:	4b17      	ldr	r3, [pc, #92]	; (800443c <Speedhandler+0x16c>)
 80043e0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80043e4:	805a      	strh	r2, [r3, #2]
 80043e6:	e028      	b.n	800443a <Speedhandler+0x16a>
			case 2: Posifval.duty_cycle=420; break;
 80043e8:	4b14      	ldr	r3, [pc, #80]	; (800443c <Speedhandler+0x16c>)
 80043ea:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 80043ee:	805a      	strh	r2, [r3, #2]
 80043f0:	e023      	b.n	800443a <Speedhandler+0x16a>
			case 3: Posifval.duty_cycle=430; break;
 80043f2:	4b12      	ldr	r3, [pc, #72]	; (800443c <Speedhandler+0x16c>)
 80043f4:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 80043f8:	805a      	strh	r2, [r3, #2]
 80043fa:	e01e      	b.n	800443a <Speedhandler+0x16a>
			case 4: Posifval.duty_cycle=450; break;
 80043fc:	4b0f      	ldr	r3, [pc, #60]	; (800443c <Speedhandler+0x16c>)
 80043fe:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8004402:	805a      	strh	r2, [r3, #2]
 8004404:	e019      	b.n	800443a <Speedhandler+0x16a>
			case 5: Posifval.duty_cycle=500; break;
 8004406:	4b0d      	ldr	r3, [pc, #52]	; (800443c <Speedhandler+0x16c>)
 8004408:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800440c:	805a      	strh	r2, [r3, #2]
 800440e:	e014      	b.n	800443a <Speedhandler+0x16a>
			case 6: Posifval.duty_cycle=580; break;
 8004410:	4b0a      	ldr	r3, [pc, #40]	; (800443c <Speedhandler+0x16c>)
 8004412:	f44f 7211 	mov.w	r2, #580	; 0x244
 8004416:	805a      	strh	r2, [r3, #2]
 8004418:	e00f      	b.n	800443a <Speedhandler+0x16a>
			case 7: Posifval.duty_cycle=670; break;
 800441a:	4b08      	ldr	r3, [pc, #32]	; (800443c <Speedhandler+0x16c>)
 800441c:	f240 229e 	movw	r2, #670	; 0x29e
 8004420:	805a      	strh	r2, [r3, #2]
 8004422:	e00a      	b.n	800443a <Speedhandler+0x16a>
			case 8: Posifval.duty_cycle=730; break;
 8004424:	4b05      	ldr	r3, [pc, #20]	; (800443c <Speedhandler+0x16c>)
 8004426:	f240 22da 	movw	r2, #730	; 0x2da
 800442a:	805a      	strh	r2, [r3, #2]
 800442c:	e005      	b.n	800443a <Speedhandler+0x16a>
			case 9: Posifval.duty_cycle=780; break;
 800442e:	4b03      	ldr	r3, [pc, #12]	; (800443c <Speedhandler+0x16c>)
 8004430:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8004434:	805a      	strh	r2, [r3, #2]
 8004436:	e000      	b.n	800443a <Speedhandler+0x16a>

			default:  break;
 8004438:	bf00      	nop
		}

}
 800443a:	bd80      	pop	{r7, pc}
 800443c:	20000324 	.word	0x20000324
 8004440:	20000bd8 	.word	0x20000bd8

08004444 <Check_RPM>:

void Check_RPM(void){
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0
	hallint_count+=1;
 8004448:	4b0a      	ldr	r3, [pc, #40]	; (8004474 <Check_RPM+0x30>)
 800444a:	881b      	ldrh	r3, [r3, #0]
 800444c:	3301      	adds	r3, #1
 800444e:	b29a      	uxth	r2, r3
 8004450:	4b08      	ldr	r3, [pc, #32]	; (8004474 <Check_RPM+0x30>)
 8004452:	801a      	strh	r2, [r3, #0]

	if(hallint_count>=14)
 8004454:	4b07      	ldr	r3, [pc, #28]	; (8004474 <Check_RPM+0x30>)
 8004456:	881b      	ldrh	r3, [r3, #0]
 8004458:	2b0d      	cmp	r3, #13
 800445a:	d907      	bls.n	800446c <Check_RPM+0x28>
	{revolves_counter+=1;
 800445c:	4b06      	ldr	r3, [pc, #24]	; (8004478 <Check_RPM+0x34>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	3301      	adds	r3, #1
 8004462:	4a05      	ldr	r2, [pc, #20]	; (8004478 <Check_RPM+0x34>)
 8004464:	6013      	str	r3, [r2, #0]
	hallint_count=0;
 8004466:	4b03      	ldr	r3, [pc, #12]	; (8004474 <Check_RPM+0x30>)
 8004468:	2200      	movs	r2, #0
 800446a:	801a      	strh	r2, [r3, #0]
	}
	ResetGateDriver();
 800446c:	f7ff feb2 	bl	80041d4 <ResetGateDriver>
	//LCD.IstRpm=revolves_counter;

}
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	20000bdc 	.word	0x20000bdc
 8004478:	20000be0 	.word	0x20000be0

0800447c <HallEvent>:
void HallEvent(void){
 800447c:	b580      	push	{r7, lr}
 800447e:	af00      	add	r7, sp, #0
	ResetGateDriver();
 8004480:	f7ff fea8 	bl	80041d4 <ResetGateDriver>
	Hall1_status = DIGITAL_IO_GetInput(&Hall1);
 8004484:	480b      	ldr	r0, [pc, #44]	; (80044b4 <HallEvent+0x38>)
 8004486:	f7ff ff11 	bl	80042ac <DIGITAL_IO_GetInput>
 800448a:	4603      	mov	r3, r0
 800448c:	b2da      	uxtb	r2, r3
 800448e:	4b0a      	ldr	r3, [pc, #40]	; (80044b8 <HallEvent+0x3c>)
 8004490:	701a      	strb	r2, [r3, #0]
		if(Hall1_status==1&&BTN.sem_flank==0){
 8004492:	4b09      	ldr	r3, [pc, #36]	; (80044b8 <HallEvent+0x3c>)
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d10b      	bne.n	80044b2 <HallEvent+0x36>
 800449a:	4b08      	ldr	r3, [pc, #32]	; (80044bc <HallEvent+0x40>)
 800449c:	791b      	ldrb	r3, [r3, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d107      	bne.n	80044b2 <HallEvent+0x36>
			BTN.sem_flank=1;
 80044a2:	4b06      	ldr	r3, [pc, #24]	; (80044bc <HallEvent+0x40>)
 80044a4:	2201      	movs	r2, #1
 80044a6:	711a      	strb	r2, [r3, #4]


			Check_RPM();
 80044a8:	f7ff ffcc 	bl	8004444 <Check_RPM>


			BTN.sem_flank=0;
 80044ac:	4b03      	ldr	r3, [pc, #12]	; (80044bc <HallEvent+0x40>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	711a      	strb	r2, [r3, #4]
		}



}
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	08009918 	.word	0x08009918
 80044b8:	20000bda 	.word	0x20000bda
 80044bc:	200002cc 	.word	0x200002cc

080044c0 <Temperatur_step>:
RT_MODEL_temp rtM_temp_;
RT_MODEL_temp *const rtM_temp = &rtM_temp_;

/* Model step function */
void Temperatur_step(void)
{
 80044c0:	b5b0      	push	{r4, r5, r7, lr}
 80044c2:	af00      	add	r7, sp, #0
   *  Sum: '<S2>/Subtract1'
   *
   * About '<S1>/Math Function':
   *  Operator: log
   */
  rtY_temp.TEMP_CELSIUS = 3470.0 / log((10000.0 * rtU_temp.Versorgungsspannung /
 80044c4:	4b2c      	ldr	r3, [pc, #176]	; (8004578 <Temperatur_step+0xb8>)
 80044c6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80044ca:	4610      	mov	r0, r2
 80044cc:	4619      	mov	r1, r3
 80044ce:	a322      	add	r3, pc, #136	; (adr r3, 8004558 <Temperatur_step+0x98>)
 80044d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d4:	f000 fd78 	bl	8004fc8 <__aeabi_dmul>
 80044d8:	4602      	mov	r2, r0
 80044da:	460b      	mov	r3, r1
 80044dc:	4614      	mov	r4, r2
 80044de:	461d      	mov	r5, r3
    (rtU_temp.Versorgungsspannung - rtU_temp.SpannungamNTC) - 10000.0) /
 80044e0:	4b25      	ldr	r3, [pc, #148]	; (8004578 <Temperatur_step+0xb8>)
 80044e2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80044e6:	4b24      	ldr	r3, [pc, #144]	; (8004578 <Temperatur_step+0xb8>)
 80044e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ec:	f000 fbb8 	bl	8004c60 <__aeabi_dsub>
 80044f0:	4602      	mov	r2, r0
 80044f2:	460b      	mov	r3, r1
   *  Sum: '<S2>/Subtract1'
   *
   * About '<S1>/Math Function':
   *  Operator: log
   */
  rtY_temp.TEMP_CELSIUS = 3470.0 / log((10000.0 * rtU_temp.Versorgungsspannung /
 80044f4:	4620      	mov	r0, r4
 80044f6:	4629      	mov	r1, r5
 80044f8:	f000 fe90 	bl	800521c <__aeabi_ddiv>
 80044fc:	4602      	mov	r2, r0
 80044fe:	460b      	mov	r3, r1
    (rtU_temp.Versorgungsspannung - rtU_temp.SpannungamNTC) - 10000.0) /
 8004500:	4610      	mov	r0, r2
 8004502:	4619      	mov	r1, r3
 8004504:	a314      	add	r3, pc, #80	; (adr r3, 8004558 <Temperatur_step+0x98>)
 8004506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800450a:	f000 fba9 	bl	8004c60 <__aeabi_dsub>
 800450e:	4602      	mov	r2, r0
 8004510:	460b      	mov	r3, r1
   *  Sum: '<S2>/Subtract1'
   *
   * About '<S1>/Math Function':
   *  Operator: log
   */
  rtY_temp.TEMP_CELSIUS = 3470.0 / log((10000.0 * rtU_temp.Versorgungsspannung /
 8004512:	4610      	mov	r0, r2
 8004514:	4619      	mov	r1, r3
 8004516:	a312      	add	r3, pc, #72	; (adr r3, 8004560 <Temperatur_step+0xa0>)
 8004518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800451c:	f000 fe7e 	bl	800521c <__aeabi_ddiv>
 8004520:	4602      	mov	r2, r0
 8004522:	460b      	mov	r3, r1
 8004524:	4610      	mov	r0, r2
 8004526:	4619      	mov	r1, r3
 8004528:	f000 f8f8 	bl	800471c <log>
 800452c:	4602      	mov	r2, r0
 800452e:	460b      	mov	r3, r1
 8004530:	a10d      	add	r1, pc, #52	; (adr r1, 8004568 <Temperatur_step+0xa8>)
 8004532:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004536:	f000 fe71 	bl	800521c <__aeabi_ddiv>
 800453a:	4602      	mov	r2, r0
 800453c:	460b      	mov	r3, r1
    (rtU_temp.Versorgungsspannung - rtU_temp.SpannungamNTC) - 10000.0) /
    0.088204556494777056) - 273.15;
 800453e:	4610      	mov	r0, r2
 8004540:	4619      	mov	r1, r3
 8004542:	a30b      	add	r3, pc, #44	; (adr r3, 8004570 <Temperatur_step+0xb0>)
 8004544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004548:	f000 fb8a 	bl	8004c60 <__aeabi_dsub>
 800454c:	4602      	mov	r2, r0
 800454e:	460b      	mov	r3, r1
   *  Sum: '<S2>/Subtract1'
   *
   * About '<S1>/Math Function':
   *  Operator: log
   */
  rtY_temp.TEMP_CELSIUS = 3470.0 / log((10000.0 * rtU_temp.Versorgungsspannung /
 8004550:	490a      	ldr	r1, [pc, #40]	; (800457c <Temperatur_step+0xbc>)
 8004552:	e9c1 2300 	strd	r2, r3, [r1]
    (rtU_temp.Versorgungsspannung - rtU_temp.SpannungamNTC) - 10000.0) /
    0.088204556494777056) - 273.15;

  /* End of Outputs for SubSystem: '<Root>/gemessene Spannung umrechnen zu Widerstand' */
  /* End of Outputs for SubSystem: '<Root>/NTC-Widerstand in Temperatur umrechnen' */
}
 8004556:	bdb0      	pop	{r4, r5, r7, pc}
 8004558:	00000000 	.word	0x00000000
 800455c:	40c38800 	.word	0x40c38800
 8004560:	e580d51d 	.word	0xe580d51d
 8004564:	3fb69492 	.word	0x3fb69492
 8004568:	00000000 	.word	0x00000000
 800456c:	40ab1c00 	.word	0x40ab1c00
 8004570:	66666666 	.word	0x66666666
 8004574:	40711266 	.word	0x40711266
 8004578:	20000c30 	.word	0x20000c30
 800457c:	20000c28 	.word	0x20000c28

08004580 <plook_u32d_binckan>:
ExtY_lut rtY_lut;
uint32_T plook_u32d_binckan(real_T u, const real_T bp[], uint32_T maxIndex);
uint32_T binsearch_u32d(real_T u, const real_T bp[], uint32_T startIndex,
  uint32_T maxIndex);
uint32_T plook_u32d_binckan(real_T u, const real_T bp[], uint32_T maxIndex)
{
 8004580:	b5b0      	push	{r4, r5, r7, lr}
 8004582:	b088      	sub	sp, #32
 8004584:	af02      	add	r7, sp, #8
 8004586:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
 800458c:	603b      	str	r3, [r7, #0]
     Extrapolation method: 'Clip'
     Use previous index: 'off'
     Use last breakpoint for index at or above upper limit: 'on'
     Remove protection against out-of-range input in generated code: 'off'
   */
  if (u <= bp[0U]) {
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004594:	4610      	mov	r0, r2
 8004596:	4619      	mov	r1, r3
 8004598:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800459c:	f000 ff9a 	bl	80054d4 <__aeabi_dcmpge>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d002      	beq.n	80045ac <plook_u32d_binckan+0x2c>
    bpIndex = 0U;
 80045a6:	2300      	movs	r3, #0
 80045a8:	617b      	str	r3, [r7, #20]
 80045aa:	e044      	b.n	8004636 <plook_u32d_binckan+0xb6>
  } else if (u < bp[maxIndex]) {
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	00db      	lsls	r3, r3, #3
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	4413      	add	r3, r2
 80045b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b8:	4610      	mov	r0, r2
 80045ba:	4619      	mov	r1, r3
 80045bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045c0:	f000 ff92 	bl	80054e8 <__aeabi_dcmpgt>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d033      	beq.n	8004632 <plook_u32d_binckan+0xb2>
    bpIndex = binsearch_u32d(u, bp, maxIndex >> 1U, maxIndex);
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	085c      	lsrs	r4, r3, #1
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	9300      	str	r3, [sp, #0]
 80045d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	4623      	mov	r3, r4
 80045da:	f000 f831 	bl	8004640 <binsearch_u32d>
 80045de:	6178      	str	r0, [r7, #20]
    if (bp[bpIndex + 1U] - u <= u - bp[bpIndex]) {
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	3301      	adds	r3, #1
 80045e4:	00db      	lsls	r3, r3, #3
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	4413      	add	r3, r2
 80045ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ee:	4610      	mov	r0, r2
 80045f0:	4619      	mov	r1, r3
 80045f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045f6:	f000 fb33 	bl	8004c60 <__aeabi_dsub>
 80045fa:	4602      	mov	r2, r0
 80045fc:	460b      	mov	r3, r1
 80045fe:	4614      	mov	r4, r2
 8004600:	461d      	mov	r5, r3
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	00db      	lsls	r3, r3, #3
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	4413      	add	r3, r2
 800460a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004612:	f000 fb25 	bl	8004c60 <__aeabi_dsub>
 8004616:	4602      	mov	r2, r0
 8004618:	460b      	mov	r3, r1
 800461a:	4620      	mov	r0, r4
 800461c:	4629      	mov	r1, r5
 800461e:	f000 ff4f 	bl	80054c0 <__aeabi_dcmple>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d100      	bne.n	800462a <plook_u32d_binckan+0xaa>
 8004628:	e005      	b.n	8004636 <plook_u32d_binckan+0xb6>
      bpIndex++;
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	3301      	adds	r3, #1
 800462e:	617b      	str	r3, [r7, #20]
 8004630:	e001      	b.n	8004636 <plook_u32d_binckan+0xb6>
    }
  } else {
    bpIndex = maxIndex;
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	617b      	str	r3, [r7, #20]
  }

  return bpIndex;
 8004636:	697b      	ldr	r3, [r7, #20]
}
 8004638:	4618      	mov	r0, r3
 800463a:	3718      	adds	r7, #24
 800463c:	46bd      	mov	sp, r7
 800463e:	bdb0      	pop	{r4, r5, r7, pc}

08004640 <binsearch_u32d>:

uint32_T binsearch_u32d(real_T u, const real_T bp[], uint32_T startIndex,
  uint32_T maxIndex)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b088      	sub	sp, #32
 8004644:	af00      	add	r7, sp, #0
 8004646:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800464a:	607a      	str	r2, [r7, #4]
 800464c:	603b      	str	r3, [r7, #0]
  uint32_T bpIndex;
  uint32_T iRght;
  uint32_T bpIdx;

  /* Binary Search */
  bpIdx = startIndex;
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	617b      	str	r3, [r7, #20]
  bpIndex = 0U;
 8004652:	2300      	movs	r3, #0
 8004654:	61fb      	str	r3, [r7, #28]
  iRght = maxIndex;
 8004656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004658:	61bb      	str	r3, [r7, #24]
  while (iRght - bpIndex > 1U) {
 800465a:	e018      	b.n	800468e <binsearch_u32d+0x4e>
    if (u < bp[bpIdx]) {
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	00db      	lsls	r3, r3, #3
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	4413      	add	r3, r2
 8004664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004668:	4610      	mov	r0, r2
 800466a:	4619      	mov	r1, r3
 800466c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004670:	f000 ff3a 	bl	80054e8 <__aeabi_dcmpgt>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d002      	beq.n	8004680 <binsearch_u32d+0x40>
      iRght = bpIdx;
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	61bb      	str	r3, [r7, #24]
 800467e:	e001      	b.n	8004684 <binsearch_u32d+0x44>
    } else {
      bpIndex = bpIdx;
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	61fb      	str	r3, [r7, #28]
    }

    bpIdx = (iRght + bpIndex) >> 1U;
 8004684:	69ba      	ldr	r2, [r7, #24]
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	4413      	add	r3, r2
 800468a:	085b      	lsrs	r3, r3, #1
 800468c:	617b      	str	r3, [r7, #20]

  /* Binary Search */
  bpIdx = startIndex;
  bpIndex = 0U;
  iRght = maxIndex;
  while (iRght - bpIndex > 1U) {
 800468e:	69ba      	ldr	r2, [r7, #24]
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	2b01      	cmp	r3, #1
 8004696:	d8e1      	bhi.n	800465c <binsearch_u32d+0x1c>
    }

    bpIdx = (iRght + bpIndex) >> 1U;
  }

  return bpIndex;
 8004698:	69fb      	ldr	r3, [r7, #28]
}
 800469a:	4618      	mov	r0, r3
 800469c:	3720      	adds	r7, #32
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop

080046a4 <lut_step>:

/* Model step function */
void lut_step(void)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	af00      	add	r7, sp, #0
  /* Outport: '<Root>/Out1' incorporates:
   *  Inport: '<Root>/In1'
   *  Lookup_n-D: '<Root>/1-D Lookup Table1'
   */
  rtY_lut.Out1_lut = rtConstP_lut.uDLookupTable1_tableData[plook_u32d_binckan
 80046a8:	4b09      	ldr	r3, [pc, #36]	; (80046d0 <lut_step+0x2c>)
 80046aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ae:	4610      	mov	r0, r2
 80046b0:	4619      	mov	r1, r3
 80046b2:	4a08      	ldr	r2, [pc, #32]	; (80046d4 <lut_step+0x30>)
 80046b4:	230d      	movs	r3, #13
 80046b6:	f7ff ff63 	bl	8004580 <plook_u32d_binckan>
 80046ba:	4603      	mov	r3, r0
 80046bc:	4a06      	ldr	r2, [pc, #24]	; (80046d8 <lut_step+0x34>)
 80046be:	00db      	lsls	r3, r3, #3
 80046c0:	4413      	add	r3, r2
 80046c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c6:	4905      	ldr	r1, [pc, #20]	; (80046dc <lut_step+0x38>)
 80046c8:	e9c1 2300 	strd	r2, r3, [r1]
    (rtU_lut.In1_lut, rtConstP_lut.uDLookupTable1_bp01Data, 13U)];
}
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	20000c40 	.word	0x20000c40
 80046d4:	08009b48 	.word	0x08009b48
 80046d8:	08009aa8 	.word	0x08009aa8
 80046dc:	20000c48 	.word	0x20000c48

080046e0 <main>:



int main(void)

{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0

DAVE_STATUS_t status;
status = DAVE_Init(); /* Initialization of DAVE Apps */
 80046e6:	f7fe fe97 	bl	8003418 <DAVE_Init>
 80046ea:	4603      	mov	r3, r0
 80046ec:	71fb      	strb	r3, [r7, #7]

DisplayTask();// Init Display and start Interrupts
 80046ee:	f7ff fa0f 	bl	8003b10 <DisplayTask>

if(status == DAVE_STATUS_FAILURE)
 80046f2:	79fb      	ldrb	r3, [r7, #7]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d100      	bne.n	80046fa <main+0x1a>

while(1U)

{

}
 80046f8:	e7fe      	b.n	80046f8 <main+0x18>

}


/* Placeholder for user application code. The while loop below can be replaced with user application code. */
LCD.SollVolt=1;
 80046fa:	4b07      	ldr	r3, [pc, #28]	; (8004718 <main+0x38>)
 80046fc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004700:	60da      	str	r2, [r3, #12]
while(1U)

{
	ResetGateDriver();
 8004702:	f7ff fd67 	bl	80041d4 <ResetGateDriver>
	HallEvent();
 8004706:	f7ff feb9 	bl	800447c <HallEvent>
	Speedhandler();
 800470a:	f7ff fde1 	bl	80042d0 <Speedhandler>
	Buttonhandler();
 800470e:	f7ff f859 	bl	80037c4 <Buttonhandler>
	ADChandler();
 8004712:	f7fe ffa1 	bl	8003658 <ADChandler>

}
 8004716:	e7f4      	b.n	8004702 <main+0x22>
 8004718:	20000bc0 	.word	0x20000bc0

0800471c <log>:
 800471c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004720:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8004814 <log+0xf8>
 8004724:	b08b      	sub	sp, #44	; 0x2c
 8004726:	4606      	mov	r6, r0
 8004728:	460f      	mov	r7, r1
 800472a:	f000 f879 	bl	8004820 <__ieee754_log>
 800472e:	f998 3000 	ldrsb.w	r3, [r8]
 8004732:	3301      	adds	r3, #1
 8004734:	4604      	mov	r4, r0
 8004736:	460d      	mov	r5, r1
 8004738:	d00b      	beq.n	8004752 <log+0x36>
 800473a:	4630      	mov	r0, r6
 800473c:	4639      	mov	r1, r7
 800473e:	f000 fa57 	bl	8004bf0 <__fpclassifyd>
 8004742:	b130      	cbz	r0, 8004752 <log+0x36>
 8004744:	4630      	mov	r0, r6
 8004746:	4639      	mov	r1, r7
 8004748:	2200      	movs	r2, #0
 800474a:	2300      	movs	r3, #0
 800474c:	f000 fecc 	bl	80054e8 <__aeabi_dcmpgt>
 8004750:	b120      	cbz	r0, 800475c <log+0x40>
 8004752:	4620      	mov	r0, r4
 8004754:	4629      	mov	r1, r5
 8004756:	b00b      	add	sp, #44	; 0x2c
 8004758:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800475c:	f898 4000 	ldrb.w	r4, [r8]
 8004760:	4b29      	ldr	r3, [pc, #164]	; (8004808 <log+0xec>)
 8004762:	9008      	str	r0, [sp, #32]
 8004764:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004768:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800476c:	9301      	str	r3, [sp, #4]
 800476e:	b99c      	cbnz	r4, 8004798 <log+0x7c>
 8004770:	4d26      	ldr	r5, [pc, #152]	; (800480c <log+0xf0>)
 8004772:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
 8004776:	4630      	mov	r0, r6
 8004778:	4639      	mov	r1, r7
 800477a:	2200      	movs	r2, #0
 800477c:	2300      	movs	r3, #0
 800477e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004782:	f000 fe89 	bl	8005498 <__aeabi_dcmpeq>
 8004786:	2800      	cmp	r0, #0
 8004788:	d135      	bne.n	80047f6 <log+0xda>
 800478a:	2301      	movs	r3, #1
 800478c:	9300      	str	r3, [sp, #0]
 800478e:	4668      	mov	r0, sp
 8004790:	f000 fa5a 	bl	8004c48 <matherr>
 8004794:	b9a8      	cbnz	r0, 80047c2 <log+0xa6>
 8004796:	e010      	b.n	80047ba <log+0x9e>
 8004798:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8004818 <log+0xfc>
 800479c:	f04f 0800 	mov.w	r8, #0
 80047a0:	4630      	mov	r0, r6
 80047a2:	4639      	mov	r1, r7
 80047a4:	2200      	movs	r2, #0
 80047a6:	2300      	movs	r3, #0
 80047a8:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80047ac:	f000 fe74 	bl	8005498 <__aeabi_dcmpeq>
 80047b0:	b998      	cbnz	r0, 80047da <log+0xbe>
 80047b2:	2301      	movs	r3, #1
 80047b4:	2c02      	cmp	r4, #2
 80047b6:	9300      	str	r3, [sp, #0]
 80047b8:	d1e9      	bne.n	800478e <log+0x72>
 80047ba:	f001 f9db 	bl	8005b74 <__errno>
 80047be:	2321      	movs	r3, #33	; 0x21
 80047c0:	6003      	str	r3, [r0, #0]
 80047c2:	4813      	ldr	r0, [pc, #76]	; (8004810 <log+0xf4>)
 80047c4:	f000 fa42 	bl	8004c4c <nan>
 80047c8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80047cc:	9b08      	ldr	r3, [sp, #32]
 80047ce:	b9ab      	cbnz	r3, 80047fc <log+0xe0>
 80047d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80047d4:	b00b      	add	sp, #44	; 0x2c
 80047d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80047da:	2302      	movs	r3, #2
 80047dc:	429c      	cmp	r4, r3
 80047de:	9300      	str	r3, [sp, #0]
 80047e0:	d004      	beq.n	80047ec <log+0xd0>
 80047e2:	4668      	mov	r0, sp
 80047e4:	f000 fa30 	bl	8004c48 <matherr>
 80047e8:	2800      	cmp	r0, #0
 80047ea:	d1ef      	bne.n	80047cc <log+0xb0>
 80047ec:	f001 f9c2 	bl	8005b74 <__errno>
 80047f0:	2322      	movs	r3, #34	; 0x22
 80047f2:	6003      	str	r3, [r0, #0]
 80047f4:	e7ea      	b.n	80047cc <log+0xb0>
 80047f6:	2302      	movs	r3, #2
 80047f8:	9300      	str	r3, [sp, #0]
 80047fa:	e7f2      	b.n	80047e2 <log+0xc6>
 80047fc:	f001 f9ba 	bl	8005b74 <__errno>
 8004800:	9b08      	ldr	r3, [sp, #32]
 8004802:	6003      	str	r3, [r0, #0]
 8004804:	e7e4      	b.n	80047d0 <log+0xb4>
 8004806:	bf00      	nop
 8004808:	08009be8 	.word	0x08009be8
 800480c:	c7efffff 	.word	0xc7efffff
 8004810:	08009c20 	.word	0x08009c20
 8004814:	20000330 	.word	0x20000330
 8004818:	fff00000 	.word	0xfff00000
 800481c:	00000000 	.word	0x00000000

08004820 <__ieee754_log>:
 8004820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004824:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8004828:	b085      	sub	sp, #20
 800482a:	4606      	mov	r6, r0
 800482c:	460f      	mov	r7, r1
 800482e:	460b      	mov	r3, r1
 8004830:	da5a      	bge.n	80048e8 <__ieee754_log+0xc8>
 8004832:	4602      	mov	r2, r0
 8004834:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8004838:	4322      	orrs	r2, r4
 800483a:	f000 80f6 	beq.w	8004a2a <__ieee754_log+0x20a>
 800483e:	2900      	cmp	r1, #0
 8004840:	f2c0 8172 	blt.w	8004b28 <__ieee754_log+0x308>
 8004844:	2200      	movs	r2, #0
 8004846:	4bde      	ldr	r3, [pc, #888]	; (8004bc0 <__ieee754_log+0x3a0>)
 8004848:	f000 fbbe 	bl	8004fc8 <__aeabi_dmul>
 800484c:	460b      	mov	r3, r1
 800484e:	460f      	mov	r7, r1
 8004850:	49dc      	ldr	r1, [pc, #880]	; (8004bc4 <__ieee754_log+0x3a4>)
 8004852:	428b      	cmp	r3, r1
 8004854:	4606      	mov	r6, r0
 8004856:	f06f 0235 	mvn.w	r2, #53	; 0x35
 800485a:	dc4a      	bgt.n	80048f2 <__ieee754_log+0xd2>
 800485c:	f3c3 0513 	ubfx	r5, r3, #0, #20
 8004860:	f505 2415 	add.w	r4, r5, #610304	; 0x95000
 8004864:	f604 7464 	addw	r4, r4, #3940	; 0xf64
 8004868:	f404 1e80 	and.w	lr, r4, #1048576	; 0x100000
 800486c:	f08e 517f 	eor.w	r1, lr, #1069547520	; 0x3fc00000
 8004870:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 8004874:	151b      	asrs	r3, r3, #20
 8004876:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800487a:	ea41 0705 	orr.w	r7, r1, r5
 800487e:	189c      	adds	r4, r3, r2
 8004880:	4630      	mov	r0, r6
 8004882:	2200      	movs	r2, #0
 8004884:	4bd0      	ldr	r3, [pc, #832]	; (8004bc8 <__ieee754_log+0x3a8>)
 8004886:	4639      	mov	r1, r7
 8004888:	eb04 541e 	add.w	r4, r4, lr, lsr #20
 800488c:	f000 f9e8 	bl	8004c60 <__aeabi_dsub>
 8004890:	1cab      	adds	r3, r5, #2
 8004892:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004896:	2b02      	cmp	r3, #2
 8004898:	4682      	mov	sl, r0
 800489a:	468b      	mov	fp, r1
 800489c:	f04f 0200 	mov.w	r2, #0
 80048a0:	dc30      	bgt.n	8004904 <__ieee754_log+0xe4>
 80048a2:	2300      	movs	r3, #0
 80048a4:	f000 fdf8 	bl	8005498 <__aeabi_dcmpeq>
 80048a8:	2800      	cmp	r0, #0
 80048aa:	f000 80c7 	beq.w	8004a3c <__ieee754_log+0x21c>
 80048ae:	2c00      	cmp	r4, #0
 80048b0:	f000 8143 	beq.w	8004b3a <__ieee754_log+0x31a>
 80048b4:	4620      	mov	r0, r4
 80048b6:	f000 fb21 	bl	8004efc <__aeabi_i2d>
 80048ba:	a3ad      	add	r3, pc, #692	; (adr r3, 8004b70 <__ieee754_log+0x350>)
 80048bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c0:	4606      	mov	r6, r0
 80048c2:	460f      	mov	r7, r1
 80048c4:	f000 fb80 	bl	8004fc8 <__aeabi_dmul>
 80048c8:	a3ab      	add	r3, pc, #684	; (adr r3, 8004b78 <__ieee754_log+0x358>)
 80048ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ce:	4604      	mov	r4, r0
 80048d0:	460d      	mov	r5, r1
 80048d2:	4630      	mov	r0, r6
 80048d4:	4639      	mov	r1, r7
 80048d6:	f000 fb77 	bl	8004fc8 <__aeabi_dmul>
 80048da:	4602      	mov	r2, r0
 80048dc:	460b      	mov	r3, r1
 80048de:	4620      	mov	r0, r4
 80048e0:	4629      	mov	r1, r5
 80048e2:	f000 f9bf 	bl	8004c64 <__adddf3>
 80048e6:	e00a      	b.n	80048fe <__ieee754_log+0xde>
 80048e8:	49b6      	ldr	r1, [pc, #728]	; (8004bc4 <__ieee754_log+0x3a4>)
 80048ea:	428b      	cmp	r3, r1
 80048ec:	f04f 0200 	mov.w	r2, #0
 80048f0:	ddb4      	ble.n	800485c <__ieee754_log+0x3c>
 80048f2:	4630      	mov	r0, r6
 80048f4:	4639      	mov	r1, r7
 80048f6:	4632      	mov	r2, r6
 80048f8:	463b      	mov	r3, r7
 80048fa:	f000 f9b3 	bl	8004c64 <__adddf3>
 80048fe:	b005      	add	sp, #20
 8004900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004904:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004908:	f000 f9ac 	bl	8004c64 <__adddf3>
 800490c:	4602      	mov	r2, r0
 800490e:	460b      	mov	r3, r1
 8004910:	4650      	mov	r0, sl
 8004912:	4659      	mov	r1, fp
 8004914:	f000 fc82 	bl	800521c <__aeabi_ddiv>
 8004918:	4606      	mov	r6, r0
 800491a:	460f      	mov	r7, r1
 800491c:	4620      	mov	r0, r4
 800491e:	e9cd 6700 	strd	r6, r7, [sp]
 8004922:	f000 faeb 	bl	8004efc <__aeabi_i2d>
 8004926:	4632      	mov	r2, r6
 8004928:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800492c:	463b      	mov	r3, r7
 800492e:	4630      	mov	r0, r6
 8004930:	4639      	mov	r1, r7
 8004932:	f000 fb49 	bl	8004fc8 <__aeabi_dmul>
 8004936:	4602      	mov	r2, r0
 8004938:	460b      	mov	r3, r1
 800493a:	4680      	mov	r8, r0
 800493c:	4689      	mov	r9, r1
 800493e:	f000 fb43 	bl	8004fc8 <__aeabi_dmul>
 8004942:	a38f      	add	r3, pc, #572	; (adr r3, 8004b80 <__ieee754_log+0x360>)
 8004944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004948:	4606      	mov	r6, r0
 800494a:	460f      	mov	r7, r1
 800494c:	f000 fb3c 	bl	8004fc8 <__aeabi_dmul>
 8004950:	a38d      	add	r3, pc, #564	; (adr r3, 8004b88 <__ieee754_log+0x368>)
 8004952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004956:	f000 f985 	bl	8004c64 <__adddf3>
 800495a:	4632      	mov	r2, r6
 800495c:	463b      	mov	r3, r7
 800495e:	f000 fb33 	bl	8004fc8 <__aeabi_dmul>
 8004962:	a38b      	add	r3, pc, #556	; (adr r3, 8004b90 <__ieee754_log+0x370>)
 8004964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004968:	f000 f97c 	bl	8004c64 <__adddf3>
 800496c:	4632      	mov	r2, r6
 800496e:	463b      	mov	r3, r7
 8004970:	f000 fb2a 	bl	8004fc8 <__aeabi_dmul>
 8004974:	a388      	add	r3, pc, #544	; (adr r3, 8004b98 <__ieee754_log+0x378>)
 8004976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800497a:	f000 f973 	bl	8004c64 <__adddf3>
 800497e:	4642      	mov	r2, r8
 8004980:	464b      	mov	r3, r9
 8004982:	f000 fb21 	bl	8004fc8 <__aeabi_dmul>
 8004986:	a386      	add	r3, pc, #536	; (adr r3, 8004ba0 <__ieee754_log+0x380>)
 8004988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800498c:	4680      	mov	r8, r0
 800498e:	4689      	mov	r9, r1
 8004990:	4630      	mov	r0, r6
 8004992:	4639      	mov	r1, r7
 8004994:	f000 fb18 	bl	8004fc8 <__aeabi_dmul>
 8004998:	a383      	add	r3, pc, #524	; (adr r3, 8004ba8 <__ieee754_log+0x388>)
 800499a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800499e:	f000 f961 	bl	8004c64 <__adddf3>
 80049a2:	4632      	mov	r2, r6
 80049a4:	463b      	mov	r3, r7
 80049a6:	f000 fb0f 	bl	8004fc8 <__aeabi_dmul>
 80049aa:	a381      	add	r3, pc, #516	; (adr r3, 8004bb0 <__ieee754_log+0x390>)
 80049ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b0:	f000 f958 	bl	8004c64 <__adddf3>
 80049b4:	4632      	mov	r2, r6
 80049b6:	463b      	mov	r3, r7
 80049b8:	f000 fb06 	bl	8004fc8 <__aeabi_dmul>
 80049bc:	460b      	mov	r3, r1
 80049be:	4602      	mov	r2, r0
 80049c0:	4649      	mov	r1, r9
 80049c2:	4640      	mov	r0, r8
 80049c4:	f000 f94e 	bl	8004c64 <__adddf3>
 80049c8:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 80049cc:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80049d0:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 80049d4:	3551      	adds	r5, #81	; 0x51
 80049d6:	431d      	orrs	r5, r3
 80049d8:	2d00      	cmp	r5, #0
 80049da:	4606      	mov	r6, r0
 80049dc:	460f      	mov	r7, r1
 80049de:	dd53      	ble.n	8004a88 <__ieee754_log+0x268>
 80049e0:	2200      	movs	r2, #0
 80049e2:	4b7a      	ldr	r3, [pc, #488]	; (8004bcc <__ieee754_log+0x3ac>)
 80049e4:	4650      	mov	r0, sl
 80049e6:	4659      	mov	r1, fp
 80049e8:	f000 faee 	bl	8004fc8 <__aeabi_dmul>
 80049ec:	4652      	mov	r2, sl
 80049ee:	465b      	mov	r3, fp
 80049f0:	f000 faea 	bl	8004fc8 <__aeabi_dmul>
 80049f4:	4680      	mov	r8, r0
 80049f6:	4689      	mov	r9, r1
 80049f8:	2c00      	cmp	r4, #0
 80049fa:	d160      	bne.n	8004abe <__ieee754_log+0x29e>
 80049fc:	4632      	mov	r2, r6
 80049fe:	463b      	mov	r3, r7
 8004a00:	f000 f930 	bl	8004c64 <__adddf3>
 8004a04:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004a08:	f000 fade 	bl	8004fc8 <__aeabi_dmul>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	460b      	mov	r3, r1
 8004a10:	4640      	mov	r0, r8
 8004a12:	4649      	mov	r1, r9
 8004a14:	f000 f924 	bl	8004c60 <__aeabi_dsub>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	4650      	mov	r0, sl
 8004a1e:	4659      	mov	r1, fp
 8004a20:	f000 f91e 	bl	8004c60 <__aeabi_dsub>
 8004a24:	b005      	add	sp, #20
 8004a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	2000      	movs	r0, #0
 8004a30:	4967      	ldr	r1, [pc, #412]	; (8004bd0 <__ieee754_log+0x3b0>)
 8004a32:	f000 fbf3 	bl	800521c <__aeabi_ddiv>
 8004a36:	b005      	add	sp, #20
 8004a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a3c:	4652      	mov	r2, sl
 8004a3e:	465b      	mov	r3, fp
 8004a40:	4650      	mov	r0, sl
 8004a42:	4659      	mov	r1, fp
 8004a44:	f000 fac0 	bl	8004fc8 <__aeabi_dmul>
 8004a48:	a35b      	add	r3, pc, #364	; (adr r3, 8004bb8 <__ieee754_log+0x398>)
 8004a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a4e:	4606      	mov	r6, r0
 8004a50:	460f      	mov	r7, r1
 8004a52:	4650      	mov	r0, sl
 8004a54:	4659      	mov	r1, fp
 8004a56:	f000 fab7 	bl	8004fc8 <__aeabi_dmul>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	2000      	movs	r0, #0
 8004a60:	495a      	ldr	r1, [pc, #360]	; (8004bcc <__ieee754_log+0x3ac>)
 8004a62:	f000 f8fd 	bl	8004c60 <__aeabi_dsub>
 8004a66:	4602      	mov	r2, r0
 8004a68:	460b      	mov	r3, r1
 8004a6a:	4630      	mov	r0, r6
 8004a6c:	4639      	mov	r1, r7
 8004a6e:	f000 faab 	bl	8004fc8 <__aeabi_dmul>
 8004a72:	4606      	mov	r6, r0
 8004a74:	460f      	mov	r7, r1
 8004a76:	2c00      	cmp	r4, #0
 8004a78:	d162      	bne.n	8004b40 <__ieee754_log+0x320>
 8004a7a:	4650      	mov	r0, sl
 8004a7c:	4659      	mov	r1, fp
 8004a7e:	4632      	mov	r2, r6
 8004a80:	463b      	mov	r3, r7
 8004a82:	f000 f8ed 	bl	8004c60 <__aeabi_dsub>
 8004a86:	e73a      	b.n	80048fe <__ieee754_log+0xde>
 8004a88:	2c00      	cmp	r4, #0
 8004a8a:	f000 80a3 	beq.w	8004bd4 <__ieee754_log+0x3b4>
 8004a8e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004a92:	a337      	add	r3, pc, #220	; (adr r3, 8004b70 <__ieee754_log+0x350>)
 8004a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a98:	4640      	mov	r0, r8
 8004a9a:	4649      	mov	r1, r9
 8004a9c:	f000 fa94 	bl	8004fc8 <__aeabi_dmul>
 8004aa0:	4632      	mov	r2, r6
 8004aa2:	463b      	mov	r3, r7
 8004aa4:	4604      	mov	r4, r0
 8004aa6:	460d      	mov	r5, r1
 8004aa8:	4650      	mov	r0, sl
 8004aaa:	4659      	mov	r1, fp
 8004aac:	f000 f8d8 	bl	8004c60 <__aeabi_dsub>
 8004ab0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004ab4:	f000 fa88 	bl	8004fc8 <__aeabi_dmul>
 8004ab8:	4606      	mov	r6, r0
 8004aba:	460f      	mov	r7, r1
 8004abc:	e04c      	b.n	8004b58 <__ieee754_log+0x338>
 8004abe:	a32c      	add	r3, pc, #176	; (adr r3, 8004b70 <__ieee754_log+0x350>)
 8004ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ac8:	f000 fa7e 	bl	8004fc8 <__aeabi_dmul>
 8004acc:	4632      	mov	r2, r6
 8004ace:	463b      	mov	r3, r7
 8004ad0:	4604      	mov	r4, r0
 8004ad2:	460d      	mov	r5, r1
 8004ad4:	4640      	mov	r0, r8
 8004ad6:	4649      	mov	r1, r9
 8004ad8:	f000 f8c4 	bl	8004c64 <__adddf3>
 8004adc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004ae0:	f000 fa72 	bl	8004fc8 <__aeabi_dmul>
 8004ae4:	a324      	add	r3, pc, #144	; (adr r3, 8004b78 <__ieee754_log+0x358>)
 8004ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aea:	4606      	mov	r6, r0
 8004aec:	460f      	mov	r7, r1
 8004aee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004af2:	f000 fa69 	bl	8004fc8 <__aeabi_dmul>
 8004af6:	4602      	mov	r2, r0
 8004af8:	460b      	mov	r3, r1
 8004afa:	4630      	mov	r0, r6
 8004afc:	4639      	mov	r1, r7
 8004afe:	f000 f8b1 	bl	8004c64 <__adddf3>
 8004b02:	4602      	mov	r2, r0
 8004b04:	460b      	mov	r3, r1
 8004b06:	4640      	mov	r0, r8
 8004b08:	4649      	mov	r1, r9
 8004b0a:	f000 f8a9 	bl	8004c60 <__aeabi_dsub>
 8004b0e:	4652      	mov	r2, sl
 8004b10:	465b      	mov	r3, fp
 8004b12:	f000 f8a5 	bl	8004c60 <__aeabi_dsub>
 8004b16:	4602      	mov	r2, r0
 8004b18:	460b      	mov	r3, r1
 8004b1a:	4620      	mov	r0, r4
 8004b1c:	4629      	mov	r1, r5
 8004b1e:	f000 f89f 	bl	8004c60 <__aeabi_dsub>
 8004b22:	b005      	add	sp, #20
 8004b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b28:	4602      	mov	r2, r0
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	f000 f898 	bl	8004c60 <__aeabi_dsub>
 8004b30:	2200      	movs	r2, #0
 8004b32:	2300      	movs	r3, #0
 8004b34:	f000 fb72 	bl	800521c <__aeabi_ddiv>
 8004b38:	e6e1      	b.n	80048fe <__ieee754_log+0xde>
 8004b3a:	2000      	movs	r0, #0
 8004b3c:	2100      	movs	r1, #0
 8004b3e:	e6de      	b.n	80048fe <__ieee754_log+0xde>
 8004b40:	4620      	mov	r0, r4
 8004b42:	f000 f9db 	bl	8004efc <__aeabi_i2d>
 8004b46:	a30a      	add	r3, pc, #40	; (adr r3, 8004b70 <__ieee754_log+0x350>)
 8004b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b4c:	4680      	mov	r8, r0
 8004b4e:	4689      	mov	r9, r1
 8004b50:	f000 fa3a 	bl	8004fc8 <__aeabi_dmul>
 8004b54:	4604      	mov	r4, r0
 8004b56:	460d      	mov	r5, r1
 8004b58:	a307      	add	r3, pc, #28	; (adr r3, 8004b78 <__ieee754_log+0x358>)
 8004b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5e:	4640      	mov	r0, r8
 8004b60:	4649      	mov	r1, r9
 8004b62:	f000 fa31 	bl	8004fc8 <__aeabi_dmul>
 8004b66:	4602      	mov	r2, r0
 8004b68:	460b      	mov	r3, r1
 8004b6a:	4630      	mov	r0, r6
 8004b6c:	4639      	mov	r1, r7
 8004b6e:	e7cc      	b.n	8004b0a <__ieee754_log+0x2ea>
 8004b70:	fee00000 	.word	0xfee00000
 8004b74:	3fe62e42 	.word	0x3fe62e42
 8004b78:	35793c76 	.word	0x35793c76
 8004b7c:	3dea39ef 	.word	0x3dea39ef
 8004b80:	df3e5244 	.word	0xdf3e5244
 8004b84:	3fc2f112 	.word	0x3fc2f112
 8004b88:	96cb03de 	.word	0x96cb03de
 8004b8c:	3fc74664 	.word	0x3fc74664
 8004b90:	94229359 	.word	0x94229359
 8004b94:	3fd24924 	.word	0x3fd24924
 8004b98:	55555593 	.word	0x55555593
 8004b9c:	3fe55555 	.word	0x3fe55555
 8004ba0:	d078c69f 	.word	0xd078c69f
 8004ba4:	3fc39a09 	.word	0x3fc39a09
 8004ba8:	1d8e78af 	.word	0x1d8e78af
 8004bac:	3fcc71c5 	.word	0x3fcc71c5
 8004bb0:	9997fa04 	.word	0x9997fa04
 8004bb4:	3fd99999 	.word	0x3fd99999
 8004bb8:	55555555 	.word	0x55555555
 8004bbc:	3fd55555 	.word	0x3fd55555
 8004bc0:	43500000 	.word	0x43500000
 8004bc4:	7fefffff 	.word	0x7fefffff
 8004bc8:	3ff00000 	.word	0x3ff00000
 8004bcc:	3fe00000 	.word	0x3fe00000
 8004bd0:	c3500000 	.word	0xc3500000
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	4650      	mov	r0, sl
 8004bda:	4659      	mov	r1, fp
 8004bdc:	f000 f840 	bl	8004c60 <__aeabi_dsub>
 8004be0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004be4:	f000 f9f0 	bl	8004fc8 <__aeabi_dmul>
 8004be8:	e716      	b.n	8004a18 <__ieee754_log+0x1f8>
 8004bea:	bf00      	nop
 8004bec:	f3af 8000 	nop.w

08004bf0 <__fpclassifyd>:
 8004bf0:	b410      	push	{r4}
 8004bf2:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 8004bf6:	460b      	mov	r3, r1
 8004bf8:	d008      	beq.n	8004c0c <__fpclassifyd+0x1c>
 8004bfa:	4a11      	ldr	r2, [pc, #68]	; (8004c40 <__fpclassifyd+0x50>)
 8004bfc:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004c00:	4291      	cmp	r1, r2
 8004c02:	d808      	bhi.n	8004c16 <__fpclassifyd+0x26>
 8004c04:	2004      	movs	r0, #4
 8004c06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c0a:	4770      	bx	lr
 8004c0c:	b918      	cbnz	r0, 8004c16 <__fpclassifyd+0x26>
 8004c0e:	2002      	movs	r0, #2
 8004c10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	f103 43ff 	add.w	r3, r3, #2139095040	; 0x7f800000
 8004c1a:	4a09      	ldr	r2, [pc, #36]	; (8004c40 <__fpclassifyd+0x50>)
 8004c1c:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d9ef      	bls.n	8004c04 <__fpclassifyd+0x14>
 8004c24:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8004c28:	d201      	bcs.n	8004c2e <__fpclassifyd+0x3e>
 8004c2a:	2003      	movs	r0, #3
 8004c2c:	e7eb      	b.n	8004c06 <__fpclassifyd+0x16>
 8004c2e:	4b05      	ldr	r3, [pc, #20]	; (8004c44 <__fpclassifyd+0x54>)
 8004c30:	429c      	cmp	r4, r3
 8004c32:	d001      	beq.n	8004c38 <__fpclassifyd+0x48>
 8004c34:	2000      	movs	r0, #0
 8004c36:	e7e6      	b.n	8004c06 <__fpclassifyd+0x16>
 8004c38:	fab0 f080 	clz	r0, r0
 8004c3c:	0940      	lsrs	r0, r0, #5
 8004c3e:	e7e2      	b.n	8004c06 <__fpclassifyd+0x16>
 8004c40:	7fdfffff 	.word	0x7fdfffff
 8004c44:	7ff00000 	.word	0x7ff00000

08004c48 <matherr>:
 8004c48:	2000      	movs	r0, #0
 8004c4a:	4770      	bx	lr

08004c4c <nan>:
 8004c4c:	2000      	movs	r0, #0
 8004c4e:	4901      	ldr	r1, [pc, #4]	; (8004c54 <nan+0x8>)
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	7ff80000 	.word	0x7ff80000

08004c58 <__aeabi_drsub>:
 8004c58:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8004c5c:	e002      	b.n	8004c64 <__adddf3>
 8004c5e:	bf00      	nop

08004c60 <__aeabi_dsub>:
 8004c60:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08004c64 <__adddf3>:
 8004c64:	b530      	push	{r4, r5, lr}
 8004c66:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8004c6a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8004c6e:	ea94 0f05 	teq	r4, r5
 8004c72:	bf08      	it	eq
 8004c74:	ea90 0f02 	teqeq	r0, r2
 8004c78:	bf1f      	itttt	ne
 8004c7a:	ea54 0c00 	orrsne.w	ip, r4, r0
 8004c7e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8004c82:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8004c86:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004c8a:	f000 80e2 	beq.w	8004e52 <__adddf3+0x1ee>
 8004c8e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8004c92:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8004c96:	bfb8      	it	lt
 8004c98:	426d      	neglt	r5, r5
 8004c9a:	dd0c      	ble.n	8004cb6 <__adddf3+0x52>
 8004c9c:	442c      	add	r4, r5
 8004c9e:	ea80 0202 	eor.w	r2, r0, r2
 8004ca2:	ea81 0303 	eor.w	r3, r1, r3
 8004ca6:	ea82 0000 	eor.w	r0, r2, r0
 8004caa:	ea83 0101 	eor.w	r1, r3, r1
 8004cae:	ea80 0202 	eor.w	r2, r0, r2
 8004cb2:	ea81 0303 	eor.w	r3, r1, r3
 8004cb6:	2d36      	cmp	r5, #54	; 0x36
 8004cb8:	bf88      	it	hi
 8004cba:	bd30      	pophi	{r4, r5, pc}
 8004cbc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8004cc0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8004cc4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8004cc8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8004ccc:	d002      	beq.n	8004cd4 <__adddf3+0x70>
 8004cce:	4240      	negs	r0, r0
 8004cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8004cd4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8004cd8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8004cdc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8004ce0:	d002      	beq.n	8004ce8 <__adddf3+0x84>
 8004ce2:	4252      	negs	r2, r2
 8004ce4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8004ce8:	ea94 0f05 	teq	r4, r5
 8004cec:	f000 80a7 	beq.w	8004e3e <__adddf3+0x1da>
 8004cf0:	f1a4 0401 	sub.w	r4, r4, #1
 8004cf4:	f1d5 0e20 	rsbs	lr, r5, #32
 8004cf8:	db0d      	blt.n	8004d16 <__adddf3+0xb2>
 8004cfa:	fa02 fc0e 	lsl.w	ip, r2, lr
 8004cfe:	fa22 f205 	lsr.w	r2, r2, r5
 8004d02:	1880      	adds	r0, r0, r2
 8004d04:	f141 0100 	adc.w	r1, r1, #0
 8004d08:	fa03 f20e 	lsl.w	r2, r3, lr
 8004d0c:	1880      	adds	r0, r0, r2
 8004d0e:	fa43 f305 	asr.w	r3, r3, r5
 8004d12:	4159      	adcs	r1, r3
 8004d14:	e00e      	b.n	8004d34 <__adddf3+0xd0>
 8004d16:	f1a5 0520 	sub.w	r5, r5, #32
 8004d1a:	f10e 0e20 	add.w	lr, lr, #32
 8004d1e:	2a01      	cmp	r2, #1
 8004d20:	fa03 fc0e 	lsl.w	ip, r3, lr
 8004d24:	bf28      	it	cs
 8004d26:	f04c 0c02 	orrcs.w	ip, ip, #2
 8004d2a:	fa43 f305 	asr.w	r3, r3, r5
 8004d2e:	18c0      	adds	r0, r0, r3
 8004d30:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8004d34:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004d38:	d507      	bpl.n	8004d4a <__adddf3+0xe6>
 8004d3a:	f04f 0e00 	mov.w	lr, #0
 8004d3e:	f1dc 0c00 	rsbs	ip, ip, #0
 8004d42:	eb7e 0000 	sbcs.w	r0, lr, r0
 8004d46:	eb6e 0101 	sbc.w	r1, lr, r1
 8004d4a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8004d4e:	d31b      	bcc.n	8004d88 <__adddf3+0x124>
 8004d50:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8004d54:	d30c      	bcc.n	8004d70 <__adddf3+0x10c>
 8004d56:	0849      	lsrs	r1, r1, #1
 8004d58:	ea5f 0030 	movs.w	r0, r0, rrx
 8004d5c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8004d60:	f104 0401 	add.w	r4, r4, #1
 8004d64:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8004d68:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8004d6c:	f080 809a 	bcs.w	8004ea4 <__adddf3+0x240>
 8004d70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8004d74:	bf08      	it	eq
 8004d76:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8004d7a:	f150 0000 	adcs.w	r0, r0, #0
 8004d7e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8004d82:	ea41 0105 	orr.w	r1, r1, r5
 8004d86:	bd30      	pop	{r4, r5, pc}
 8004d88:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8004d8c:	4140      	adcs	r0, r0
 8004d8e:	eb41 0101 	adc.w	r1, r1, r1
 8004d92:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004d96:	f1a4 0401 	sub.w	r4, r4, #1
 8004d9a:	d1e9      	bne.n	8004d70 <__adddf3+0x10c>
 8004d9c:	f091 0f00 	teq	r1, #0
 8004da0:	bf04      	itt	eq
 8004da2:	4601      	moveq	r1, r0
 8004da4:	2000      	moveq	r0, #0
 8004da6:	fab1 f381 	clz	r3, r1
 8004daa:	bf08      	it	eq
 8004dac:	3320      	addeq	r3, #32
 8004dae:	f1a3 030b 	sub.w	r3, r3, #11
 8004db2:	f1b3 0220 	subs.w	r2, r3, #32
 8004db6:	da0c      	bge.n	8004dd2 <__adddf3+0x16e>
 8004db8:	320c      	adds	r2, #12
 8004dba:	dd08      	ble.n	8004dce <__adddf3+0x16a>
 8004dbc:	f102 0c14 	add.w	ip, r2, #20
 8004dc0:	f1c2 020c 	rsb	r2, r2, #12
 8004dc4:	fa01 f00c 	lsl.w	r0, r1, ip
 8004dc8:	fa21 f102 	lsr.w	r1, r1, r2
 8004dcc:	e00c      	b.n	8004de8 <__adddf3+0x184>
 8004dce:	f102 0214 	add.w	r2, r2, #20
 8004dd2:	bfd8      	it	le
 8004dd4:	f1c2 0c20 	rsble	ip, r2, #32
 8004dd8:	fa01 f102 	lsl.w	r1, r1, r2
 8004ddc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8004de0:	bfdc      	itt	le
 8004de2:	ea41 010c 	orrle.w	r1, r1, ip
 8004de6:	4090      	lslle	r0, r2
 8004de8:	1ae4      	subs	r4, r4, r3
 8004dea:	bfa2      	ittt	ge
 8004dec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8004df0:	4329      	orrge	r1, r5
 8004df2:	bd30      	popge	{r4, r5, pc}
 8004df4:	ea6f 0404 	mvn.w	r4, r4
 8004df8:	3c1f      	subs	r4, #31
 8004dfa:	da1c      	bge.n	8004e36 <__adddf3+0x1d2>
 8004dfc:	340c      	adds	r4, #12
 8004dfe:	dc0e      	bgt.n	8004e1e <__adddf3+0x1ba>
 8004e00:	f104 0414 	add.w	r4, r4, #20
 8004e04:	f1c4 0220 	rsb	r2, r4, #32
 8004e08:	fa20 f004 	lsr.w	r0, r0, r4
 8004e0c:	fa01 f302 	lsl.w	r3, r1, r2
 8004e10:	ea40 0003 	orr.w	r0, r0, r3
 8004e14:	fa21 f304 	lsr.w	r3, r1, r4
 8004e18:	ea45 0103 	orr.w	r1, r5, r3
 8004e1c:	bd30      	pop	{r4, r5, pc}
 8004e1e:	f1c4 040c 	rsb	r4, r4, #12
 8004e22:	f1c4 0220 	rsb	r2, r4, #32
 8004e26:	fa20 f002 	lsr.w	r0, r0, r2
 8004e2a:	fa01 f304 	lsl.w	r3, r1, r4
 8004e2e:	ea40 0003 	orr.w	r0, r0, r3
 8004e32:	4629      	mov	r1, r5
 8004e34:	bd30      	pop	{r4, r5, pc}
 8004e36:	fa21 f004 	lsr.w	r0, r1, r4
 8004e3a:	4629      	mov	r1, r5
 8004e3c:	bd30      	pop	{r4, r5, pc}
 8004e3e:	f094 0f00 	teq	r4, #0
 8004e42:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8004e46:	bf06      	itte	eq
 8004e48:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8004e4c:	3401      	addeq	r4, #1
 8004e4e:	3d01      	subne	r5, #1
 8004e50:	e74e      	b.n	8004cf0 <__adddf3+0x8c>
 8004e52:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8004e56:	bf18      	it	ne
 8004e58:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004e5c:	d029      	beq.n	8004eb2 <__adddf3+0x24e>
 8004e5e:	ea94 0f05 	teq	r4, r5
 8004e62:	bf08      	it	eq
 8004e64:	ea90 0f02 	teqeq	r0, r2
 8004e68:	d005      	beq.n	8004e76 <__adddf3+0x212>
 8004e6a:	ea54 0c00 	orrs.w	ip, r4, r0
 8004e6e:	bf04      	itt	eq
 8004e70:	4619      	moveq	r1, r3
 8004e72:	4610      	moveq	r0, r2
 8004e74:	bd30      	pop	{r4, r5, pc}
 8004e76:	ea91 0f03 	teq	r1, r3
 8004e7a:	bf1e      	ittt	ne
 8004e7c:	2100      	movne	r1, #0
 8004e7e:	2000      	movne	r0, #0
 8004e80:	bd30      	popne	{r4, r5, pc}
 8004e82:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8004e86:	d105      	bne.n	8004e94 <__adddf3+0x230>
 8004e88:	0040      	lsls	r0, r0, #1
 8004e8a:	4149      	adcs	r1, r1
 8004e8c:	bf28      	it	cs
 8004e8e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8004e92:	bd30      	pop	{r4, r5, pc}
 8004e94:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8004e98:	bf3c      	itt	cc
 8004e9a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8004e9e:	bd30      	popcc	{r4, r5, pc}
 8004ea0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004ea4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8004ea8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004eac:	f04f 0000 	mov.w	r0, #0
 8004eb0:	bd30      	pop	{r4, r5, pc}
 8004eb2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8004eb6:	bf1a      	itte	ne
 8004eb8:	4619      	movne	r1, r3
 8004eba:	4610      	movne	r0, r2
 8004ebc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8004ec0:	bf1c      	itt	ne
 8004ec2:	460b      	movne	r3, r1
 8004ec4:	4602      	movne	r2, r0
 8004ec6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8004eca:	bf06      	itte	eq
 8004ecc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8004ed0:	ea91 0f03 	teqeq	r1, r3
 8004ed4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8004ed8:	bd30      	pop	{r4, r5, pc}
 8004eda:	bf00      	nop

08004edc <__aeabi_ui2d>:
 8004edc:	f090 0f00 	teq	r0, #0
 8004ee0:	bf04      	itt	eq
 8004ee2:	2100      	moveq	r1, #0
 8004ee4:	4770      	bxeq	lr
 8004ee6:	b530      	push	{r4, r5, lr}
 8004ee8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004eec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004ef0:	f04f 0500 	mov.w	r5, #0
 8004ef4:	f04f 0100 	mov.w	r1, #0
 8004ef8:	e750      	b.n	8004d9c <__adddf3+0x138>
 8004efa:	bf00      	nop

08004efc <__aeabi_i2d>:
 8004efc:	f090 0f00 	teq	r0, #0
 8004f00:	bf04      	itt	eq
 8004f02:	2100      	moveq	r1, #0
 8004f04:	4770      	bxeq	lr
 8004f06:	b530      	push	{r4, r5, lr}
 8004f08:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004f0c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004f10:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8004f14:	bf48      	it	mi
 8004f16:	4240      	negmi	r0, r0
 8004f18:	f04f 0100 	mov.w	r1, #0
 8004f1c:	e73e      	b.n	8004d9c <__adddf3+0x138>
 8004f1e:	bf00      	nop

08004f20 <__aeabi_f2d>:
 8004f20:	0042      	lsls	r2, r0, #1
 8004f22:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8004f26:	ea4f 0131 	mov.w	r1, r1, rrx
 8004f2a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8004f2e:	bf1f      	itttt	ne
 8004f30:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8004f34:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8004f38:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8004f3c:	4770      	bxne	lr
 8004f3e:	f092 0f00 	teq	r2, #0
 8004f42:	bf14      	ite	ne
 8004f44:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8004f48:	4770      	bxeq	lr
 8004f4a:	b530      	push	{r4, r5, lr}
 8004f4c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8004f50:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004f54:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004f58:	e720      	b.n	8004d9c <__adddf3+0x138>
 8004f5a:	bf00      	nop

08004f5c <__aeabi_ul2d>:
 8004f5c:	ea50 0201 	orrs.w	r2, r0, r1
 8004f60:	bf08      	it	eq
 8004f62:	4770      	bxeq	lr
 8004f64:	b530      	push	{r4, r5, lr}
 8004f66:	f04f 0500 	mov.w	r5, #0
 8004f6a:	e00a      	b.n	8004f82 <__aeabi_l2d+0x16>

08004f6c <__aeabi_l2d>:
 8004f6c:	ea50 0201 	orrs.w	r2, r0, r1
 8004f70:	bf08      	it	eq
 8004f72:	4770      	bxeq	lr
 8004f74:	b530      	push	{r4, r5, lr}
 8004f76:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8004f7a:	d502      	bpl.n	8004f82 <__aeabi_l2d+0x16>
 8004f7c:	4240      	negs	r0, r0
 8004f7e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8004f82:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004f86:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004f8a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8004f8e:	f43f aedc 	beq.w	8004d4a <__adddf3+0xe6>
 8004f92:	f04f 0203 	mov.w	r2, #3
 8004f96:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8004f9a:	bf18      	it	ne
 8004f9c:	3203      	addne	r2, #3
 8004f9e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8004fa2:	bf18      	it	ne
 8004fa4:	3203      	addne	r2, #3
 8004fa6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8004faa:	f1c2 0320 	rsb	r3, r2, #32
 8004fae:	fa00 fc03 	lsl.w	ip, r0, r3
 8004fb2:	fa20 f002 	lsr.w	r0, r0, r2
 8004fb6:	fa01 fe03 	lsl.w	lr, r1, r3
 8004fba:	ea40 000e 	orr.w	r0, r0, lr
 8004fbe:	fa21 f102 	lsr.w	r1, r1, r2
 8004fc2:	4414      	add	r4, r2
 8004fc4:	e6c1      	b.n	8004d4a <__adddf3+0xe6>
 8004fc6:	bf00      	nop

08004fc8 <__aeabi_dmul>:
 8004fc8:	b570      	push	{r4, r5, r6, lr}
 8004fca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8004fce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8004fd2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8004fd6:	bf1d      	ittte	ne
 8004fd8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8004fdc:	ea94 0f0c 	teqne	r4, ip
 8004fe0:	ea95 0f0c 	teqne	r5, ip
 8004fe4:	f000 f8de 	bleq	80051a4 <__aeabi_dmul+0x1dc>
 8004fe8:	442c      	add	r4, r5
 8004fea:	ea81 0603 	eor.w	r6, r1, r3
 8004fee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8004ff2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8004ff6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8004ffa:	bf18      	it	ne
 8004ffc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8005000:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005004:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005008:	d038      	beq.n	800507c <__aeabi_dmul+0xb4>
 800500a:	fba0 ce02 	umull	ip, lr, r0, r2
 800500e:	f04f 0500 	mov.w	r5, #0
 8005012:	fbe1 e502 	umlal	lr, r5, r1, r2
 8005016:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800501a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800501e:	f04f 0600 	mov.w	r6, #0
 8005022:	fbe1 5603 	umlal	r5, r6, r1, r3
 8005026:	f09c 0f00 	teq	ip, #0
 800502a:	bf18      	it	ne
 800502c:	f04e 0e01 	orrne.w	lr, lr, #1
 8005030:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8005034:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8005038:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800503c:	d204      	bcs.n	8005048 <__aeabi_dmul+0x80>
 800503e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8005042:	416d      	adcs	r5, r5
 8005044:	eb46 0606 	adc.w	r6, r6, r6
 8005048:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800504c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8005050:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8005054:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8005058:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800505c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8005060:	bf88      	it	hi
 8005062:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8005066:	d81e      	bhi.n	80050a6 <__aeabi_dmul+0xde>
 8005068:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800506c:	bf08      	it	eq
 800506e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8005072:	f150 0000 	adcs.w	r0, r0, #0
 8005076:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800507a:	bd70      	pop	{r4, r5, r6, pc}
 800507c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8005080:	ea46 0101 	orr.w	r1, r6, r1
 8005084:	ea40 0002 	orr.w	r0, r0, r2
 8005088:	ea81 0103 	eor.w	r1, r1, r3
 800508c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8005090:	bfc2      	ittt	gt
 8005092:	ebd4 050c 	rsbsgt	r5, r4, ip
 8005096:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800509a:	bd70      	popgt	{r4, r5, r6, pc}
 800509c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80050a0:	f04f 0e00 	mov.w	lr, #0
 80050a4:	3c01      	subs	r4, #1
 80050a6:	f300 80ab 	bgt.w	8005200 <__aeabi_dmul+0x238>
 80050aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80050ae:	bfde      	ittt	le
 80050b0:	2000      	movle	r0, #0
 80050b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80050b6:	bd70      	pople	{r4, r5, r6, pc}
 80050b8:	f1c4 0400 	rsb	r4, r4, #0
 80050bc:	3c20      	subs	r4, #32
 80050be:	da35      	bge.n	800512c <__aeabi_dmul+0x164>
 80050c0:	340c      	adds	r4, #12
 80050c2:	dc1b      	bgt.n	80050fc <__aeabi_dmul+0x134>
 80050c4:	f104 0414 	add.w	r4, r4, #20
 80050c8:	f1c4 0520 	rsb	r5, r4, #32
 80050cc:	fa00 f305 	lsl.w	r3, r0, r5
 80050d0:	fa20 f004 	lsr.w	r0, r0, r4
 80050d4:	fa01 f205 	lsl.w	r2, r1, r5
 80050d8:	ea40 0002 	orr.w	r0, r0, r2
 80050dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80050e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80050e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80050e8:	fa21 f604 	lsr.w	r6, r1, r4
 80050ec:	eb42 0106 	adc.w	r1, r2, r6
 80050f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80050f4:	bf08      	it	eq
 80050f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80050fa:	bd70      	pop	{r4, r5, r6, pc}
 80050fc:	f1c4 040c 	rsb	r4, r4, #12
 8005100:	f1c4 0520 	rsb	r5, r4, #32
 8005104:	fa00 f304 	lsl.w	r3, r0, r4
 8005108:	fa20 f005 	lsr.w	r0, r0, r5
 800510c:	fa01 f204 	lsl.w	r2, r1, r4
 8005110:	ea40 0002 	orr.w	r0, r0, r2
 8005114:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005118:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800511c:	f141 0100 	adc.w	r1, r1, #0
 8005120:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005124:	bf08      	it	eq
 8005126:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800512a:	bd70      	pop	{r4, r5, r6, pc}
 800512c:	f1c4 0520 	rsb	r5, r4, #32
 8005130:	fa00 f205 	lsl.w	r2, r0, r5
 8005134:	ea4e 0e02 	orr.w	lr, lr, r2
 8005138:	fa20 f304 	lsr.w	r3, r0, r4
 800513c:	fa01 f205 	lsl.w	r2, r1, r5
 8005140:	ea43 0302 	orr.w	r3, r3, r2
 8005144:	fa21 f004 	lsr.w	r0, r1, r4
 8005148:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800514c:	fa21 f204 	lsr.w	r2, r1, r4
 8005150:	ea20 0002 	bic.w	r0, r0, r2
 8005154:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8005158:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800515c:	bf08      	it	eq
 800515e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005162:	bd70      	pop	{r4, r5, r6, pc}
 8005164:	f094 0f00 	teq	r4, #0
 8005168:	d10f      	bne.n	800518a <__aeabi_dmul+0x1c2>
 800516a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800516e:	0040      	lsls	r0, r0, #1
 8005170:	eb41 0101 	adc.w	r1, r1, r1
 8005174:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005178:	bf08      	it	eq
 800517a:	3c01      	subeq	r4, #1
 800517c:	d0f7      	beq.n	800516e <__aeabi_dmul+0x1a6>
 800517e:	ea41 0106 	orr.w	r1, r1, r6
 8005182:	f095 0f00 	teq	r5, #0
 8005186:	bf18      	it	ne
 8005188:	4770      	bxne	lr
 800518a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800518e:	0052      	lsls	r2, r2, #1
 8005190:	eb43 0303 	adc.w	r3, r3, r3
 8005194:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005198:	bf08      	it	eq
 800519a:	3d01      	subeq	r5, #1
 800519c:	d0f7      	beq.n	800518e <__aeabi_dmul+0x1c6>
 800519e:	ea43 0306 	orr.w	r3, r3, r6
 80051a2:	4770      	bx	lr
 80051a4:	ea94 0f0c 	teq	r4, ip
 80051a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80051ac:	bf18      	it	ne
 80051ae:	ea95 0f0c 	teqne	r5, ip
 80051b2:	d00c      	beq.n	80051ce <__aeabi_dmul+0x206>
 80051b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80051b8:	bf18      	it	ne
 80051ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80051be:	d1d1      	bne.n	8005164 <__aeabi_dmul+0x19c>
 80051c0:	ea81 0103 	eor.w	r1, r1, r3
 80051c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80051c8:	f04f 0000 	mov.w	r0, #0
 80051cc:	bd70      	pop	{r4, r5, r6, pc}
 80051ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80051d2:	bf06      	itte	eq
 80051d4:	4610      	moveq	r0, r2
 80051d6:	4619      	moveq	r1, r3
 80051d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80051dc:	d019      	beq.n	8005212 <__aeabi_dmul+0x24a>
 80051de:	ea94 0f0c 	teq	r4, ip
 80051e2:	d102      	bne.n	80051ea <__aeabi_dmul+0x222>
 80051e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80051e8:	d113      	bne.n	8005212 <__aeabi_dmul+0x24a>
 80051ea:	ea95 0f0c 	teq	r5, ip
 80051ee:	d105      	bne.n	80051fc <__aeabi_dmul+0x234>
 80051f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80051f4:	bf1c      	itt	ne
 80051f6:	4610      	movne	r0, r2
 80051f8:	4619      	movne	r1, r3
 80051fa:	d10a      	bne.n	8005212 <__aeabi_dmul+0x24a>
 80051fc:	ea81 0103 	eor.w	r1, r1, r3
 8005200:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005204:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8005208:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800520c:	f04f 0000 	mov.w	r0, #0
 8005210:	bd70      	pop	{r4, r5, r6, pc}
 8005212:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8005216:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800521a:	bd70      	pop	{r4, r5, r6, pc}

0800521c <__aeabi_ddiv>:
 800521c:	b570      	push	{r4, r5, r6, lr}
 800521e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8005222:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8005226:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800522a:	bf1d      	ittte	ne
 800522c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8005230:	ea94 0f0c 	teqne	r4, ip
 8005234:	ea95 0f0c 	teqne	r5, ip
 8005238:	f000 f8a7 	bleq	800538a <__aeabi_ddiv+0x16e>
 800523c:	eba4 0405 	sub.w	r4, r4, r5
 8005240:	ea81 0e03 	eor.w	lr, r1, r3
 8005244:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8005248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800524c:	f000 8088 	beq.w	8005360 <__aeabi_ddiv+0x144>
 8005250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8005254:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8005258:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800525c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8005260:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8005264:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8005268:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800526c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8005270:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8005274:	429d      	cmp	r5, r3
 8005276:	bf08      	it	eq
 8005278:	4296      	cmpeq	r6, r2
 800527a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800527e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8005282:	d202      	bcs.n	800528a <__aeabi_ddiv+0x6e>
 8005284:	085b      	lsrs	r3, r3, #1
 8005286:	ea4f 0232 	mov.w	r2, r2, rrx
 800528a:	1ab6      	subs	r6, r6, r2
 800528c:	eb65 0503 	sbc.w	r5, r5, r3
 8005290:	085b      	lsrs	r3, r3, #1
 8005292:	ea4f 0232 	mov.w	r2, r2, rrx
 8005296:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800529a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800529e:	ebb6 0e02 	subs.w	lr, r6, r2
 80052a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80052a6:	bf22      	ittt	cs
 80052a8:	1ab6      	subcs	r6, r6, r2
 80052aa:	4675      	movcs	r5, lr
 80052ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80052b0:	085b      	lsrs	r3, r3, #1
 80052b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80052b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80052ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80052be:	bf22      	ittt	cs
 80052c0:	1ab6      	subcs	r6, r6, r2
 80052c2:	4675      	movcs	r5, lr
 80052c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80052c8:	085b      	lsrs	r3, r3, #1
 80052ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80052ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80052d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80052d6:	bf22      	ittt	cs
 80052d8:	1ab6      	subcs	r6, r6, r2
 80052da:	4675      	movcs	r5, lr
 80052dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80052e0:	085b      	lsrs	r3, r3, #1
 80052e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80052e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80052ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80052ee:	bf22      	ittt	cs
 80052f0:	1ab6      	subcs	r6, r6, r2
 80052f2:	4675      	movcs	r5, lr
 80052f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80052f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80052fc:	d018      	beq.n	8005330 <__aeabi_ddiv+0x114>
 80052fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8005302:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8005306:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800530a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800530e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8005312:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8005316:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800531a:	d1c0      	bne.n	800529e <__aeabi_ddiv+0x82>
 800531c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005320:	d10b      	bne.n	800533a <__aeabi_ddiv+0x11e>
 8005322:	ea41 0100 	orr.w	r1, r1, r0
 8005326:	f04f 0000 	mov.w	r0, #0
 800532a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800532e:	e7b6      	b.n	800529e <__aeabi_ddiv+0x82>
 8005330:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005334:	bf04      	itt	eq
 8005336:	4301      	orreq	r1, r0
 8005338:	2000      	moveq	r0, #0
 800533a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800533e:	bf88      	it	hi
 8005340:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8005344:	f63f aeaf 	bhi.w	80050a6 <__aeabi_dmul+0xde>
 8005348:	ebb5 0c03 	subs.w	ip, r5, r3
 800534c:	bf04      	itt	eq
 800534e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8005352:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8005356:	f150 0000 	adcs.w	r0, r0, #0
 800535a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800535e:	bd70      	pop	{r4, r5, r6, pc}
 8005360:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8005364:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8005368:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800536c:	bfc2      	ittt	gt
 800536e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8005372:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8005376:	bd70      	popgt	{r4, r5, r6, pc}
 8005378:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800537c:	f04f 0e00 	mov.w	lr, #0
 8005380:	3c01      	subs	r4, #1
 8005382:	e690      	b.n	80050a6 <__aeabi_dmul+0xde>
 8005384:	ea45 0e06 	orr.w	lr, r5, r6
 8005388:	e68d      	b.n	80050a6 <__aeabi_dmul+0xde>
 800538a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800538e:	ea94 0f0c 	teq	r4, ip
 8005392:	bf08      	it	eq
 8005394:	ea95 0f0c 	teqeq	r5, ip
 8005398:	f43f af3b 	beq.w	8005212 <__aeabi_dmul+0x24a>
 800539c:	ea94 0f0c 	teq	r4, ip
 80053a0:	d10a      	bne.n	80053b8 <__aeabi_ddiv+0x19c>
 80053a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80053a6:	f47f af34 	bne.w	8005212 <__aeabi_dmul+0x24a>
 80053aa:	ea95 0f0c 	teq	r5, ip
 80053ae:	f47f af25 	bne.w	80051fc <__aeabi_dmul+0x234>
 80053b2:	4610      	mov	r0, r2
 80053b4:	4619      	mov	r1, r3
 80053b6:	e72c      	b.n	8005212 <__aeabi_dmul+0x24a>
 80053b8:	ea95 0f0c 	teq	r5, ip
 80053bc:	d106      	bne.n	80053cc <__aeabi_ddiv+0x1b0>
 80053be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80053c2:	f43f aefd 	beq.w	80051c0 <__aeabi_dmul+0x1f8>
 80053c6:	4610      	mov	r0, r2
 80053c8:	4619      	mov	r1, r3
 80053ca:	e722      	b.n	8005212 <__aeabi_dmul+0x24a>
 80053cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80053d0:	bf18      	it	ne
 80053d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80053d6:	f47f aec5 	bne.w	8005164 <__aeabi_dmul+0x19c>
 80053da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80053de:	f47f af0d 	bne.w	80051fc <__aeabi_dmul+0x234>
 80053e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80053e6:	f47f aeeb 	bne.w	80051c0 <__aeabi_dmul+0x1f8>
 80053ea:	e712      	b.n	8005212 <__aeabi_dmul+0x24a>

080053ec <__gedf2>:
 80053ec:	f04f 3cff 	mov.w	ip, #4294967295
 80053f0:	e006      	b.n	8005400 <__cmpdf2+0x4>
 80053f2:	bf00      	nop

080053f4 <__ledf2>:
 80053f4:	f04f 0c01 	mov.w	ip, #1
 80053f8:	e002      	b.n	8005400 <__cmpdf2+0x4>
 80053fa:	bf00      	nop

080053fc <__cmpdf2>:
 80053fc:	f04f 0c01 	mov.w	ip, #1
 8005400:	f84d cd04 	str.w	ip, [sp, #-4]!
 8005404:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8005408:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800540c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005410:	bf18      	it	ne
 8005412:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8005416:	d01b      	beq.n	8005450 <__cmpdf2+0x54>
 8005418:	b001      	add	sp, #4
 800541a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800541e:	bf0c      	ite	eq
 8005420:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8005424:	ea91 0f03 	teqne	r1, r3
 8005428:	bf02      	ittt	eq
 800542a:	ea90 0f02 	teqeq	r0, r2
 800542e:	2000      	moveq	r0, #0
 8005430:	4770      	bxeq	lr
 8005432:	f110 0f00 	cmn.w	r0, #0
 8005436:	ea91 0f03 	teq	r1, r3
 800543a:	bf58      	it	pl
 800543c:	4299      	cmppl	r1, r3
 800543e:	bf08      	it	eq
 8005440:	4290      	cmpeq	r0, r2
 8005442:	bf2c      	ite	cs
 8005444:	17d8      	asrcs	r0, r3, #31
 8005446:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800544a:	f040 0001 	orr.w	r0, r0, #1
 800544e:	4770      	bx	lr
 8005450:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8005454:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005458:	d102      	bne.n	8005460 <__cmpdf2+0x64>
 800545a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800545e:	d107      	bne.n	8005470 <__cmpdf2+0x74>
 8005460:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005464:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005468:	d1d6      	bne.n	8005418 <__cmpdf2+0x1c>
 800546a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800546e:	d0d3      	beq.n	8005418 <__cmpdf2+0x1c>
 8005470:	f85d 0b04 	ldr.w	r0, [sp], #4
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop

08005478 <__aeabi_cdrcmple>:
 8005478:	4684      	mov	ip, r0
 800547a:	4610      	mov	r0, r2
 800547c:	4662      	mov	r2, ip
 800547e:	468c      	mov	ip, r1
 8005480:	4619      	mov	r1, r3
 8005482:	4663      	mov	r3, ip
 8005484:	e000      	b.n	8005488 <__aeabi_cdcmpeq>
 8005486:	bf00      	nop

08005488 <__aeabi_cdcmpeq>:
 8005488:	b501      	push	{r0, lr}
 800548a:	f7ff ffb7 	bl	80053fc <__cmpdf2>
 800548e:	2800      	cmp	r0, #0
 8005490:	bf48      	it	mi
 8005492:	f110 0f00 	cmnmi.w	r0, #0
 8005496:	bd01      	pop	{r0, pc}

08005498 <__aeabi_dcmpeq>:
 8005498:	f84d ed08 	str.w	lr, [sp, #-8]!
 800549c:	f7ff fff4 	bl	8005488 <__aeabi_cdcmpeq>
 80054a0:	bf0c      	ite	eq
 80054a2:	2001      	moveq	r0, #1
 80054a4:	2000      	movne	r0, #0
 80054a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80054aa:	bf00      	nop

080054ac <__aeabi_dcmplt>:
 80054ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80054b0:	f7ff ffea 	bl	8005488 <__aeabi_cdcmpeq>
 80054b4:	bf34      	ite	cc
 80054b6:	2001      	movcc	r0, #1
 80054b8:	2000      	movcs	r0, #0
 80054ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80054be:	bf00      	nop

080054c0 <__aeabi_dcmple>:
 80054c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80054c4:	f7ff ffe0 	bl	8005488 <__aeabi_cdcmpeq>
 80054c8:	bf94      	ite	ls
 80054ca:	2001      	movls	r0, #1
 80054cc:	2000      	movhi	r0, #0
 80054ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80054d2:	bf00      	nop

080054d4 <__aeabi_dcmpge>:
 80054d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80054d8:	f7ff ffce 	bl	8005478 <__aeabi_cdrcmple>
 80054dc:	bf94      	ite	ls
 80054de:	2001      	movls	r0, #1
 80054e0:	2000      	movhi	r0, #0
 80054e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80054e6:	bf00      	nop

080054e8 <__aeabi_dcmpgt>:
 80054e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80054ec:	f7ff ffc4 	bl	8005478 <__aeabi_cdrcmple>
 80054f0:	bf34      	ite	cc
 80054f2:	2001      	movcc	r0, #1
 80054f4:	2000      	movcs	r0, #0
 80054f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80054fa:	bf00      	nop

080054fc <__aeabi_d2uiz>:
 80054fc:	004a      	lsls	r2, r1, #1
 80054fe:	d211      	bcs.n	8005524 <__aeabi_d2uiz+0x28>
 8005500:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8005504:	d211      	bcs.n	800552a <__aeabi_d2uiz+0x2e>
 8005506:	d50d      	bpl.n	8005524 <__aeabi_d2uiz+0x28>
 8005508:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800550c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8005510:	d40e      	bmi.n	8005530 <__aeabi_d2uiz+0x34>
 8005512:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8005516:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800551a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800551e:	fa23 f002 	lsr.w	r0, r3, r2
 8005522:	4770      	bx	lr
 8005524:	f04f 0000 	mov.w	r0, #0
 8005528:	4770      	bx	lr
 800552a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800552e:	d102      	bne.n	8005536 <__aeabi_d2uiz+0x3a>
 8005530:	f04f 30ff 	mov.w	r0, #4294967295
 8005534:	4770      	bx	lr
 8005536:	f04f 0000 	mov.w	r0, #0
 800553a:	4770      	bx	lr

0800553c <__aeabi_d2f>:
 800553c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8005540:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8005544:	bf24      	itt	cs
 8005546:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800554a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800554e:	d90d      	bls.n	800556c <__aeabi_d2f+0x30>
 8005550:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8005554:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8005558:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800555c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8005560:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8005564:	bf08      	it	eq
 8005566:	f020 0001 	biceq.w	r0, r0, #1
 800556a:	4770      	bx	lr
 800556c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8005570:	d121      	bne.n	80055b6 <__aeabi_d2f+0x7a>
 8005572:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8005576:	bfbc      	itt	lt
 8005578:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800557c:	4770      	bxlt	lr
 800557e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005582:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8005586:	f1c2 0218 	rsb	r2, r2, #24
 800558a:	f1c2 0c20 	rsb	ip, r2, #32
 800558e:	fa10 f30c 	lsls.w	r3, r0, ip
 8005592:	fa20 f002 	lsr.w	r0, r0, r2
 8005596:	bf18      	it	ne
 8005598:	f040 0001 	orrne.w	r0, r0, #1
 800559c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80055a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80055a4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80055a8:	ea40 000c 	orr.w	r0, r0, ip
 80055ac:	fa23 f302 	lsr.w	r3, r3, r2
 80055b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80055b4:	e7cc      	b.n	8005550 <__aeabi_d2f+0x14>
 80055b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80055ba:	d107      	bne.n	80055cc <__aeabi_d2f+0x90>
 80055bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80055c0:	bf1e      	ittt	ne
 80055c2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80055c6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80055ca:	4770      	bxne	lr
 80055cc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80055d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80055d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop

080055dc <__aeabi_uldivmod>:
 80055dc:	b94b      	cbnz	r3, 80055f2 <__aeabi_uldivmod+0x16>
 80055de:	b942      	cbnz	r2, 80055f2 <__aeabi_uldivmod+0x16>
 80055e0:	2900      	cmp	r1, #0
 80055e2:	bf08      	it	eq
 80055e4:	2800      	cmpeq	r0, #0
 80055e6:	d002      	beq.n	80055ee <__aeabi_uldivmod+0x12>
 80055e8:	f04f 31ff 	mov.w	r1, #4294967295
 80055ec:	4608      	mov	r0, r1
 80055ee:	f000 b83b 	b.w	8005668 <__aeabi_idiv0>
 80055f2:	b082      	sub	sp, #8
 80055f4:	46ec      	mov	ip, sp
 80055f6:	e92d 5000 	stmdb	sp!, {ip, lr}
 80055fa:	f000 f81d 	bl	8005638 <__gnu_uldivmod_helper>
 80055fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8005602:	b002      	add	sp, #8
 8005604:	bc0c      	pop	{r2, r3}
 8005606:	4770      	bx	lr

08005608 <__gnu_ldivmod_helper>:
 8005608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800560c:	9c06      	ldr	r4, [sp, #24]
 800560e:	4615      	mov	r5, r2
 8005610:	4606      	mov	r6, r0
 8005612:	460f      	mov	r7, r1
 8005614:	4698      	mov	r8, r3
 8005616:	f000 f829 	bl	800566c <__divdi3>
 800561a:	fb05 f301 	mul.w	r3, r5, r1
 800561e:	fb00 3808 	mla	r8, r0, r8, r3
 8005622:	fba5 2300 	umull	r2, r3, r5, r0
 8005626:	1ab2      	subs	r2, r6, r2
 8005628:	4443      	add	r3, r8
 800562a:	eb67 0303 	sbc.w	r3, r7, r3
 800562e:	e9c4 2300 	strd	r2, r3, [r4]
 8005632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005636:	bf00      	nop

08005638 <__gnu_uldivmod_helper>:
 8005638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800563c:	9c06      	ldr	r4, [sp, #24]
 800563e:	4690      	mov	r8, r2
 8005640:	4606      	mov	r6, r0
 8005642:	460f      	mov	r7, r1
 8005644:	461d      	mov	r5, r3
 8005646:	f000 f95f 	bl	8005908 <__udivdi3>
 800564a:	fb00 f505 	mul.w	r5, r0, r5
 800564e:	fba0 2308 	umull	r2, r3, r0, r8
 8005652:	fb08 5501 	mla	r5, r8, r1, r5
 8005656:	1ab2      	subs	r2, r6, r2
 8005658:	442b      	add	r3, r5
 800565a:	eb67 0303 	sbc.w	r3, r7, r3
 800565e:	e9c4 2300 	strd	r2, r3, [r4]
 8005662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005666:	bf00      	nop

08005668 <__aeabi_idiv0>:
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop

0800566c <__divdi3>:
 800566c:	2900      	cmp	r1, #0
 800566e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005672:	f2c0 80a6 	blt.w	80057c2 <__divdi3+0x156>
 8005676:	2600      	movs	r6, #0
 8005678:	2b00      	cmp	r3, #0
 800567a:	f2c0 809c 	blt.w	80057b6 <__divdi3+0x14a>
 800567e:	4688      	mov	r8, r1
 8005680:	4694      	mov	ip, r2
 8005682:	469e      	mov	lr, r3
 8005684:	4615      	mov	r5, r2
 8005686:	4604      	mov	r4, r0
 8005688:	460f      	mov	r7, r1
 800568a:	2b00      	cmp	r3, #0
 800568c:	d13d      	bne.n	800570a <__divdi3+0x9e>
 800568e:	428a      	cmp	r2, r1
 8005690:	d959      	bls.n	8005746 <__divdi3+0xda>
 8005692:	fab2 f382 	clz	r3, r2
 8005696:	b13b      	cbz	r3, 80056a8 <__divdi3+0x3c>
 8005698:	f1c3 0220 	rsb	r2, r3, #32
 800569c:	409f      	lsls	r7, r3
 800569e:	fa20 f202 	lsr.w	r2, r0, r2
 80056a2:	409d      	lsls	r5, r3
 80056a4:	4317      	orrs	r7, r2
 80056a6:	409c      	lsls	r4, r3
 80056a8:	0c29      	lsrs	r1, r5, #16
 80056aa:	0c22      	lsrs	r2, r4, #16
 80056ac:	fbb7 fef1 	udiv	lr, r7, r1
 80056b0:	b2a8      	uxth	r0, r5
 80056b2:	fb01 771e 	mls	r7, r1, lr, r7
 80056b6:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 80056ba:	fb00 f30e 	mul.w	r3, r0, lr
 80056be:	42bb      	cmp	r3, r7
 80056c0:	d90a      	bls.n	80056d8 <__divdi3+0x6c>
 80056c2:	197f      	adds	r7, r7, r5
 80056c4:	f10e 32ff 	add.w	r2, lr, #4294967295
 80056c8:	f080 8105 	bcs.w	80058d6 <__divdi3+0x26a>
 80056cc:	42bb      	cmp	r3, r7
 80056ce:	f240 8102 	bls.w	80058d6 <__divdi3+0x26a>
 80056d2:	f1ae 0e02 	sub.w	lr, lr, #2
 80056d6:	442f      	add	r7, r5
 80056d8:	1aff      	subs	r7, r7, r3
 80056da:	b2a4      	uxth	r4, r4
 80056dc:	fbb7 f3f1 	udiv	r3, r7, r1
 80056e0:	fb01 7713 	mls	r7, r1, r3, r7
 80056e4:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 80056e8:	fb00 f003 	mul.w	r0, r0, r3
 80056ec:	42b8      	cmp	r0, r7
 80056ee:	d908      	bls.n	8005702 <__divdi3+0x96>
 80056f0:	197f      	adds	r7, r7, r5
 80056f2:	f103 32ff 	add.w	r2, r3, #4294967295
 80056f6:	f080 80f0 	bcs.w	80058da <__divdi3+0x26e>
 80056fa:	42b8      	cmp	r0, r7
 80056fc:	f240 80ed 	bls.w	80058da <__divdi3+0x26e>
 8005700:	3b02      	subs	r3, #2
 8005702:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8005706:	2200      	movs	r2, #0
 8005708:	e003      	b.n	8005712 <__divdi3+0xa6>
 800570a:	428b      	cmp	r3, r1
 800570c:	d90f      	bls.n	800572e <__divdi3+0xc2>
 800570e:	2200      	movs	r2, #0
 8005710:	4613      	mov	r3, r2
 8005712:	1c34      	adds	r4, r6, #0
 8005714:	bf18      	it	ne
 8005716:	2401      	movne	r4, #1
 8005718:	4260      	negs	r0, r4
 800571a:	f04f 0500 	mov.w	r5, #0
 800571e:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
 8005722:	4058      	eors	r0, r3
 8005724:	4051      	eors	r1, r2
 8005726:	1900      	adds	r0, r0, r4
 8005728:	4169      	adcs	r1, r5
 800572a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800572e:	fab3 f283 	clz	r2, r3
 8005732:	2a00      	cmp	r2, #0
 8005734:	f040 8086 	bne.w	8005844 <__divdi3+0x1d8>
 8005738:	428b      	cmp	r3, r1
 800573a:	d302      	bcc.n	8005742 <__divdi3+0xd6>
 800573c:	4584      	cmp	ip, r0
 800573e:	f200 80db 	bhi.w	80058f8 <__divdi3+0x28c>
 8005742:	2301      	movs	r3, #1
 8005744:	e7e5      	b.n	8005712 <__divdi3+0xa6>
 8005746:	b912      	cbnz	r2, 800574e <__divdi3+0xe2>
 8005748:	2301      	movs	r3, #1
 800574a:	fbb3 f5f2 	udiv	r5, r3, r2
 800574e:	fab5 f085 	clz	r0, r5
 8005752:	2800      	cmp	r0, #0
 8005754:	d13b      	bne.n	80057ce <__divdi3+0x162>
 8005756:	1b78      	subs	r0, r7, r5
 8005758:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800575c:	fa1f fc85 	uxth.w	ip, r5
 8005760:	2201      	movs	r2, #1
 8005762:	fbb0 f8fe 	udiv	r8, r0, lr
 8005766:	0c21      	lsrs	r1, r4, #16
 8005768:	fb0e 0718 	mls	r7, lr, r8, r0
 800576c:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
 8005770:	fb0c f308 	mul.w	r3, ip, r8
 8005774:	42bb      	cmp	r3, r7
 8005776:	d907      	bls.n	8005788 <__divdi3+0x11c>
 8005778:	197f      	adds	r7, r7, r5
 800577a:	f108 31ff 	add.w	r1, r8, #4294967295
 800577e:	d202      	bcs.n	8005786 <__divdi3+0x11a>
 8005780:	42bb      	cmp	r3, r7
 8005782:	f200 80bd 	bhi.w	8005900 <__divdi3+0x294>
 8005786:	4688      	mov	r8, r1
 8005788:	1aff      	subs	r7, r7, r3
 800578a:	b2a4      	uxth	r4, r4
 800578c:	fbb7 f3fe 	udiv	r3, r7, lr
 8005790:	fb0e 7713 	mls	r7, lr, r3, r7
 8005794:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8005798:	fb0c fc03 	mul.w	ip, ip, r3
 800579c:	45bc      	cmp	ip, r7
 800579e:	d907      	bls.n	80057b0 <__divdi3+0x144>
 80057a0:	197f      	adds	r7, r7, r5
 80057a2:	f103 31ff 	add.w	r1, r3, #4294967295
 80057a6:	d202      	bcs.n	80057ae <__divdi3+0x142>
 80057a8:	45bc      	cmp	ip, r7
 80057aa:	f200 80a7 	bhi.w	80058fc <__divdi3+0x290>
 80057ae:	460b      	mov	r3, r1
 80057b0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80057b4:	e7ad      	b.n	8005712 <__divdi3+0xa6>
 80057b6:	4252      	negs	r2, r2
 80057b8:	ea6f 0606 	mvn.w	r6, r6
 80057bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80057c0:	e75d      	b.n	800567e <__divdi3+0x12>
 80057c2:	4240      	negs	r0, r0
 80057c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80057c8:	f04f 36ff 	mov.w	r6, #4294967295
 80057cc:	e754      	b.n	8005678 <__divdi3+0xc>
 80057ce:	f1c0 0220 	rsb	r2, r0, #32
 80057d2:	fa24 f102 	lsr.w	r1, r4, r2
 80057d6:	fa07 f300 	lsl.w	r3, r7, r0
 80057da:	4085      	lsls	r5, r0
 80057dc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80057e0:	40d7      	lsrs	r7, r2
 80057e2:	4319      	orrs	r1, r3
 80057e4:	fbb7 f2fe 	udiv	r2, r7, lr
 80057e8:	0c0b      	lsrs	r3, r1, #16
 80057ea:	fb0e 7712 	mls	r7, lr, r2, r7
 80057ee:	fa1f fc85 	uxth.w	ip, r5
 80057f2:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80057f6:	fb0c f702 	mul.w	r7, ip, r2
 80057fa:	429f      	cmp	r7, r3
 80057fc:	fa04 f400 	lsl.w	r4, r4, r0
 8005800:	d907      	bls.n	8005812 <__divdi3+0x1a6>
 8005802:	195b      	adds	r3, r3, r5
 8005804:	f102 30ff 	add.w	r0, r2, #4294967295
 8005808:	d274      	bcs.n	80058f4 <__divdi3+0x288>
 800580a:	429f      	cmp	r7, r3
 800580c:	d972      	bls.n	80058f4 <__divdi3+0x288>
 800580e:	3a02      	subs	r2, #2
 8005810:	442b      	add	r3, r5
 8005812:	1bdf      	subs	r7, r3, r7
 8005814:	b289      	uxth	r1, r1
 8005816:	fbb7 f8fe 	udiv	r8, r7, lr
 800581a:	fb0e 7318 	mls	r3, lr, r8, r7
 800581e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005822:	fb0c f708 	mul.w	r7, ip, r8
 8005826:	429f      	cmp	r7, r3
 8005828:	d908      	bls.n	800583c <__divdi3+0x1d0>
 800582a:	195b      	adds	r3, r3, r5
 800582c:	f108 31ff 	add.w	r1, r8, #4294967295
 8005830:	d25c      	bcs.n	80058ec <__divdi3+0x280>
 8005832:	429f      	cmp	r7, r3
 8005834:	d95a      	bls.n	80058ec <__divdi3+0x280>
 8005836:	f1a8 0802 	sub.w	r8, r8, #2
 800583a:	442b      	add	r3, r5
 800583c:	1bd8      	subs	r0, r3, r7
 800583e:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
 8005842:	e78e      	b.n	8005762 <__divdi3+0xf6>
 8005844:	f1c2 0320 	rsb	r3, r2, #32
 8005848:	fa2c f103 	lsr.w	r1, ip, r3
 800584c:	fa0e fe02 	lsl.w	lr, lr, r2
 8005850:	fa20 f703 	lsr.w	r7, r0, r3
 8005854:	ea41 0e0e 	orr.w	lr, r1, lr
 8005858:	fa08 f002 	lsl.w	r0, r8, r2
 800585c:	fa28 f103 	lsr.w	r1, r8, r3
 8005860:	ea4f 451e 	mov.w	r5, lr, lsr #16
 8005864:	4338      	orrs	r0, r7
 8005866:	fbb1 f8f5 	udiv	r8, r1, r5
 800586a:	0c03      	lsrs	r3, r0, #16
 800586c:	fb05 1118 	mls	r1, r5, r8, r1
 8005870:	fa1f f78e 	uxth.w	r7, lr
 8005874:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8005878:	fb07 f308 	mul.w	r3, r7, r8
 800587c:	428b      	cmp	r3, r1
 800587e:	fa0c fc02 	lsl.w	ip, ip, r2
 8005882:	d909      	bls.n	8005898 <__divdi3+0x22c>
 8005884:	eb11 010e 	adds.w	r1, r1, lr
 8005888:	f108 39ff 	add.w	r9, r8, #4294967295
 800588c:	d230      	bcs.n	80058f0 <__divdi3+0x284>
 800588e:	428b      	cmp	r3, r1
 8005890:	d92e      	bls.n	80058f0 <__divdi3+0x284>
 8005892:	f1a8 0802 	sub.w	r8, r8, #2
 8005896:	4471      	add	r1, lr
 8005898:	1ac9      	subs	r1, r1, r3
 800589a:	b280      	uxth	r0, r0
 800589c:	fbb1 f3f5 	udiv	r3, r1, r5
 80058a0:	fb05 1113 	mls	r1, r5, r3, r1
 80058a4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80058a8:	fb07 f703 	mul.w	r7, r7, r3
 80058ac:	428f      	cmp	r7, r1
 80058ae:	d908      	bls.n	80058c2 <__divdi3+0x256>
 80058b0:	eb11 010e 	adds.w	r1, r1, lr
 80058b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80058b8:	d216      	bcs.n	80058e8 <__divdi3+0x27c>
 80058ba:	428f      	cmp	r7, r1
 80058bc:	d914      	bls.n	80058e8 <__divdi3+0x27c>
 80058be:	3b02      	subs	r3, #2
 80058c0:	4471      	add	r1, lr
 80058c2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80058c6:	1bc9      	subs	r1, r1, r7
 80058c8:	fba3 890c 	umull	r8, r9, r3, ip
 80058cc:	4549      	cmp	r1, r9
 80058ce:	d309      	bcc.n	80058e4 <__divdi3+0x278>
 80058d0:	d005      	beq.n	80058de <__divdi3+0x272>
 80058d2:	2200      	movs	r2, #0
 80058d4:	e71d      	b.n	8005712 <__divdi3+0xa6>
 80058d6:	4696      	mov	lr, r2
 80058d8:	e6fe      	b.n	80056d8 <__divdi3+0x6c>
 80058da:	4613      	mov	r3, r2
 80058dc:	e711      	b.n	8005702 <__divdi3+0x96>
 80058de:	4094      	lsls	r4, r2
 80058e0:	4544      	cmp	r4, r8
 80058e2:	d2f6      	bcs.n	80058d2 <__divdi3+0x266>
 80058e4:	3b01      	subs	r3, #1
 80058e6:	e7f4      	b.n	80058d2 <__divdi3+0x266>
 80058e8:	4603      	mov	r3, r0
 80058ea:	e7ea      	b.n	80058c2 <__divdi3+0x256>
 80058ec:	4688      	mov	r8, r1
 80058ee:	e7a5      	b.n	800583c <__divdi3+0x1d0>
 80058f0:	46c8      	mov	r8, r9
 80058f2:	e7d1      	b.n	8005898 <__divdi3+0x22c>
 80058f4:	4602      	mov	r2, r0
 80058f6:	e78c      	b.n	8005812 <__divdi3+0x1a6>
 80058f8:	4613      	mov	r3, r2
 80058fa:	e70a      	b.n	8005712 <__divdi3+0xa6>
 80058fc:	3b02      	subs	r3, #2
 80058fe:	e757      	b.n	80057b0 <__divdi3+0x144>
 8005900:	f1a8 0802 	sub.w	r8, r8, #2
 8005904:	442f      	add	r7, r5
 8005906:	e73f      	b.n	8005788 <__divdi3+0x11c>

08005908 <__udivdi3>:
 8005908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800590c:	2b00      	cmp	r3, #0
 800590e:	d144      	bne.n	800599a <__udivdi3+0x92>
 8005910:	428a      	cmp	r2, r1
 8005912:	4615      	mov	r5, r2
 8005914:	4604      	mov	r4, r0
 8005916:	d94f      	bls.n	80059b8 <__udivdi3+0xb0>
 8005918:	fab2 f782 	clz	r7, r2
 800591c:	460e      	mov	r6, r1
 800591e:	b14f      	cbz	r7, 8005934 <__udivdi3+0x2c>
 8005920:	f1c7 0320 	rsb	r3, r7, #32
 8005924:	40b9      	lsls	r1, r7
 8005926:	fa20 f603 	lsr.w	r6, r0, r3
 800592a:	fa02 f507 	lsl.w	r5, r2, r7
 800592e:	430e      	orrs	r6, r1
 8005930:	fa00 f407 	lsl.w	r4, r0, r7
 8005934:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8005938:	0c23      	lsrs	r3, r4, #16
 800593a:	fbb6 f0fe 	udiv	r0, r6, lr
 800593e:	b2af      	uxth	r7, r5
 8005940:	fb0e 6110 	mls	r1, lr, r0, r6
 8005944:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8005948:	fb07 f100 	mul.w	r1, r7, r0
 800594c:	4299      	cmp	r1, r3
 800594e:	d909      	bls.n	8005964 <__udivdi3+0x5c>
 8005950:	195b      	adds	r3, r3, r5
 8005952:	f100 32ff 	add.w	r2, r0, #4294967295
 8005956:	f080 80ec 	bcs.w	8005b32 <__udivdi3+0x22a>
 800595a:	4299      	cmp	r1, r3
 800595c:	f240 80e9 	bls.w	8005b32 <__udivdi3+0x22a>
 8005960:	3802      	subs	r0, #2
 8005962:	442b      	add	r3, r5
 8005964:	1a5a      	subs	r2, r3, r1
 8005966:	b2a4      	uxth	r4, r4
 8005968:	fbb2 f3fe 	udiv	r3, r2, lr
 800596c:	fb0e 2213 	mls	r2, lr, r3, r2
 8005970:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 8005974:	fb07 f703 	mul.w	r7, r7, r3
 8005978:	4297      	cmp	r7, r2
 800597a:	d908      	bls.n	800598e <__udivdi3+0x86>
 800597c:	1952      	adds	r2, r2, r5
 800597e:	f103 31ff 	add.w	r1, r3, #4294967295
 8005982:	f080 80d8 	bcs.w	8005b36 <__udivdi3+0x22e>
 8005986:	4297      	cmp	r7, r2
 8005988:	f240 80d5 	bls.w	8005b36 <__udivdi3+0x22e>
 800598c:	3b02      	subs	r3, #2
 800598e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8005992:	2600      	movs	r6, #0
 8005994:	4631      	mov	r1, r6
 8005996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800599a:	428b      	cmp	r3, r1
 800599c:	d847      	bhi.n	8005a2e <__udivdi3+0x126>
 800599e:	fab3 f683 	clz	r6, r3
 80059a2:	2e00      	cmp	r6, #0
 80059a4:	d148      	bne.n	8005a38 <__udivdi3+0x130>
 80059a6:	428b      	cmp	r3, r1
 80059a8:	d302      	bcc.n	80059b0 <__udivdi3+0xa8>
 80059aa:	4282      	cmp	r2, r0
 80059ac:	f200 80cd 	bhi.w	8005b4a <__udivdi3+0x242>
 80059b0:	2001      	movs	r0, #1
 80059b2:	4631      	mov	r1, r6
 80059b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059b8:	b912      	cbnz	r2, 80059c0 <__udivdi3+0xb8>
 80059ba:	2501      	movs	r5, #1
 80059bc:	fbb5 f5f2 	udiv	r5, r5, r2
 80059c0:	fab5 f885 	clz	r8, r5
 80059c4:	f1b8 0f00 	cmp.w	r8, #0
 80059c8:	d177      	bne.n	8005aba <__udivdi3+0x1b2>
 80059ca:	1b4a      	subs	r2, r1, r5
 80059cc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80059d0:	b2af      	uxth	r7, r5
 80059d2:	2601      	movs	r6, #1
 80059d4:	fbb2 f0fe 	udiv	r0, r2, lr
 80059d8:	0c23      	lsrs	r3, r4, #16
 80059da:	fb0e 2110 	mls	r1, lr, r0, r2
 80059de:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80059e2:	fb07 f300 	mul.w	r3, r7, r0
 80059e6:	428b      	cmp	r3, r1
 80059e8:	d907      	bls.n	80059fa <__udivdi3+0xf2>
 80059ea:	1949      	adds	r1, r1, r5
 80059ec:	f100 32ff 	add.w	r2, r0, #4294967295
 80059f0:	d202      	bcs.n	80059f8 <__udivdi3+0xf0>
 80059f2:	428b      	cmp	r3, r1
 80059f4:	f200 80ba 	bhi.w	8005b6c <__udivdi3+0x264>
 80059f8:	4610      	mov	r0, r2
 80059fa:	1ac9      	subs	r1, r1, r3
 80059fc:	b2a4      	uxth	r4, r4
 80059fe:	fbb1 f3fe 	udiv	r3, r1, lr
 8005a02:	fb0e 1113 	mls	r1, lr, r3, r1
 8005a06:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8005a0a:	fb07 f703 	mul.w	r7, r7, r3
 8005a0e:	42a7      	cmp	r7, r4
 8005a10:	d908      	bls.n	8005a24 <__udivdi3+0x11c>
 8005a12:	1964      	adds	r4, r4, r5
 8005a14:	f103 32ff 	add.w	r2, r3, #4294967295
 8005a18:	f080 808f 	bcs.w	8005b3a <__udivdi3+0x232>
 8005a1c:	42a7      	cmp	r7, r4
 8005a1e:	f240 808c 	bls.w	8005b3a <__udivdi3+0x232>
 8005a22:	3b02      	subs	r3, #2
 8005a24:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8005a28:	4631      	mov	r1, r6
 8005a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a2e:	2600      	movs	r6, #0
 8005a30:	4630      	mov	r0, r6
 8005a32:	4631      	mov	r1, r6
 8005a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a38:	f1c6 0420 	rsb	r4, r6, #32
 8005a3c:	fa22 f504 	lsr.w	r5, r2, r4
 8005a40:	40b3      	lsls	r3, r6
 8005a42:	432b      	orrs	r3, r5
 8005a44:	fa20 fc04 	lsr.w	ip, r0, r4
 8005a48:	fa01 f706 	lsl.w	r7, r1, r6
 8005a4c:	fa21 f504 	lsr.w	r5, r1, r4
 8005a50:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005a54:	ea4c 0707 	orr.w	r7, ip, r7
 8005a58:	fbb5 f8fe 	udiv	r8, r5, lr
 8005a5c:	0c39      	lsrs	r1, r7, #16
 8005a5e:	fb0e 5518 	mls	r5, lr, r8, r5
 8005a62:	fa1f fc83 	uxth.w	ip, r3
 8005a66:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
 8005a6a:	fb0c f108 	mul.w	r1, ip, r8
 8005a6e:	42a9      	cmp	r1, r5
 8005a70:	fa02 f206 	lsl.w	r2, r2, r6
 8005a74:	d904      	bls.n	8005a80 <__udivdi3+0x178>
 8005a76:	18ed      	adds	r5, r5, r3
 8005a78:	f108 34ff 	add.w	r4, r8, #4294967295
 8005a7c:	d367      	bcc.n	8005b4e <__udivdi3+0x246>
 8005a7e:	46a0      	mov	r8, r4
 8005a80:	1a6d      	subs	r5, r5, r1
 8005a82:	b2bf      	uxth	r7, r7
 8005a84:	fbb5 f4fe 	udiv	r4, r5, lr
 8005a88:	fb0e 5514 	mls	r5, lr, r4, r5
 8005a8c:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
 8005a90:	fb0c fc04 	mul.w	ip, ip, r4
 8005a94:	458c      	cmp	ip, r1
 8005a96:	d904      	bls.n	8005aa2 <__udivdi3+0x19a>
 8005a98:	18c9      	adds	r1, r1, r3
 8005a9a:	f104 35ff 	add.w	r5, r4, #4294967295
 8005a9e:	d35c      	bcc.n	8005b5a <__udivdi3+0x252>
 8005aa0:	462c      	mov	r4, r5
 8005aa2:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8005aa6:	ebcc 0101 	rsb	r1, ip, r1
 8005aaa:	fba4 2302 	umull	r2, r3, r4, r2
 8005aae:	4299      	cmp	r1, r3
 8005ab0:	d348      	bcc.n	8005b44 <__udivdi3+0x23c>
 8005ab2:	d044      	beq.n	8005b3e <__udivdi3+0x236>
 8005ab4:	4620      	mov	r0, r4
 8005ab6:	2600      	movs	r6, #0
 8005ab8:	e76c      	b.n	8005994 <__udivdi3+0x8c>
 8005aba:	f1c8 0420 	rsb	r4, r8, #32
 8005abe:	fa01 f308 	lsl.w	r3, r1, r8
 8005ac2:	fa05 f508 	lsl.w	r5, r5, r8
 8005ac6:	fa20 f704 	lsr.w	r7, r0, r4
 8005aca:	40e1      	lsrs	r1, r4
 8005acc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8005ad0:	431f      	orrs	r7, r3
 8005ad2:	fbb1 f6fe 	udiv	r6, r1, lr
 8005ad6:	0c3a      	lsrs	r2, r7, #16
 8005ad8:	fb0e 1116 	mls	r1, lr, r6, r1
 8005adc:	fa1f fc85 	uxth.w	ip, r5
 8005ae0:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
 8005ae4:	fb0c f206 	mul.w	r2, ip, r6
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	fa00 f408 	lsl.w	r4, r0, r8
 8005aee:	d907      	bls.n	8005b00 <__udivdi3+0x1f8>
 8005af0:	195b      	adds	r3, r3, r5
 8005af2:	f106 31ff 	add.w	r1, r6, #4294967295
 8005af6:	d237      	bcs.n	8005b68 <__udivdi3+0x260>
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d935      	bls.n	8005b68 <__udivdi3+0x260>
 8005afc:	3e02      	subs	r6, #2
 8005afe:	442b      	add	r3, r5
 8005b00:	1a9b      	subs	r3, r3, r2
 8005b02:	b2bf      	uxth	r7, r7
 8005b04:	fbb3 f0fe 	udiv	r0, r3, lr
 8005b08:	fb0e 3310 	mls	r3, lr, r0, r3
 8005b0c:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8005b10:	fb0c f100 	mul.w	r1, ip, r0
 8005b14:	4299      	cmp	r1, r3
 8005b16:	d907      	bls.n	8005b28 <__udivdi3+0x220>
 8005b18:	195b      	adds	r3, r3, r5
 8005b1a:	f100 32ff 	add.w	r2, r0, #4294967295
 8005b1e:	d221      	bcs.n	8005b64 <__udivdi3+0x25c>
 8005b20:	4299      	cmp	r1, r3
 8005b22:	d91f      	bls.n	8005b64 <__udivdi3+0x25c>
 8005b24:	3802      	subs	r0, #2
 8005b26:	442b      	add	r3, r5
 8005b28:	1a5a      	subs	r2, r3, r1
 8005b2a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8005b2e:	4667      	mov	r7, ip
 8005b30:	e750      	b.n	80059d4 <__udivdi3+0xcc>
 8005b32:	4610      	mov	r0, r2
 8005b34:	e716      	b.n	8005964 <__udivdi3+0x5c>
 8005b36:	460b      	mov	r3, r1
 8005b38:	e729      	b.n	800598e <__udivdi3+0x86>
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	e772      	b.n	8005a24 <__udivdi3+0x11c>
 8005b3e:	40b0      	lsls	r0, r6
 8005b40:	4290      	cmp	r0, r2
 8005b42:	d2b7      	bcs.n	8005ab4 <__udivdi3+0x1ac>
 8005b44:	1e60      	subs	r0, r4, #1
 8005b46:	2600      	movs	r6, #0
 8005b48:	e724      	b.n	8005994 <__udivdi3+0x8c>
 8005b4a:	4630      	mov	r0, r6
 8005b4c:	e722      	b.n	8005994 <__udivdi3+0x8c>
 8005b4e:	42a9      	cmp	r1, r5
 8005b50:	d995      	bls.n	8005a7e <__udivdi3+0x176>
 8005b52:	f1a8 0802 	sub.w	r8, r8, #2
 8005b56:	441d      	add	r5, r3
 8005b58:	e792      	b.n	8005a80 <__udivdi3+0x178>
 8005b5a:	458c      	cmp	ip, r1
 8005b5c:	d9a0      	bls.n	8005aa0 <__udivdi3+0x198>
 8005b5e:	3c02      	subs	r4, #2
 8005b60:	4419      	add	r1, r3
 8005b62:	e79e      	b.n	8005aa2 <__udivdi3+0x19a>
 8005b64:	4610      	mov	r0, r2
 8005b66:	e7df      	b.n	8005b28 <__udivdi3+0x220>
 8005b68:	460e      	mov	r6, r1
 8005b6a:	e7c9      	b.n	8005b00 <__udivdi3+0x1f8>
 8005b6c:	3802      	subs	r0, #2
 8005b6e:	4429      	add	r1, r5
 8005b70:	e743      	b.n	80059fa <__udivdi3+0xf2>
 8005b72:	bf00      	nop

08005b74 <__errno>:
 8005b74:	4b01      	ldr	r3, [pc, #4]	; (8005b7c <__errno+0x8>)
 8005b76:	6818      	ldr	r0, [r3, #0]
 8005b78:	4770      	bx	lr
 8005b7a:	bf00      	nop
 8005b7c:	20000760 	.word	0x20000760

08005b80 <__libc_init_array>:
 8005b80:	b570      	push	{r4, r5, r6, lr}
 8005b82:	4e0f      	ldr	r6, [pc, #60]	; (8005bc0 <__libc_init_array+0x40>)
 8005b84:	4d0f      	ldr	r5, [pc, #60]	; (8005bc4 <__libc_init_array+0x44>)
 8005b86:	1b76      	subs	r6, r6, r5
 8005b88:	10b6      	asrs	r6, r6, #2
 8005b8a:	bf18      	it	ne
 8005b8c:	2400      	movne	r4, #0
 8005b8e:	d005      	beq.n	8005b9c <__libc_init_array+0x1c>
 8005b90:	3401      	adds	r4, #1
 8005b92:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b96:	4798      	blx	r3
 8005b98:	42a6      	cmp	r6, r4
 8005b9a:	d1f9      	bne.n	8005b90 <__libc_init_array+0x10>
 8005b9c:	4e0a      	ldr	r6, [pc, #40]	; (8005bc8 <__libc_init_array+0x48>)
 8005b9e:	4d0b      	ldr	r5, [pc, #44]	; (8005bcc <__libc_init_array+0x4c>)
 8005ba0:	1b76      	subs	r6, r6, r5
 8005ba2:	f7fb ff55 	bl	8001a50 <_init>
 8005ba6:	10b6      	asrs	r6, r6, #2
 8005ba8:	bf18      	it	ne
 8005baa:	2400      	movne	r4, #0
 8005bac:	d006      	beq.n	8005bbc <__libc_init_array+0x3c>
 8005bae:	3401      	adds	r4, #1
 8005bb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bb4:	4798      	blx	r3
 8005bb6:	42a6      	cmp	r6, r4
 8005bb8:	d1f9      	bne.n	8005bae <__libc_init_array+0x2e>
 8005bba:	bd70      	pop	{r4, r5, r6, pc}
 8005bbc:	bd70      	pop	{r4, r5, r6, pc}
 8005bbe:	bf00      	nop
 8005bc0:	20000bac 	.word	0x20000bac
 8005bc4:	20000bac 	.word	0x20000bac
 8005bc8:	20000bac 	.word	0x20000bac
 8005bcc:	20000bac 	.word	0x20000bac

08005bd0 <memcpy>:
 8005bd0:	4684      	mov	ip, r0
 8005bd2:	ea41 0300 	orr.w	r3, r1, r0
 8005bd6:	f013 0303 	ands.w	r3, r3, #3
 8005bda:	d16d      	bne.n	8005cb8 <memcpy+0xe8>
 8005bdc:	3a40      	subs	r2, #64	; 0x40
 8005bde:	d341      	bcc.n	8005c64 <memcpy+0x94>
 8005be0:	f851 3b04 	ldr.w	r3, [r1], #4
 8005be4:	f840 3b04 	str.w	r3, [r0], #4
 8005be8:	f851 3b04 	ldr.w	r3, [r1], #4
 8005bec:	f840 3b04 	str.w	r3, [r0], #4
 8005bf0:	f851 3b04 	ldr.w	r3, [r1], #4
 8005bf4:	f840 3b04 	str.w	r3, [r0], #4
 8005bf8:	f851 3b04 	ldr.w	r3, [r1], #4
 8005bfc:	f840 3b04 	str.w	r3, [r0], #4
 8005c00:	f851 3b04 	ldr.w	r3, [r1], #4
 8005c04:	f840 3b04 	str.w	r3, [r0], #4
 8005c08:	f851 3b04 	ldr.w	r3, [r1], #4
 8005c0c:	f840 3b04 	str.w	r3, [r0], #4
 8005c10:	f851 3b04 	ldr.w	r3, [r1], #4
 8005c14:	f840 3b04 	str.w	r3, [r0], #4
 8005c18:	f851 3b04 	ldr.w	r3, [r1], #4
 8005c1c:	f840 3b04 	str.w	r3, [r0], #4
 8005c20:	f851 3b04 	ldr.w	r3, [r1], #4
 8005c24:	f840 3b04 	str.w	r3, [r0], #4
 8005c28:	f851 3b04 	ldr.w	r3, [r1], #4
 8005c2c:	f840 3b04 	str.w	r3, [r0], #4
 8005c30:	f851 3b04 	ldr.w	r3, [r1], #4
 8005c34:	f840 3b04 	str.w	r3, [r0], #4
 8005c38:	f851 3b04 	ldr.w	r3, [r1], #4
 8005c3c:	f840 3b04 	str.w	r3, [r0], #4
 8005c40:	f851 3b04 	ldr.w	r3, [r1], #4
 8005c44:	f840 3b04 	str.w	r3, [r0], #4
 8005c48:	f851 3b04 	ldr.w	r3, [r1], #4
 8005c4c:	f840 3b04 	str.w	r3, [r0], #4
 8005c50:	f851 3b04 	ldr.w	r3, [r1], #4
 8005c54:	f840 3b04 	str.w	r3, [r0], #4
 8005c58:	f851 3b04 	ldr.w	r3, [r1], #4
 8005c5c:	f840 3b04 	str.w	r3, [r0], #4
 8005c60:	3a40      	subs	r2, #64	; 0x40
 8005c62:	d2bd      	bcs.n	8005be0 <memcpy+0x10>
 8005c64:	3230      	adds	r2, #48	; 0x30
 8005c66:	d311      	bcc.n	8005c8c <memcpy+0xbc>
 8005c68:	f851 3b04 	ldr.w	r3, [r1], #4
 8005c6c:	f840 3b04 	str.w	r3, [r0], #4
 8005c70:	f851 3b04 	ldr.w	r3, [r1], #4
 8005c74:	f840 3b04 	str.w	r3, [r0], #4
 8005c78:	f851 3b04 	ldr.w	r3, [r1], #4
 8005c7c:	f840 3b04 	str.w	r3, [r0], #4
 8005c80:	f851 3b04 	ldr.w	r3, [r1], #4
 8005c84:	f840 3b04 	str.w	r3, [r0], #4
 8005c88:	3a10      	subs	r2, #16
 8005c8a:	d2ed      	bcs.n	8005c68 <memcpy+0x98>
 8005c8c:	320c      	adds	r2, #12
 8005c8e:	d305      	bcc.n	8005c9c <memcpy+0xcc>
 8005c90:	f851 3b04 	ldr.w	r3, [r1], #4
 8005c94:	f840 3b04 	str.w	r3, [r0], #4
 8005c98:	3a04      	subs	r2, #4
 8005c9a:	d2f9      	bcs.n	8005c90 <memcpy+0xc0>
 8005c9c:	3204      	adds	r2, #4
 8005c9e:	d008      	beq.n	8005cb2 <memcpy+0xe2>
 8005ca0:	07d2      	lsls	r2, r2, #31
 8005ca2:	bf1c      	itt	ne
 8005ca4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8005ca8:	f800 3b01 	strbne.w	r3, [r0], #1
 8005cac:	d301      	bcc.n	8005cb2 <memcpy+0xe2>
 8005cae:	880b      	ldrh	r3, [r1, #0]
 8005cb0:	8003      	strh	r3, [r0, #0]
 8005cb2:	4660      	mov	r0, ip
 8005cb4:	4770      	bx	lr
 8005cb6:	bf00      	nop
 8005cb8:	2a08      	cmp	r2, #8
 8005cba:	d313      	bcc.n	8005ce4 <memcpy+0x114>
 8005cbc:	078b      	lsls	r3, r1, #30
 8005cbe:	d08d      	beq.n	8005bdc <memcpy+0xc>
 8005cc0:	f010 0303 	ands.w	r3, r0, #3
 8005cc4:	d08a      	beq.n	8005bdc <memcpy+0xc>
 8005cc6:	f1c3 0304 	rsb	r3, r3, #4
 8005cca:	1ad2      	subs	r2, r2, r3
 8005ccc:	07db      	lsls	r3, r3, #31
 8005cce:	bf1c      	itt	ne
 8005cd0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8005cd4:	f800 3b01 	strbne.w	r3, [r0], #1
 8005cd8:	d380      	bcc.n	8005bdc <memcpy+0xc>
 8005cda:	f831 3b02 	ldrh.w	r3, [r1], #2
 8005cde:	f820 3b02 	strh.w	r3, [r0], #2
 8005ce2:	e77b      	b.n	8005bdc <memcpy+0xc>
 8005ce4:	3a04      	subs	r2, #4
 8005ce6:	d3d9      	bcc.n	8005c9c <memcpy+0xcc>
 8005ce8:	3a01      	subs	r2, #1
 8005cea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005cee:	f800 3b01 	strb.w	r3, [r0], #1
 8005cf2:	d2f9      	bcs.n	8005ce8 <memcpy+0x118>
 8005cf4:	780b      	ldrb	r3, [r1, #0]
 8005cf6:	7003      	strb	r3, [r0, #0]
 8005cf8:	784b      	ldrb	r3, [r1, #1]
 8005cfa:	7043      	strb	r3, [r0, #1]
 8005cfc:	788b      	ldrb	r3, [r1, #2]
 8005cfe:	7083      	strb	r3, [r0, #2]
 8005d00:	4660      	mov	r0, ip
 8005d02:	4770      	bx	lr

08005d04 <memset>:
 8005d04:	b470      	push	{r4, r5, r6}
 8005d06:	0784      	lsls	r4, r0, #30
 8005d08:	d046      	beq.n	8005d98 <memset+0x94>
 8005d0a:	1e54      	subs	r4, r2, #1
 8005d0c:	2a00      	cmp	r2, #0
 8005d0e:	d041      	beq.n	8005d94 <memset+0x90>
 8005d10:	b2cd      	uxtb	r5, r1
 8005d12:	4603      	mov	r3, r0
 8005d14:	e002      	b.n	8005d1c <memset+0x18>
 8005d16:	1e62      	subs	r2, r4, #1
 8005d18:	b3e4      	cbz	r4, 8005d94 <memset+0x90>
 8005d1a:	4614      	mov	r4, r2
 8005d1c:	f803 5b01 	strb.w	r5, [r3], #1
 8005d20:	079a      	lsls	r2, r3, #30
 8005d22:	d1f8      	bne.n	8005d16 <memset+0x12>
 8005d24:	2c03      	cmp	r4, #3
 8005d26:	d92e      	bls.n	8005d86 <memset+0x82>
 8005d28:	b2cd      	uxtb	r5, r1
 8005d2a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8005d2e:	2c0f      	cmp	r4, #15
 8005d30:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8005d34:	d919      	bls.n	8005d6a <memset+0x66>
 8005d36:	f103 0210 	add.w	r2, r3, #16
 8005d3a:	4626      	mov	r6, r4
 8005d3c:	3e10      	subs	r6, #16
 8005d3e:	2e0f      	cmp	r6, #15
 8005d40:	f842 5c10 	str.w	r5, [r2, #-16]
 8005d44:	f842 5c0c 	str.w	r5, [r2, #-12]
 8005d48:	f842 5c08 	str.w	r5, [r2, #-8]
 8005d4c:	f842 5c04 	str.w	r5, [r2, #-4]
 8005d50:	f102 0210 	add.w	r2, r2, #16
 8005d54:	d8f2      	bhi.n	8005d3c <memset+0x38>
 8005d56:	f1a4 0210 	sub.w	r2, r4, #16
 8005d5a:	f022 020f 	bic.w	r2, r2, #15
 8005d5e:	f004 040f 	and.w	r4, r4, #15
 8005d62:	3210      	adds	r2, #16
 8005d64:	2c03      	cmp	r4, #3
 8005d66:	4413      	add	r3, r2
 8005d68:	d90d      	bls.n	8005d86 <memset+0x82>
 8005d6a:	461e      	mov	r6, r3
 8005d6c:	4622      	mov	r2, r4
 8005d6e:	3a04      	subs	r2, #4
 8005d70:	2a03      	cmp	r2, #3
 8005d72:	f846 5b04 	str.w	r5, [r6], #4
 8005d76:	d8fa      	bhi.n	8005d6e <memset+0x6a>
 8005d78:	1f22      	subs	r2, r4, #4
 8005d7a:	f022 0203 	bic.w	r2, r2, #3
 8005d7e:	3204      	adds	r2, #4
 8005d80:	4413      	add	r3, r2
 8005d82:	f004 0403 	and.w	r4, r4, #3
 8005d86:	b12c      	cbz	r4, 8005d94 <memset+0x90>
 8005d88:	b2c9      	uxtb	r1, r1
 8005d8a:	441c      	add	r4, r3
 8005d8c:	f803 1b01 	strb.w	r1, [r3], #1
 8005d90:	42a3      	cmp	r3, r4
 8005d92:	d1fb      	bne.n	8005d8c <memset+0x88>
 8005d94:	bc70      	pop	{r4, r5, r6}
 8005d96:	4770      	bx	lr
 8005d98:	4614      	mov	r4, r2
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	e7c2      	b.n	8005d24 <memset+0x20>
 8005d9e:	bf00      	nop

08005da0 <sprintf>:
 8005da0:	b40e      	push	{r1, r2, r3}
 8005da2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005da4:	b09c      	sub	sp, #112	; 0x70
 8005da6:	ab21      	add	r3, sp, #132	; 0x84
 8005da8:	490f      	ldr	r1, [pc, #60]	; (8005de8 <sprintf+0x48>)
 8005daa:	f853 2b04 	ldr.w	r2, [r3], #4
 8005dae:	9301      	str	r3, [sp, #4]
 8005db0:	4605      	mov	r5, r0
 8005db2:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8005db6:	6808      	ldr	r0, [r1, #0]
 8005db8:	9502      	str	r5, [sp, #8]
 8005dba:	f44f 7702 	mov.w	r7, #520	; 0x208
 8005dbe:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8005dc2:	a902      	add	r1, sp, #8
 8005dc4:	9506      	str	r5, [sp, #24]
 8005dc6:	f8ad 7014 	strh.w	r7, [sp, #20]
 8005dca:	9404      	str	r4, [sp, #16]
 8005dcc:	9407      	str	r4, [sp, #28]
 8005dce:	f8ad 6016 	strh.w	r6, [sp, #22]
 8005dd2:	f000 f80d 	bl	8005df0 <_svfprintf_r>
 8005dd6:	9b02      	ldr	r3, [sp, #8]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	701a      	strb	r2, [r3, #0]
 8005ddc:	b01c      	add	sp, #112	; 0x70
 8005dde:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8005de2:	b003      	add	sp, #12
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop
 8005de8:	20000760 	.word	0x20000760
 8005dec:	00000000 	.word	0x00000000

08005df0 <_svfprintf_r>:
 8005df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005df4:	b0c3      	sub	sp, #268	; 0x10c
 8005df6:	4689      	mov	r9, r1
 8005df8:	920a      	str	r2, [sp, #40]	; 0x28
 8005dfa:	930e      	str	r3, [sp, #56]	; 0x38
 8005dfc:	9008      	str	r0, [sp, #32]
 8005dfe:	f002 fa3f 	bl	8008280 <_localeconv_r>
 8005e02:	6803      	ldr	r3, [r0, #0]
 8005e04:	9317      	str	r3, [sp, #92]	; 0x5c
 8005e06:	4618      	mov	r0, r3
 8005e08:	f003 f820 	bl	8008e4c <strlen>
 8005e0c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8005e10:	9018      	str	r0, [sp, #96]	; 0x60
 8005e12:	061a      	lsls	r2, r3, #24
 8005e14:	d504      	bpl.n	8005e20 <_svfprintf_r+0x30>
 8005e16:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	f001 80a1 	beq.w	8006f62 <_svfprintf_r+0x1172>
 8005e20:	ed9f 7b99 	vldr	d7, [pc, #612]	; 8006088 <_svfprintf_r+0x298>
 8005e24:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8005e28:	2300      	movs	r3, #0
 8005e2a:	af32      	add	r7, sp, #200	; 0xc8
 8005e2c:	9313      	str	r3, [sp, #76]	; 0x4c
 8005e2e:	9327      	str	r3, [sp, #156]	; 0x9c
 8005e30:	9326      	str	r3, [sp, #152]	; 0x98
 8005e32:	9316      	str	r3, [sp, #88]	; 0x58
 8005e34:	9319      	str	r3, [sp, #100]	; 0x64
 8005e36:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e38:	9725      	str	r7, [sp, #148]	; 0x94
 8005e3a:	463c      	mov	r4, r7
 8005e3c:	464e      	mov	r6, r9
 8005e3e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005e40:	782b      	ldrb	r3, [r5, #0]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	f000 80a9 	beq.w	8005f9a <_svfprintf_r+0x1aa>
 8005e48:	2b25      	cmp	r3, #37	; 0x25
 8005e4a:	d102      	bne.n	8005e52 <_svfprintf_r+0x62>
 8005e4c:	e0a5      	b.n	8005f9a <_svfprintf_r+0x1aa>
 8005e4e:	2b25      	cmp	r3, #37	; 0x25
 8005e50:	d003      	beq.n	8005e5a <_svfprintf_r+0x6a>
 8005e52:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d1f9      	bne.n	8005e4e <_svfprintf_r+0x5e>
 8005e5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e5c:	1aeb      	subs	r3, r5, r3
 8005e5e:	b173      	cbz	r3, 8005e7e <_svfprintf_r+0x8e>
 8005e60:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005e62:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8005e64:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005e66:	6020      	str	r0, [r4, #0]
 8005e68:	3201      	adds	r2, #1
 8005e6a:	4419      	add	r1, r3
 8005e6c:	2a07      	cmp	r2, #7
 8005e6e:	6063      	str	r3, [r4, #4]
 8005e70:	9127      	str	r1, [sp, #156]	; 0x9c
 8005e72:	9226      	str	r2, [sp, #152]	; 0x98
 8005e74:	dc72      	bgt.n	8005f5c <_svfprintf_r+0x16c>
 8005e76:	3408      	adds	r4, #8
 8005e78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005e7a:	441a      	add	r2, r3
 8005e7c:	920b      	str	r2, [sp, #44]	; 0x2c
 8005e7e:	782b      	ldrb	r3, [r5, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	f000 87c9 	beq.w	8006e18 <_svfprintf_r+0x1028>
 8005e86:	2300      	movs	r3, #0
 8005e88:	1c69      	adds	r1, r5, #1
 8005e8a:	786d      	ldrb	r5, [r5, #1]
 8005e8c:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 8005e90:	461a      	mov	r2, r3
 8005e92:	930c      	str	r3, [sp, #48]	; 0x30
 8005e94:	9307      	str	r3, [sp, #28]
 8005e96:	f04f 3aff 	mov.w	sl, #4294967295
 8005e9a:	1c4b      	adds	r3, r1, #1
 8005e9c:	f1a5 0120 	sub.w	r1, r5, #32
 8005ea0:	2958      	cmp	r1, #88	; 0x58
 8005ea2:	f200 83e4 	bhi.w	800666e <_svfprintf_r+0x87e>
 8005ea6:	e8df f011 	tbh	[pc, r1, lsl #1]
 8005eaa:	0277      	.short	0x0277
 8005eac:	03e203e2 	.word	0x03e203e2
 8005eb0:	03e2037b 	.word	0x03e2037b
 8005eb4:	03e203e2 	.word	0x03e203e2
 8005eb8:	03e203e2 	.word	0x03e203e2
 8005ebc:	02f703e2 	.word	0x02f703e2
 8005ec0:	03e20214 	.word	0x03e20214
 8005ec4:	021801fb 	.word	0x021801fb
 8005ec8:	038203e2 	.word	0x038203e2
 8005ecc:	02c102c1 	.word	0x02c102c1
 8005ed0:	02c102c1 	.word	0x02c102c1
 8005ed4:	02c102c1 	.word	0x02c102c1
 8005ed8:	02c102c1 	.word	0x02c102c1
 8005edc:	03e202c1 	.word	0x03e202c1
 8005ee0:	03e203e2 	.word	0x03e203e2
 8005ee4:	03e203e2 	.word	0x03e203e2
 8005ee8:	03e203e2 	.word	0x03e203e2
 8005eec:	03e203e2 	.word	0x03e203e2
 8005ef0:	02d003e2 	.word	0x02d003e2
 8005ef4:	03e20391 	.word	0x03e20391
 8005ef8:	03e20391 	.word	0x03e20391
 8005efc:	03e203e2 	.word	0x03e203e2
 8005f00:	037403e2 	.word	0x037403e2
 8005f04:	03e203e2 	.word	0x03e203e2
 8005f08:	03e2030c 	.word	0x03e2030c
 8005f0c:	03e203e2 	.word	0x03e203e2
 8005f10:	03e203e2 	.word	0x03e203e2
 8005f14:	03e2032a 	.word	0x03e2032a
 8005f18:	034403e2 	.word	0x034403e2
 8005f1c:	03e203e2 	.word	0x03e203e2
 8005f20:	03e203e2 	.word	0x03e203e2
 8005f24:	03e203e2 	.word	0x03e203e2
 8005f28:	03e203e2 	.word	0x03e203e2
 8005f2c:	03e203e2 	.word	0x03e203e2
 8005f30:	0233035f 	.word	0x0233035f
 8005f34:	03910391 	.word	0x03910391
 8005f38:	03050391 	.word	0x03050391
 8005f3c:	03e20233 	.word	0x03e20233
 8005f40:	02ed03e2 	.word	0x02ed03e2
 8005f44:	028503e2 	.word	0x028503e2
 8005f48:	03cb0202 	.word	0x03cb0202
 8005f4c:	03e2027e 	.word	0x03e2027e
 8005f50:	03e20299 	.word	0x03e20299
 8005f54:	03e2007a 	.word	0x03e2007a
 8005f58:	025103e2 	.word	0x025103e2
 8005f5c:	9808      	ldr	r0, [sp, #32]
 8005f5e:	9307      	str	r3, [sp, #28]
 8005f60:	4631      	mov	r1, r6
 8005f62:	aa25      	add	r2, sp, #148	; 0x94
 8005f64:	f002 ffa0 	bl	8008ea8 <__ssprint_r>
 8005f68:	b950      	cbnz	r0, 8005f80 <_svfprintf_r+0x190>
 8005f6a:	463c      	mov	r4, r7
 8005f6c:	9b07      	ldr	r3, [sp, #28]
 8005f6e:	e783      	b.n	8005e78 <_svfprintf_r+0x88>
 8005f70:	9808      	ldr	r0, [sp, #32]
 8005f72:	4631      	mov	r1, r6
 8005f74:	aa25      	add	r2, sp, #148	; 0x94
 8005f76:	f002 ff97 	bl	8008ea8 <__ssprint_r>
 8005f7a:	2800      	cmp	r0, #0
 8005f7c:	f000 818c 	beq.w	8006298 <_svfprintf_r+0x4a8>
 8005f80:	46b1      	mov	r9, r6
 8005f82:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8005f86:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005f8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f8c:	bf18      	it	ne
 8005f8e:	f04f 33ff 	movne.w	r3, #4294967295
 8005f92:	4618      	mov	r0, r3
 8005f94:	b043      	add	sp, #268	; 0x10c
 8005f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f9a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005f9c:	e76f      	b.n	8005e7e <_svfprintf_r+0x8e>
 8005f9e:	930a      	str	r3, [sp, #40]	; 0x28
 8005fa0:	9b07      	ldr	r3, [sp, #28]
 8005fa2:	0698      	lsls	r0, r3, #26
 8005fa4:	f140 82b4 	bpl.w	8006510 <_svfprintf_r+0x720>
 8005fa8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005faa:	f103 0907 	add.w	r9, r3, #7
 8005fae:	f029 0307 	bic.w	r3, r9, #7
 8005fb2:	f103 0208 	add.w	r2, r3, #8
 8005fb6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005fba:	920e      	str	r2, [sp, #56]	; 0x38
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	f04f 0c00 	mov.w	ip, #0
 8005fc2:	f88d c077 	strb.w	ip, [sp, #119]	; 0x77
 8005fc6:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8005fca:	f1ba 0f00 	cmp.w	sl, #0
 8005fce:	db03      	blt.n	8005fd8 <_svfprintf_r+0x1e8>
 8005fd0:	9a07      	ldr	r2, [sp, #28]
 8005fd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005fd6:	9207      	str	r2, [sp, #28]
 8005fd8:	ea58 0209 	orrs.w	r2, r8, r9
 8005fdc:	f040 8357 	bne.w	800668e <_svfprintf_r+0x89e>
 8005fe0:	f1ba 0f00 	cmp.w	sl, #0
 8005fe4:	f000 845c 	beq.w	80068a0 <_svfprintf_r+0xab0>
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	f000 835a 	beq.w	80066a2 <_svfprintf_r+0x8b2>
 8005fee:	2b02      	cmp	r3, #2
 8005ff0:	f000 849a 	beq.w	8006928 <_svfprintf_r+0xb38>
 8005ff4:	4639      	mov	r1, r7
 8005ff6:	ea4f 02d8 	mov.w	r2, r8, lsr #3
 8005ffa:	ea42 7249 	orr.w	r2, r2, r9, lsl #29
 8005ffe:	ea4f 00d9 	mov.w	r0, r9, lsr #3
 8006002:	f008 0307 	and.w	r3, r8, #7
 8006006:	4681      	mov	r9, r0
 8006008:	4690      	mov	r8, r2
 800600a:	3330      	adds	r3, #48	; 0x30
 800600c:	ea58 0209 	orrs.w	r2, r8, r9
 8006010:	f801 3d01 	strb.w	r3, [r1, #-1]!
 8006014:	d1ef      	bne.n	8005ff6 <_svfprintf_r+0x206>
 8006016:	9a07      	ldr	r2, [sp, #28]
 8006018:	9110      	str	r1, [sp, #64]	; 0x40
 800601a:	07d2      	lsls	r2, r2, #31
 800601c:	f100 856e 	bmi.w	8006afc <_svfprintf_r+0xd0c>
 8006020:	1a7b      	subs	r3, r7, r1
 8006022:	930d      	str	r3, [sp, #52]	; 0x34
 8006024:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006026:	4592      	cmp	sl, r2
 8006028:	4653      	mov	r3, sl
 800602a:	bfb8      	it	lt
 800602c:	4613      	movlt	r3, r2
 800602e:	9309      	str	r3, [sp, #36]	; 0x24
 8006030:	2300      	movs	r3, #0
 8006032:	9312      	str	r3, [sp, #72]	; 0x48
 8006034:	f1bc 0f00 	cmp.w	ip, #0
 8006038:	d002      	beq.n	8006040 <_svfprintf_r+0x250>
 800603a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800603c:	3301      	adds	r3, #1
 800603e:	9309      	str	r3, [sp, #36]	; 0x24
 8006040:	9b07      	ldr	r3, [sp, #28]
 8006042:	f013 0302 	ands.w	r3, r3, #2
 8006046:	930f      	str	r3, [sp, #60]	; 0x3c
 8006048:	d002      	beq.n	8006050 <_svfprintf_r+0x260>
 800604a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800604c:	3302      	adds	r3, #2
 800604e:	9309      	str	r3, [sp, #36]	; 0x24
 8006050:	9b07      	ldr	r3, [sp, #28]
 8006052:	f013 0984 	ands.w	r9, r3, #132	; 0x84
 8006056:	f040 8317 	bne.w	8006688 <_svfprintf_r+0x898>
 800605a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800605c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800605e:	ebc2 0803 	rsb	r8, r2, r3
 8006062:	f1b8 0f00 	cmp.w	r8, #0
 8006066:	f340 830f 	ble.w	8006688 <_svfprintf_r+0x898>
 800606a:	f1b8 0f10 	cmp.w	r8, #16
 800606e:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8006070:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006072:	f8df a01c 	ldr.w	sl, [pc, #28]	; 8006090 <_svfprintf_r+0x2a0>
 8006076:	dd30      	ble.n	80060da <_svfprintf_r+0x2ea>
 8006078:	4653      	mov	r3, sl
 800607a:	f04f 0b10 	mov.w	fp, #16
 800607e:	46c2      	mov	sl, r8
 8006080:	46a8      	mov	r8, r5
 8006082:	461d      	mov	r5, r3
 8006084:	e00d      	b.n	80060a2 <_svfprintf_r+0x2b2>
 8006086:	bf00      	nop
	...
 8006090:	08009bf0 	.word	0x08009bf0
 8006094:	f1aa 0a10 	sub.w	sl, sl, #16
 8006098:	f1ba 0f10 	cmp.w	sl, #16
 800609c:	f104 0408 	add.w	r4, r4, #8
 80060a0:	dd17      	ble.n	80060d2 <_svfprintf_r+0x2e2>
 80060a2:	3201      	adds	r2, #1
 80060a4:	3110      	adds	r1, #16
 80060a6:	2a07      	cmp	r2, #7
 80060a8:	9127      	str	r1, [sp, #156]	; 0x9c
 80060aa:	9226      	str	r2, [sp, #152]	; 0x98
 80060ac:	e884 0820 	stmia.w	r4, {r5, fp}
 80060b0:	ddf0      	ble.n	8006094 <_svfprintf_r+0x2a4>
 80060b2:	9808      	ldr	r0, [sp, #32]
 80060b4:	4631      	mov	r1, r6
 80060b6:	aa25      	add	r2, sp, #148	; 0x94
 80060b8:	f002 fef6 	bl	8008ea8 <__ssprint_r>
 80060bc:	2800      	cmp	r0, #0
 80060be:	f47f af5f 	bne.w	8005f80 <_svfprintf_r+0x190>
 80060c2:	f1aa 0a10 	sub.w	sl, sl, #16
 80060c6:	f1ba 0f10 	cmp.w	sl, #16
 80060ca:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80060cc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80060ce:	463c      	mov	r4, r7
 80060d0:	dce7      	bgt.n	80060a2 <_svfprintf_r+0x2b2>
 80060d2:	462b      	mov	r3, r5
 80060d4:	4645      	mov	r5, r8
 80060d6:	46d0      	mov	r8, sl
 80060d8:	469a      	mov	sl, r3
 80060da:	3201      	adds	r2, #1
 80060dc:	eb08 0b01 	add.w	fp, r8, r1
 80060e0:	2a07      	cmp	r2, #7
 80060e2:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 80060e6:	9226      	str	r2, [sp, #152]	; 0x98
 80060e8:	f8c4 a000 	str.w	sl, [r4]
 80060ec:	f8c4 8004 	str.w	r8, [r4, #4]
 80060f0:	f300 847e 	bgt.w	80069f0 <_svfprintf_r+0xc00>
 80060f4:	f89d c077 	ldrb.w	ip, [sp, #119]	; 0x77
 80060f8:	3408      	adds	r4, #8
 80060fa:	f1bc 0f00 	cmp.w	ip, #0
 80060fe:	d00f      	beq.n	8006120 <_svfprintf_r+0x330>
 8006100:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006102:	3301      	adds	r3, #1
 8006104:	f10b 0b01 	add.w	fp, fp, #1
 8006108:	f10d 0177 	add.w	r1, sp, #119	; 0x77
 800610c:	2201      	movs	r2, #1
 800610e:	2b07      	cmp	r3, #7
 8006110:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 8006114:	9326      	str	r3, [sp, #152]	; 0x98
 8006116:	e884 0006 	stmia.w	r4, {r1, r2}
 800611a:	f300 83ea 	bgt.w	80068f2 <_svfprintf_r+0xb02>
 800611e:	3408      	adds	r4, #8
 8006120:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006122:	b173      	cbz	r3, 8006142 <_svfprintf_r+0x352>
 8006124:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006126:	3301      	adds	r3, #1
 8006128:	f10b 0b02 	add.w	fp, fp, #2
 800612c:	a91e      	add	r1, sp, #120	; 0x78
 800612e:	2202      	movs	r2, #2
 8006130:	2b07      	cmp	r3, #7
 8006132:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 8006136:	9326      	str	r3, [sp, #152]	; 0x98
 8006138:	e884 0006 	stmia.w	r4, {r1, r2}
 800613c:	f300 83cd 	bgt.w	80068da <_svfprintf_r+0xaea>
 8006140:	3408      	adds	r4, #8
 8006142:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 8006146:	f000 8315 	beq.w	8006774 <_svfprintf_r+0x984>
 800614a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800614c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800614e:	ebc2 0a03 	rsb	sl, r2, r3
 8006152:	f1ba 0f00 	cmp.w	sl, #0
 8006156:	dd3c      	ble.n	80061d2 <_svfprintf_r+0x3e2>
 8006158:	f1ba 0f10 	cmp.w	sl, #16
 800615c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800615e:	f8df 9464 	ldr.w	r9, [pc, #1124]	; 80065c4 <_svfprintf_r+0x7d4>
 8006162:	dd2b      	ble.n	80061bc <_svfprintf_r+0x3cc>
 8006164:	4649      	mov	r1, r9
 8006166:	465b      	mov	r3, fp
 8006168:	46a9      	mov	r9, r5
 800616a:	f04f 0810 	mov.w	r8, #16
 800616e:	f8dd b020 	ldr.w	fp, [sp, #32]
 8006172:	460d      	mov	r5, r1
 8006174:	e006      	b.n	8006184 <_svfprintf_r+0x394>
 8006176:	f1aa 0a10 	sub.w	sl, sl, #16
 800617a:	f1ba 0f10 	cmp.w	sl, #16
 800617e:	f104 0408 	add.w	r4, r4, #8
 8006182:	dd17      	ble.n	80061b4 <_svfprintf_r+0x3c4>
 8006184:	3201      	adds	r2, #1
 8006186:	3310      	adds	r3, #16
 8006188:	2a07      	cmp	r2, #7
 800618a:	9327      	str	r3, [sp, #156]	; 0x9c
 800618c:	9226      	str	r2, [sp, #152]	; 0x98
 800618e:	e884 0120 	stmia.w	r4, {r5, r8}
 8006192:	ddf0      	ble.n	8006176 <_svfprintf_r+0x386>
 8006194:	4658      	mov	r0, fp
 8006196:	4631      	mov	r1, r6
 8006198:	aa25      	add	r2, sp, #148	; 0x94
 800619a:	f002 fe85 	bl	8008ea8 <__ssprint_r>
 800619e:	2800      	cmp	r0, #0
 80061a0:	f47f aeee 	bne.w	8005f80 <_svfprintf_r+0x190>
 80061a4:	f1aa 0a10 	sub.w	sl, sl, #16
 80061a8:	f1ba 0f10 	cmp.w	sl, #16
 80061ac:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80061ae:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80061b0:	463c      	mov	r4, r7
 80061b2:	dce7      	bgt.n	8006184 <_svfprintf_r+0x394>
 80061b4:	469b      	mov	fp, r3
 80061b6:	462b      	mov	r3, r5
 80061b8:	464d      	mov	r5, r9
 80061ba:	4699      	mov	r9, r3
 80061bc:	3201      	adds	r2, #1
 80061be:	44d3      	add	fp, sl
 80061c0:	2a07      	cmp	r2, #7
 80061c2:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 80061c6:	9226      	str	r2, [sp, #152]	; 0x98
 80061c8:	e884 0600 	stmia.w	r4, {r9, sl}
 80061cc:	f300 8379 	bgt.w	80068c2 <_svfprintf_r+0xad2>
 80061d0:	3408      	adds	r4, #8
 80061d2:	9b07      	ldr	r3, [sp, #28]
 80061d4:	05d9      	lsls	r1, r3, #23
 80061d6:	f100 8270 	bmi.w	80066ba <_svfprintf_r+0x8ca>
 80061da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80061dc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80061de:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80061e0:	6022      	str	r2, [r4, #0]
 80061e2:	3301      	adds	r3, #1
 80061e4:	448b      	add	fp, r1
 80061e6:	2b07      	cmp	r3, #7
 80061e8:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 80061ec:	6061      	str	r1, [r4, #4]
 80061ee:	9326      	str	r3, [sp, #152]	; 0x98
 80061f0:	f300 834a 	bgt.w	8006888 <_svfprintf_r+0xa98>
 80061f4:	3408      	adds	r4, #8
 80061f6:	9b07      	ldr	r3, [sp, #28]
 80061f8:	075a      	lsls	r2, r3, #29
 80061fa:	d541      	bpl.n	8006280 <_svfprintf_r+0x490>
 80061fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80061fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006200:	1a9d      	subs	r5, r3, r2
 8006202:	2d00      	cmp	r5, #0
 8006204:	dd3c      	ble.n	8006280 <_svfprintf_r+0x490>
 8006206:	2d10      	cmp	r5, #16
 8006208:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800620a:	f8df a3bc 	ldr.w	sl, [pc, #956]	; 80065c8 <_svfprintf_r+0x7d8>
 800620e:	dd23      	ble.n	8006258 <_svfprintf_r+0x468>
 8006210:	f04f 0810 	mov.w	r8, #16
 8006214:	465a      	mov	r2, fp
 8006216:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800621a:	e004      	b.n	8006226 <_svfprintf_r+0x436>
 800621c:	3d10      	subs	r5, #16
 800621e:	2d10      	cmp	r5, #16
 8006220:	f104 0408 	add.w	r4, r4, #8
 8006224:	dd17      	ble.n	8006256 <_svfprintf_r+0x466>
 8006226:	3301      	adds	r3, #1
 8006228:	3210      	adds	r2, #16
 800622a:	2b07      	cmp	r3, #7
 800622c:	9227      	str	r2, [sp, #156]	; 0x9c
 800622e:	9326      	str	r3, [sp, #152]	; 0x98
 8006230:	f8c4 a000 	str.w	sl, [r4]
 8006234:	f8c4 8004 	str.w	r8, [r4, #4]
 8006238:	ddf0      	ble.n	800621c <_svfprintf_r+0x42c>
 800623a:	4648      	mov	r0, r9
 800623c:	4631      	mov	r1, r6
 800623e:	aa25      	add	r2, sp, #148	; 0x94
 8006240:	f002 fe32 	bl	8008ea8 <__ssprint_r>
 8006244:	2800      	cmp	r0, #0
 8006246:	f47f ae9b 	bne.w	8005f80 <_svfprintf_r+0x190>
 800624a:	3d10      	subs	r5, #16
 800624c:	2d10      	cmp	r5, #16
 800624e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8006250:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006252:	463c      	mov	r4, r7
 8006254:	dce7      	bgt.n	8006226 <_svfprintf_r+0x436>
 8006256:	4693      	mov	fp, r2
 8006258:	3301      	adds	r3, #1
 800625a:	44ab      	add	fp, r5
 800625c:	2b07      	cmp	r3, #7
 800625e:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 8006262:	9326      	str	r3, [sp, #152]	; 0x98
 8006264:	f8c4 a000 	str.w	sl, [r4]
 8006268:	6065      	str	r5, [r4, #4]
 800626a:	dd09      	ble.n	8006280 <_svfprintf_r+0x490>
 800626c:	9808      	ldr	r0, [sp, #32]
 800626e:	4631      	mov	r1, r6
 8006270:	aa25      	add	r2, sp, #148	; 0x94
 8006272:	f002 fe19 	bl	8008ea8 <__ssprint_r>
 8006276:	2800      	cmp	r0, #0
 8006278:	f47f ae82 	bne.w	8005f80 <_svfprintf_r+0x190>
 800627c:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 8006280:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006282:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006284:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006286:	428a      	cmp	r2, r1
 8006288:	bfac      	ite	ge
 800628a:	189b      	addge	r3, r3, r2
 800628c:	185b      	addlt	r3, r3, r1
 800628e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006290:	f1bb 0f00 	cmp.w	fp, #0
 8006294:	f47f ae6c 	bne.w	8005f70 <_svfprintf_r+0x180>
 8006298:	2300      	movs	r3, #0
 800629a:	9326      	str	r3, [sp, #152]	; 0x98
 800629c:	463c      	mov	r4, r7
 800629e:	e5ce      	b.n	8005e3e <_svfprintf_r+0x4e>
 80062a0:	4619      	mov	r1, r3
 80062a2:	9807      	ldr	r0, [sp, #28]
 80062a4:	781d      	ldrb	r5, [r3, #0]
 80062a6:	f040 0004 	orr.w	r0, r0, #4
 80062aa:	9007      	str	r0, [sp, #28]
 80062ac:	e5f5      	b.n	8005e9a <_svfprintf_r+0xaa>
 80062ae:	930a      	str	r3, [sp, #40]	; 0x28
 80062b0:	9b07      	ldr	r3, [sp, #28]
 80062b2:	f013 0320 	ands.w	r3, r3, #32
 80062b6:	f000 810e 	beq.w	80064d6 <_svfprintf_r+0x6e6>
 80062ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062bc:	f103 0907 	add.w	r9, r3, #7
 80062c0:	f029 0307 	bic.w	r3, r9, #7
 80062c4:	f103 0208 	add.w	r2, r3, #8
 80062c8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80062cc:	920e      	str	r2, [sp, #56]	; 0x38
 80062ce:	2300      	movs	r3, #0
 80062d0:	e675      	b.n	8005fbe <_svfprintf_r+0x1ce>
 80062d2:	781d      	ldrb	r5, [r3, #0]
 80062d4:	4619      	mov	r1, r3
 80062d6:	222b      	movs	r2, #43	; 0x2b
 80062d8:	e5df      	b.n	8005e9a <_svfprintf_r+0xaa>
 80062da:	781d      	ldrb	r5, [r3, #0]
 80062dc:	2d2a      	cmp	r5, #42	; 0x2a
 80062de:	f103 0101 	add.w	r1, r3, #1
 80062e2:	f000 87ba 	beq.w	800725a <_svfprintf_r+0x146a>
 80062e6:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 80062ea:	2809      	cmp	r0, #9
 80062ec:	460b      	mov	r3, r1
 80062ee:	f04f 0a00 	mov.w	sl, #0
 80062f2:	f63f add3 	bhi.w	8005e9c <_svfprintf_r+0xac>
 80062f6:	f813 5b01 	ldrb.w	r5, [r3], #1
 80062fa:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
 80062fe:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 8006302:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 8006306:	2809      	cmp	r0, #9
 8006308:	d9f5      	bls.n	80062f6 <_svfprintf_r+0x506>
 800630a:	ea4a 7aea 	orr.w	sl, sl, sl, asr #31
 800630e:	e5c5      	b.n	8005e9c <_svfprintf_r+0xac>
 8006310:	930a      	str	r3, [sp, #40]	; 0x28
 8006312:	9b07      	ldr	r3, [sp, #28]
 8006314:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
 8006318:	069b      	lsls	r3, r3, #26
 800631a:	f140 80a1 	bpl.w	8006460 <_svfprintf_r+0x670>
 800631e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006320:	f103 0907 	add.w	r9, r3, #7
 8006324:	f029 0907 	bic.w	r9, r9, #7
 8006328:	e9d9 2300 	ldrd	r2, r3, [r9]
 800632c:	f109 0108 	add.w	r1, r9, #8
 8006330:	910e      	str	r1, [sp, #56]	; 0x38
 8006332:	4690      	mov	r8, r2
 8006334:	4699      	mov	r9, r3
 8006336:	2a00      	cmp	r2, #0
 8006338:	f173 0300 	sbcs.w	r3, r3, #0
 800633c:	f2c0 840e 	blt.w	8006b5c <_svfprintf_r+0xd6c>
 8006340:	f89d c077 	ldrb.w	ip, [sp, #119]	; 0x77
 8006344:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8006348:	2301      	movs	r3, #1
 800634a:	e63e      	b.n	8005fca <_svfprintf_r+0x1da>
 800634c:	930a      	str	r3, [sp, #40]	; 0x28
 800634e:	4b9b      	ldr	r3, [pc, #620]	; (80065bc <_svfprintf_r+0x7cc>)
 8006350:	9316      	str	r3, [sp, #88]	; 0x58
 8006352:	9b07      	ldr	r3, [sp, #28]
 8006354:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
 8006358:	069b      	lsls	r3, r3, #26
 800635a:	f140 80f3 	bpl.w	8006544 <_svfprintf_r+0x754>
 800635e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006360:	f103 0907 	add.w	r9, r3, #7
 8006364:	f029 0307 	bic.w	r3, r9, #7
 8006368:	e9d3 8900 	ldrd	r8, r9, [r3]
 800636c:	f103 0208 	add.w	r2, r3, #8
 8006370:	920e      	str	r2, [sp, #56]	; 0x38
 8006372:	9b07      	ldr	r3, [sp, #28]
 8006374:	07d9      	lsls	r1, r3, #31
 8006376:	f140 80f5 	bpl.w	8006564 <_svfprintf_r+0x774>
 800637a:	ea58 0309 	orrs.w	r3, r8, r9
 800637e:	f000 80f1 	beq.w	8006564 <_svfprintf_r+0x774>
 8006382:	9a07      	ldr	r2, [sp, #28]
 8006384:	f88d 5079 	strb.w	r5, [sp, #121]	; 0x79
 8006388:	2330      	movs	r3, #48	; 0x30
 800638a:	f042 0202 	orr.w	r2, r2, #2
 800638e:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
 8006392:	9207      	str	r2, [sp, #28]
 8006394:	2302      	movs	r3, #2
 8006396:	e612      	b.n	8005fbe <_svfprintf_r+0x1ce>
 8006398:	781d      	ldrb	r5, [r3, #0]
 800639a:	4619      	mov	r1, r3
 800639c:	2a00      	cmp	r2, #0
 800639e:	f47f ad7c 	bne.w	8005e9a <_svfprintf_r+0xaa>
 80063a2:	2220      	movs	r2, #32
 80063a4:	e579      	b.n	8005e9a <_svfprintf_r+0xaa>
 80063a6:	9907      	ldr	r1, [sp, #28]
 80063a8:	f041 0120 	orr.w	r1, r1, #32
 80063ac:	9107      	str	r1, [sp, #28]
 80063ae:	781d      	ldrb	r5, [r3, #0]
 80063b0:	4619      	mov	r1, r3
 80063b2:	e572      	b.n	8005e9a <_svfprintf_r+0xaa>
 80063b4:	930a      	str	r3, [sp, #40]	; 0x28
 80063b6:	9b07      	ldr	r3, [sp, #28]
 80063b8:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
 80063bc:	069a      	lsls	r2, r3, #26
 80063be:	f140 84ae 	bpl.w	8006d1e <_svfprintf_r+0xf2e>
 80063c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80063c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80063c6:	ea4f 79e1 	mov.w	r9, r1, asr #31
 80063ca:	6813      	ldr	r3, [r2, #0]
 80063cc:	4608      	mov	r0, r1
 80063ce:	4688      	mov	r8, r1
 80063d0:	3204      	adds	r2, #4
 80063d2:	4649      	mov	r1, r9
 80063d4:	920e      	str	r2, [sp, #56]	; 0x38
 80063d6:	e9c3 0100 	strd	r0, r1, [r3]
 80063da:	e530      	b.n	8005e3e <_svfprintf_r+0x4e>
 80063dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80063de:	930a      	str	r3, [sp, #40]	; 0x28
 80063e0:	6813      	ldr	r3, [r2, #0]
 80063e2:	9310      	str	r3, [sp, #64]	; 0x40
 80063e4:	f04f 0b00 	mov.w	fp, #0
 80063e8:	f88d b077 	strb.w	fp, [sp, #119]	; 0x77
 80063ec:	f102 0904 	add.w	r9, r2, #4
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	f000 8648 	beq.w	8007086 <_svfprintf_r+0x1296>
 80063f6:	f1ba 0f00 	cmp.w	sl, #0
 80063fa:	9810      	ldr	r0, [sp, #64]	; 0x40
 80063fc:	f2c0 85f6 	blt.w	8006fec <_svfprintf_r+0x11fc>
 8006400:	4659      	mov	r1, fp
 8006402:	4652      	mov	r2, sl
 8006404:	f002 f9ce 	bl	80087a4 <memchr>
 8006408:	2800      	cmp	r0, #0
 800640a:	f000 8679 	beq.w	8007100 <_svfprintf_r+0x1310>
 800640e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006410:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8006414:	1ac3      	subs	r3, r0, r3
 8006416:	930d      	str	r3, [sp, #52]	; 0x34
 8006418:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800641c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006420:	9309      	str	r3, [sp, #36]	; 0x24
 8006422:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 8006426:	f89d c077 	ldrb.w	ip, [sp, #119]	; 0x77
 800642a:	e603      	b.n	8006034 <_svfprintf_r+0x244>
 800642c:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 8006430:	2100      	movs	r1, #0
 8006432:	f813 5b01 	ldrb.w	r5, [r3], #1
 8006436:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800643a:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800643e:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 8006442:	2809      	cmp	r0, #9
 8006444:	d9f5      	bls.n	8006432 <_svfprintf_r+0x642>
 8006446:	910c      	str	r1, [sp, #48]	; 0x30
 8006448:	e528      	b.n	8005e9c <_svfprintf_r+0xac>
 800644a:	930a      	str	r3, [sp, #40]	; 0x28
 800644c:	9b07      	ldr	r3, [sp, #28]
 800644e:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
 8006452:	f043 0310 	orr.w	r3, r3, #16
 8006456:	9307      	str	r3, [sp, #28]
 8006458:	9b07      	ldr	r3, [sp, #28]
 800645a:	069b      	lsls	r3, r3, #26
 800645c:	f53f af5f 	bmi.w	800631e <_svfprintf_r+0x52e>
 8006460:	9b07      	ldr	r3, [sp, #28]
 8006462:	06d8      	lsls	r0, r3, #27
 8006464:	f100 836b 	bmi.w	8006b3e <_svfprintf_r+0xd4e>
 8006468:	9b07      	ldr	r3, [sp, #28]
 800646a:	0659      	lsls	r1, r3, #25
 800646c:	f140 8367 	bpl.w	8006b3e <_svfprintf_r+0xd4e>
 8006470:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006472:	f9b1 8000 	ldrsh.w	r8, [r1]
 8006476:	3104      	adds	r1, #4
 8006478:	ea4f 79e8 	mov.w	r9, r8, asr #31
 800647c:	4642      	mov	r2, r8
 800647e:	464b      	mov	r3, r9
 8006480:	910e      	str	r1, [sp, #56]	; 0x38
 8006482:	e758      	b.n	8006336 <_svfprintf_r+0x546>
 8006484:	781d      	ldrb	r5, [r3, #0]
 8006486:	9907      	ldr	r1, [sp, #28]
 8006488:	2d6c      	cmp	r5, #108	; 0x6c
 800648a:	f000 84d1 	beq.w	8006e30 <_svfprintf_r+0x1040>
 800648e:	f041 0110 	orr.w	r1, r1, #16
 8006492:	9107      	str	r1, [sp, #28]
 8006494:	4619      	mov	r1, r3
 8006496:	e500      	b.n	8005e9a <_svfprintf_r+0xaa>
 8006498:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800649a:	6829      	ldr	r1, [r5, #0]
 800649c:	910c      	str	r1, [sp, #48]	; 0x30
 800649e:	4608      	mov	r0, r1
 80064a0:	2800      	cmp	r0, #0
 80064a2:	4629      	mov	r1, r5
 80064a4:	f101 0104 	add.w	r1, r1, #4
 80064a8:	f2c0 84c9 	blt.w	8006e3e <_svfprintf_r+0x104e>
 80064ac:	910e      	str	r1, [sp, #56]	; 0x38
 80064ae:	781d      	ldrb	r5, [r3, #0]
 80064b0:	4619      	mov	r1, r3
 80064b2:	e4f2      	b.n	8005e9a <_svfprintf_r+0xaa>
 80064b4:	9907      	ldr	r1, [sp, #28]
 80064b6:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80064ba:	9107      	str	r1, [sp, #28]
 80064bc:	781d      	ldrb	r5, [r3, #0]
 80064be:	4619      	mov	r1, r3
 80064c0:	e4eb      	b.n	8005e9a <_svfprintf_r+0xaa>
 80064c2:	930a      	str	r3, [sp, #40]	; 0x28
 80064c4:	9b07      	ldr	r3, [sp, #28]
 80064c6:	f043 0310 	orr.w	r3, r3, #16
 80064ca:	9307      	str	r3, [sp, #28]
 80064cc:	9b07      	ldr	r3, [sp, #28]
 80064ce:	f013 0320 	ands.w	r3, r3, #32
 80064d2:	f47f aef2 	bne.w	80062ba <_svfprintf_r+0x4ca>
 80064d6:	9a07      	ldr	r2, [sp, #28]
 80064d8:	f012 0210 	ands.w	r2, r2, #16
 80064dc:	f040 831c 	bne.w	8006b18 <_svfprintf_r+0xd28>
 80064e0:	9b07      	ldr	r3, [sp, #28]
 80064e2:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80064e6:	f000 8317 	beq.w	8006b18 <_svfprintf_r+0xd28>
 80064ea:	990e      	ldr	r1, [sp, #56]	; 0x38
 80064ec:	4613      	mov	r3, r2
 80064ee:	460a      	mov	r2, r1
 80064f0:	3204      	adds	r2, #4
 80064f2:	f8b1 8000 	ldrh.w	r8, [r1]
 80064f6:	920e      	str	r2, [sp, #56]	; 0x38
 80064f8:	f04f 0900 	mov.w	r9, #0
 80064fc:	e55f      	b.n	8005fbe <_svfprintf_r+0x1ce>
 80064fe:	930a      	str	r3, [sp, #40]	; 0x28
 8006500:	9b07      	ldr	r3, [sp, #28]
 8006502:	f043 0310 	orr.w	r3, r3, #16
 8006506:	9307      	str	r3, [sp, #28]
 8006508:	9b07      	ldr	r3, [sp, #28]
 800650a:	0698      	lsls	r0, r3, #26
 800650c:	f53f ad4c 	bmi.w	8005fa8 <_svfprintf_r+0x1b8>
 8006510:	9b07      	ldr	r3, [sp, #28]
 8006512:	06d9      	lsls	r1, r3, #27
 8006514:	f100 8309 	bmi.w	8006b2a <_svfprintf_r+0xd3a>
 8006518:	9b07      	ldr	r3, [sp, #28]
 800651a:	065a      	lsls	r2, r3, #25
 800651c:	f140 8305 	bpl.w	8006b2a <_svfprintf_r+0xd3a>
 8006520:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006522:	f8b2 8000 	ldrh.w	r8, [r2]
 8006526:	3204      	adds	r2, #4
 8006528:	f04f 0900 	mov.w	r9, #0
 800652c:	2301      	movs	r3, #1
 800652e:	920e      	str	r2, [sp, #56]	; 0x38
 8006530:	e545      	b.n	8005fbe <_svfprintf_r+0x1ce>
 8006532:	930a      	str	r3, [sp, #40]	; 0x28
 8006534:	4b22      	ldr	r3, [pc, #136]	; (80065c0 <_svfprintf_r+0x7d0>)
 8006536:	9316      	str	r3, [sp, #88]	; 0x58
 8006538:	9b07      	ldr	r3, [sp, #28]
 800653a:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
 800653e:	069b      	lsls	r3, r3, #26
 8006540:	f53f af0d 	bmi.w	800635e <_svfprintf_r+0x56e>
 8006544:	9b07      	ldr	r3, [sp, #28]
 8006546:	06d8      	lsls	r0, r3, #27
 8006548:	f140 83da 	bpl.w	8006d00 <_svfprintf_r+0xf10>
 800654c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800654e:	4613      	mov	r3, r2
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4698      	mov	r8, r3
 8006554:	9b07      	ldr	r3, [sp, #28]
 8006556:	3204      	adds	r2, #4
 8006558:	07d9      	lsls	r1, r3, #31
 800655a:	920e      	str	r2, [sp, #56]	; 0x38
 800655c:	f04f 0900 	mov.w	r9, #0
 8006560:	f53f af0b 	bmi.w	800637a <_svfprintf_r+0x58a>
 8006564:	2302      	movs	r3, #2
 8006566:	e52a      	b.n	8005fbe <_svfprintf_r+0x1ce>
 8006568:	990e      	ldr	r1, [sp, #56]	; 0x38
 800656a:	930a      	str	r3, [sp, #40]	; 0x28
 800656c:	680a      	ldr	r2, [r1, #0]
 800656e:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
 8006572:	2300      	movs	r3, #0
 8006574:	2201      	movs	r2, #1
 8006576:	3104      	adds	r1, #4
 8006578:	469c      	mov	ip, r3
 800657a:	9209      	str	r2, [sp, #36]	; 0x24
 800657c:	910e      	str	r1, [sp, #56]	; 0x38
 800657e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 8006582:	ab28      	add	r3, sp, #160	; 0xa0
 8006584:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
 8006588:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 800658c:	920d      	str	r2, [sp, #52]	; 0x34
 800658e:	9310      	str	r3, [sp, #64]	; 0x40
 8006590:	e556      	b.n	8006040 <_svfprintf_r+0x250>
 8006592:	9907      	ldr	r1, [sp, #28]
 8006594:	f041 0108 	orr.w	r1, r1, #8
 8006598:	9107      	str	r1, [sp, #28]
 800659a:	781d      	ldrb	r5, [r3, #0]
 800659c:	4619      	mov	r1, r3
 800659e:	e47c      	b.n	8005e9a <_svfprintf_r+0xaa>
 80065a0:	9907      	ldr	r1, [sp, #28]
 80065a2:	f041 0101 	orr.w	r1, r1, #1
 80065a6:	9107      	str	r1, [sp, #28]
 80065a8:	781d      	ldrb	r5, [r3, #0]
 80065aa:	4619      	mov	r1, r3
 80065ac:	e475      	b.n	8005e9a <_svfprintf_r+0xaa>
 80065ae:	9907      	ldr	r1, [sp, #28]
 80065b0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80065b4:	9107      	str	r1, [sp, #28]
 80065b6:	781d      	ldrb	r5, [r3, #0]
 80065b8:	4619      	mov	r1, r3
 80065ba:	e46e      	b.n	8005e9a <_svfprintf_r+0xaa>
 80065bc:	08009c24 	.word	0x08009c24
 80065c0:	08009c10 	.word	0x08009c10
 80065c4:	08009c44 	.word	0x08009c44
 80065c8:	08009bf0 	.word	0x08009bf0
 80065cc:	930a      	str	r3, [sp, #40]	; 0x28
 80065ce:	9b07      	ldr	r3, [sp, #28]
 80065d0:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
 80065d4:	f013 0f08 	tst.w	r3, #8
 80065d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065da:	46d3      	mov	fp, sl
 80065dc:	f103 0907 	add.w	r9, r3, #7
 80065e0:	f000 8384 	beq.w	8006cec <_svfprintf_r+0xefc>
 80065e4:	f029 0307 	bic.w	r3, r9, #7
 80065e8:	ed93 7b00 	vldr	d7, [r3]
 80065ec:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 80065f0:	f103 0208 	add.w	r2, r3, #8
 80065f4:	920e      	str	r2, [sp, #56]	; 0x38
 80065f6:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 80065fa:	f7fe faf9 	bl	8004bf0 <__fpclassifyd>
 80065fe:	2801      	cmp	r0, #1
 8006600:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8006604:	f040 8358 	bne.w	8006cb8 <_svfprintf_r+0xec8>
 8006608:	2200      	movs	r2, #0
 800660a:	2300      	movs	r3, #0
 800660c:	f7fe ff4e 	bl	80054ac <__aeabi_dcmplt>
 8006610:	2800      	cmp	r0, #0
 8006612:	f040 856d 	bne.w	80070f0 <_svfprintf_r+0x1300>
 8006616:	f89d c077 	ldrb.w	ip, [sp, #119]	; 0x77
 800661a:	9b07      	ldr	r3, [sp, #28]
 800661c:	4abd      	ldr	r2, [pc, #756]	; (8006914 <_svfprintf_r+0xb24>)
 800661e:	f8df e300 	ldr.w	lr, [pc, #768]	; 8006920 <_svfprintf_r+0xb30>
 8006622:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006626:	9307      	str	r3, [sp, #28]
 8006628:	4613      	mov	r3, r2
 800662a:	2103      	movs	r1, #3
 800662c:	2000      	movs	r0, #0
 800662e:	2d47      	cmp	r5, #71	; 0x47
 8006630:	bfd8      	it	le
 8006632:	4673      	movle	r3, lr
 8006634:	9109      	str	r1, [sp, #36]	; 0x24
 8006636:	9011      	str	r0, [sp, #68]	; 0x44
 8006638:	9310      	str	r3, [sp, #64]	; 0x40
 800663a:	910d      	str	r1, [sp, #52]	; 0x34
 800663c:	9012      	str	r0, [sp, #72]	; 0x48
 800663e:	e4f9      	b.n	8006034 <_svfprintf_r+0x244>
 8006640:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006642:	9907      	ldr	r1, [sp, #28]
 8006644:	930a      	str	r3, [sp, #40]	; 0x28
 8006646:	2230      	movs	r2, #48	; 0x30
 8006648:	6803      	ldr	r3, [r0, #0]
 800664a:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 800664e:	4602      	mov	r2, r0
 8006650:	2578      	movs	r5, #120	; 0x78
 8006652:	f041 0102 	orr.w	r1, r1, #2
 8006656:	3204      	adds	r2, #4
 8006658:	4698      	mov	r8, r3
 800665a:	4baf      	ldr	r3, [pc, #700]	; (8006918 <_svfprintf_r+0xb28>)
 800665c:	9316      	str	r3, [sp, #88]	; 0x58
 800665e:	9107      	str	r1, [sp, #28]
 8006660:	920e      	str	r2, [sp, #56]	; 0x38
 8006662:	f04f 0900 	mov.w	r9, #0
 8006666:	f88d 5079 	strb.w	r5, [sp, #121]	; 0x79
 800666a:	2302      	movs	r3, #2
 800666c:	e4a7      	b.n	8005fbe <_svfprintf_r+0x1ce>
 800666e:	930a      	str	r3, [sp, #40]	; 0x28
 8006670:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
 8006674:	2d00      	cmp	r5, #0
 8006676:	f000 83cf 	beq.w	8006e18 <_svfprintf_r+0x1028>
 800667a:	2300      	movs	r3, #0
 800667c:	2201      	movs	r2, #1
 800667e:	469c      	mov	ip, r3
 8006680:	9209      	str	r2, [sp, #36]	; 0x24
 8006682:	f88d 50a0 	strb.w	r5, [sp, #160]	; 0xa0
 8006686:	e77a      	b.n	800657e <_svfprintf_r+0x78e>
 8006688:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 800668c:	e535      	b.n	80060fa <_svfprintf_r+0x30a>
 800668e:	2b01      	cmp	r3, #1
 8006690:	f47f acad 	bne.w	8005fee <_svfprintf_r+0x1fe>
 8006694:	f1b9 0f00 	cmp.w	r9, #0
 8006698:	bf08      	it	eq
 800669a:	f1b8 0f0a 	cmpeq.w	r8, #10
 800669e:	f080 820d 	bcs.w	8006abc <_svfprintf_r+0xccc>
 80066a2:	f50d 7b84 	add.w	fp, sp, #264	; 0x108
 80066a6:	f108 0830 	add.w	r8, r8, #48	; 0x30
 80066aa:	f80b 8d41 	strb.w	r8, [fp, #-65]!
 80066ae:	ebcb 0307 	rsb	r3, fp, r7
 80066b2:	930d      	str	r3, [sp, #52]	; 0x34
 80066b4:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
 80066b8:	e4b4      	b.n	8006024 <_svfprintf_r+0x234>
 80066ba:	2d65      	cmp	r5, #101	; 0x65
 80066bc:	f340 80a0 	ble.w	8006800 <_svfprintf_r+0xa10>
 80066c0:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 80066c4:	2200      	movs	r2, #0
 80066c6:	2300      	movs	r3, #0
 80066c8:	f7fe fee6 	bl	8005498 <__aeabi_dcmpeq>
 80066cc:	2800      	cmp	r0, #0
 80066ce:	f000 8144 	beq.w	800695a <_svfprintf_r+0xb6a>
 80066d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80066d4:	4a91      	ldr	r2, [pc, #580]	; (800691c <_svfprintf_r+0xb2c>)
 80066d6:	6022      	str	r2, [r4, #0]
 80066d8:	3301      	adds	r3, #1
 80066da:	f10b 0b01 	add.w	fp, fp, #1
 80066de:	2201      	movs	r2, #1
 80066e0:	2b07      	cmp	r3, #7
 80066e2:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 80066e6:	9326      	str	r3, [sp, #152]	; 0x98
 80066e8:	6062      	str	r2, [r4, #4]
 80066ea:	f300 833d 	bgt.w	8006d68 <_svfprintf_r+0xf78>
 80066ee:	3408      	adds	r4, #8
 80066f0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80066f2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80066f4:	4293      	cmp	r3, r2
 80066f6:	db03      	blt.n	8006700 <_svfprintf_r+0x910>
 80066f8:	9b07      	ldr	r3, [sp, #28]
 80066fa:	07da      	lsls	r2, r3, #31
 80066fc:	f57f ad7b 	bpl.w	80061f6 <_svfprintf_r+0x406>
 8006700:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006702:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006704:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006706:	6022      	str	r2, [r4, #0]
 8006708:	3301      	adds	r3, #1
 800670a:	448b      	add	fp, r1
 800670c:	2b07      	cmp	r3, #7
 800670e:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 8006712:	6061      	str	r1, [r4, #4]
 8006714:	9326      	str	r3, [sp, #152]	; 0x98
 8006716:	f300 8399 	bgt.w	8006e4c <_svfprintf_r+0x105c>
 800671a:	3408      	adds	r4, #8
 800671c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800671e:	1e5d      	subs	r5, r3, #1
 8006720:	2d00      	cmp	r5, #0
 8006722:	f77f ad68 	ble.w	80061f6 <_svfprintf_r+0x406>
 8006726:	2d10      	cmp	r5, #16
 8006728:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800672a:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 8006924 <_svfprintf_r+0xb34>
 800672e:	f340 81b9 	ble.w	8006aa4 <_svfprintf_r+0xcb4>
 8006732:	f04f 0810 	mov.w	r8, #16
 8006736:	465a      	mov	r2, fp
 8006738:	f8dd a020 	ldr.w	sl, [sp, #32]
 800673c:	e004      	b.n	8006748 <_svfprintf_r+0x958>
 800673e:	3408      	adds	r4, #8
 8006740:	3d10      	subs	r5, #16
 8006742:	2d10      	cmp	r5, #16
 8006744:	f340 81ad 	ble.w	8006aa2 <_svfprintf_r+0xcb2>
 8006748:	3301      	adds	r3, #1
 800674a:	3210      	adds	r2, #16
 800674c:	2b07      	cmp	r3, #7
 800674e:	9227      	str	r2, [sp, #156]	; 0x9c
 8006750:	9326      	str	r3, [sp, #152]	; 0x98
 8006752:	f8c4 9000 	str.w	r9, [r4]
 8006756:	f8c4 8004 	str.w	r8, [r4, #4]
 800675a:	ddf0      	ble.n	800673e <_svfprintf_r+0x94e>
 800675c:	4650      	mov	r0, sl
 800675e:	4631      	mov	r1, r6
 8006760:	aa25      	add	r2, sp, #148	; 0x94
 8006762:	f002 fba1 	bl	8008ea8 <__ssprint_r>
 8006766:	2800      	cmp	r0, #0
 8006768:	f47f ac0a 	bne.w	8005f80 <_svfprintf_r+0x190>
 800676c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800676e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006770:	463c      	mov	r4, r7
 8006772:	e7e5      	b.n	8006740 <_svfprintf_r+0x950>
 8006774:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006776:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006778:	ebc2 0a03 	rsb	sl, r2, r3
 800677c:	f1ba 0f00 	cmp.w	sl, #0
 8006780:	f77f ace3 	ble.w	800614a <_svfprintf_r+0x35a>
 8006784:	f1ba 0f10 	cmp.w	sl, #16
 8006788:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800678a:	f8df 9198 	ldr.w	r9, [pc, #408]	; 8006924 <_svfprintf_r+0xb34>
 800678e:	dd2b      	ble.n	80067e8 <_svfprintf_r+0x9f8>
 8006790:	4649      	mov	r1, r9
 8006792:	465b      	mov	r3, fp
 8006794:	46a9      	mov	r9, r5
 8006796:	f04f 0810 	mov.w	r8, #16
 800679a:	f8dd b020 	ldr.w	fp, [sp, #32]
 800679e:	460d      	mov	r5, r1
 80067a0:	e006      	b.n	80067b0 <_svfprintf_r+0x9c0>
 80067a2:	f1aa 0a10 	sub.w	sl, sl, #16
 80067a6:	f1ba 0f10 	cmp.w	sl, #16
 80067aa:	f104 0408 	add.w	r4, r4, #8
 80067ae:	dd17      	ble.n	80067e0 <_svfprintf_r+0x9f0>
 80067b0:	3201      	adds	r2, #1
 80067b2:	3310      	adds	r3, #16
 80067b4:	2a07      	cmp	r2, #7
 80067b6:	9327      	str	r3, [sp, #156]	; 0x9c
 80067b8:	9226      	str	r2, [sp, #152]	; 0x98
 80067ba:	e884 0120 	stmia.w	r4, {r5, r8}
 80067be:	ddf0      	ble.n	80067a2 <_svfprintf_r+0x9b2>
 80067c0:	4658      	mov	r0, fp
 80067c2:	4631      	mov	r1, r6
 80067c4:	aa25      	add	r2, sp, #148	; 0x94
 80067c6:	f002 fb6f 	bl	8008ea8 <__ssprint_r>
 80067ca:	2800      	cmp	r0, #0
 80067cc:	f47f abd8 	bne.w	8005f80 <_svfprintf_r+0x190>
 80067d0:	f1aa 0a10 	sub.w	sl, sl, #16
 80067d4:	f1ba 0f10 	cmp.w	sl, #16
 80067d8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80067da:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80067dc:	463c      	mov	r4, r7
 80067de:	dce7      	bgt.n	80067b0 <_svfprintf_r+0x9c0>
 80067e0:	469b      	mov	fp, r3
 80067e2:	462b      	mov	r3, r5
 80067e4:	464d      	mov	r5, r9
 80067e6:	4699      	mov	r9, r3
 80067e8:	3201      	adds	r2, #1
 80067ea:	44d3      	add	fp, sl
 80067ec:	2a07      	cmp	r2, #7
 80067ee:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 80067f2:	9226      	str	r2, [sp, #152]	; 0x98
 80067f4:	e884 0600 	stmia.w	r4, {r9, sl}
 80067f8:	f300 8251 	bgt.w	8006c9e <_svfprintf_r+0xeae>
 80067fc:	3408      	adds	r4, #8
 80067fe:	e4a4      	b.n	800614a <_svfprintf_r+0x35a>
 8006800:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006802:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8006804:	2b01      	cmp	r3, #1
 8006806:	f340 821f 	ble.w	8006c48 <_svfprintf_r+0xe58>
 800680a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800680c:	6023      	str	r3, [r4, #0]
 800680e:	3501      	adds	r5, #1
 8006810:	f10b 0301 	add.w	r3, fp, #1
 8006814:	2201      	movs	r2, #1
 8006816:	2d07      	cmp	r5, #7
 8006818:	9327      	str	r3, [sp, #156]	; 0x9c
 800681a:	9526      	str	r5, [sp, #152]	; 0x98
 800681c:	6062      	str	r2, [r4, #4]
 800681e:	f300 8225 	bgt.w	8006c6c <_svfprintf_r+0xe7c>
 8006822:	3408      	adds	r4, #8
 8006824:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006826:	6061      	str	r1, [r4, #4]
 8006828:	3501      	adds	r5, #1
 800682a:	eb03 0b01 	add.w	fp, r3, r1
 800682e:	2d07      	cmp	r5, #7
 8006830:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006832:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 8006836:	9526      	str	r5, [sp, #152]	; 0x98
 8006838:	6023      	str	r3, [r4, #0]
 800683a:	f300 8223 	bgt.w	8006c84 <_svfprintf_r+0xe94>
 800683e:	3408      	adds	r4, #8
 8006840:	2300      	movs	r3, #0
 8006842:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8006846:	2200      	movs	r2, #0
 8006848:	f7fe fe26 	bl	8005498 <__aeabi_dcmpeq>
 800684c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800684e:	2800      	cmp	r0, #0
 8006850:	f040 80dd 	bne.w	8006a0e <_svfprintf_r+0xc1e>
 8006854:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006856:	3b01      	subs	r3, #1
 8006858:	3501      	adds	r5, #1
 800685a:	3201      	adds	r2, #1
 800685c:	449b      	add	fp, r3
 800685e:	2d07      	cmp	r5, #7
 8006860:	9526      	str	r5, [sp, #152]	; 0x98
 8006862:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 8006866:	6022      	str	r2, [r4, #0]
 8006868:	6063      	str	r3, [r4, #4]
 800686a:	f300 810d 	bgt.w	8006a88 <_svfprintf_r+0xc98>
 800686e:	3408      	adds	r4, #8
 8006870:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006872:	6062      	str	r2, [r4, #4]
 8006874:	3501      	adds	r5, #1
 8006876:	4493      	add	fp, r2
 8006878:	ab21      	add	r3, sp, #132	; 0x84
 800687a:	2d07      	cmp	r5, #7
 800687c:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 8006880:	9526      	str	r5, [sp, #152]	; 0x98
 8006882:	6023      	str	r3, [r4, #0]
 8006884:	f77f acb6 	ble.w	80061f4 <_svfprintf_r+0x404>
 8006888:	9808      	ldr	r0, [sp, #32]
 800688a:	4631      	mov	r1, r6
 800688c:	aa25      	add	r2, sp, #148	; 0x94
 800688e:	f002 fb0b 	bl	8008ea8 <__ssprint_r>
 8006892:	2800      	cmp	r0, #0
 8006894:	f47f ab74 	bne.w	8005f80 <_svfprintf_r+0x190>
 8006898:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 800689c:	463c      	mov	r4, r7
 800689e:	e4aa      	b.n	80061f6 <_svfprintf_r+0x406>
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d132      	bne.n	800690a <_svfprintf_r+0xb1a>
 80068a4:	9b07      	ldr	r3, [sp, #28]
 80068a6:	07d8      	lsls	r0, r3, #31
 80068a8:	d52f      	bpl.n	800690a <_svfprintf_r+0xb1a>
 80068aa:	f50d 7b84 	add.w	fp, sp, #264	; 0x108
 80068ae:	2330      	movs	r3, #48	; 0x30
 80068b0:	f80b 3d41 	strb.w	r3, [fp, #-65]!
 80068b4:	ebcb 0307 	rsb	r3, fp, r7
 80068b8:	930d      	str	r3, [sp, #52]	; 0x34
 80068ba:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
 80068be:	f7ff bbb1 	b.w	8006024 <_svfprintf_r+0x234>
 80068c2:	9808      	ldr	r0, [sp, #32]
 80068c4:	4631      	mov	r1, r6
 80068c6:	aa25      	add	r2, sp, #148	; 0x94
 80068c8:	f002 faee 	bl	8008ea8 <__ssprint_r>
 80068cc:	2800      	cmp	r0, #0
 80068ce:	f47f ab57 	bne.w	8005f80 <_svfprintf_r+0x190>
 80068d2:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 80068d6:	463c      	mov	r4, r7
 80068d8:	e47b      	b.n	80061d2 <_svfprintf_r+0x3e2>
 80068da:	9808      	ldr	r0, [sp, #32]
 80068dc:	4631      	mov	r1, r6
 80068de:	aa25      	add	r2, sp, #148	; 0x94
 80068e0:	f002 fae2 	bl	8008ea8 <__ssprint_r>
 80068e4:	2800      	cmp	r0, #0
 80068e6:	f47f ab4b 	bne.w	8005f80 <_svfprintf_r+0x190>
 80068ea:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 80068ee:	463c      	mov	r4, r7
 80068f0:	e427      	b.n	8006142 <_svfprintf_r+0x352>
 80068f2:	9808      	ldr	r0, [sp, #32]
 80068f4:	4631      	mov	r1, r6
 80068f6:	aa25      	add	r2, sp, #148	; 0x94
 80068f8:	f002 fad6 	bl	8008ea8 <__ssprint_r>
 80068fc:	2800      	cmp	r0, #0
 80068fe:	f47f ab3f 	bne.w	8005f80 <_svfprintf_r+0x190>
 8006902:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 8006906:	463c      	mov	r4, r7
 8006908:	e40a      	b.n	8006120 <_svfprintf_r+0x330>
 800690a:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800690e:	9710      	str	r7, [sp, #64]	; 0x40
 8006910:	f7ff bb88 	b.w	8006024 <_svfprintf_r+0x234>
 8006914:	08009c04 	.word	0x08009c04
 8006918:	08009c24 	.word	0x08009c24
 800691c:	08009c40 	.word	0x08009c40
 8006920:	08009c00 	.word	0x08009c00
 8006924:	08009c44 	.word	0x08009c44
 8006928:	9816      	ldr	r0, [sp, #88]	; 0x58
 800692a:	46bb      	mov	fp, r7
 800692c:	ea4f 1318 	mov.w	r3, r8, lsr #4
 8006930:	f008 010f 	and.w	r1, r8, #15
 8006934:	ea43 7309 	orr.w	r3, r3, r9, lsl #28
 8006938:	ea4f 1219 	mov.w	r2, r9, lsr #4
 800693c:	4698      	mov	r8, r3
 800693e:	4691      	mov	r9, r2
 8006940:	5c43      	ldrb	r3, [r0, r1]
 8006942:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 8006946:	ea58 0309 	orrs.w	r3, r8, r9
 800694a:	d1ef      	bne.n	800692c <_svfprintf_r+0xb3c>
 800694c:	465b      	mov	r3, fp
 800694e:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
 8006952:	1afb      	subs	r3, r7, r3
 8006954:	930d      	str	r3, [sp, #52]	; 0x34
 8006956:	f7ff bb65 	b.w	8006024 <_svfprintf_r+0x234>
 800695a:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 800695c:	2d00      	cmp	r5, #0
 800695e:	f340 820f 	ble.w	8006d80 <_svfprintf_r+0xf90>
 8006962:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006964:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006966:	428a      	cmp	r2, r1
 8006968:	4613      	mov	r3, r2
 800696a:	bfa8      	it	ge
 800696c:	460b      	movge	r3, r1
 800696e:	461d      	mov	r5, r3
 8006970:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006972:	2d00      	cmp	r5, #0
 8006974:	eb01 0a02 	add.w	sl, r1, r2
 8006978:	dd0b      	ble.n	8006992 <_svfprintf_r+0xba2>
 800697a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800697c:	6021      	str	r1, [r4, #0]
 800697e:	3301      	adds	r3, #1
 8006980:	44ab      	add	fp, r5
 8006982:	2b07      	cmp	r3, #7
 8006984:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 8006988:	6065      	str	r5, [r4, #4]
 800698a:	9326      	str	r3, [sp, #152]	; 0x98
 800698c:	f300 8357 	bgt.w	800703e <_svfprintf_r+0x124e>
 8006990:	3408      	adds	r4, #8
 8006992:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006994:	2d00      	cmp	r5, #0
 8006996:	bfa8      	it	ge
 8006998:	1b5b      	subge	r3, r3, r5
 800699a:	2b00      	cmp	r3, #0
 800699c:	461d      	mov	r5, r3
 800699e:	f340 80f5 	ble.w	8006b8c <_svfprintf_r+0xd9c>
 80069a2:	2d10      	cmp	r5, #16
 80069a4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80069a6:	f8df 9608 	ldr.w	r9, [pc, #1544]	; 8006fb0 <_svfprintf_r+0x11c0>
 80069aa:	f340 81d0 	ble.w	8006d4e <_svfprintf_r+0xf5e>
 80069ae:	465a      	mov	r2, fp
 80069b0:	f04f 0810 	mov.w	r8, #16
 80069b4:	f8dd b020 	ldr.w	fp, [sp, #32]
 80069b8:	e004      	b.n	80069c4 <_svfprintf_r+0xbd4>
 80069ba:	3408      	adds	r4, #8
 80069bc:	3d10      	subs	r5, #16
 80069be:	2d10      	cmp	r5, #16
 80069c0:	f340 81c4 	ble.w	8006d4c <_svfprintf_r+0xf5c>
 80069c4:	3301      	adds	r3, #1
 80069c6:	3210      	adds	r2, #16
 80069c8:	2b07      	cmp	r3, #7
 80069ca:	9227      	str	r2, [sp, #156]	; 0x9c
 80069cc:	9326      	str	r3, [sp, #152]	; 0x98
 80069ce:	f8c4 9000 	str.w	r9, [r4]
 80069d2:	f8c4 8004 	str.w	r8, [r4, #4]
 80069d6:	ddf0      	ble.n	80069ba <_svfprintf_r+0xbca>
 80069d8:	4658      	mov	r0, fp
 80069da:	4631      	mov	r1, r6
 80069dc:	aa25      	add	r2, sp, #148	; 0x94
 80069de:	f002 fa63 	bl	8008ea8 <__ssprint_r>
 80069e2:	2800      	cmp	r0, #0
 80069e4:	f47f aacc 	bne.w	8005f80 <_svfprintf_r+0x190>
 80069e8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80069ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80069ec:	463c      	mov	r4, r7
 80069ee:	e7e5      	b.n	80069bc <_svfprintf_r+0xbcc>
 80069f0:	9808      	ldr	r0, [sp, #32]
 80069f2:	4631      	mov	r1, r6
 80069f4:	aa25      	add	r2, sp, #148	; 0x94
 80069f6:	f002 fa57 	bl	8008ea8 <__ssprint_r>
 80069fa:	2800      	cmp	r0, #0
 80069fc:	f47f aac0 	bne.w	8005f80 <_svfprintf_r+0x190>
 8006a00:	f89d c077 	ldrb.w	ip, [sp, #119]	; 0x77
 8006a04:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 8006a08:	463c      	mov	r4, r7
 8006a0a:	f7ff bb76 	b.w	80060fa <_svfprintf_r+0x30a>
 8006a0e:	f103 38ff 	add.w	r8, r3, #4294967295
 8006a12:	f1b8 0f00 	cmp.w	r8, #0
 8006a16:	f77f af2b 	ble.w	8006870 <_svfprintf_r+0xa80>
 8006a1a:	f1b8 0f10 	cmp.w	r8, #16
 8006a1e:	f8df 9590 	ldr.w	r9, [pc, #1424]	; 8006fb0 <_svfprintf_r+0x11c0>
 8006a22:	dd25      	ble.n	8006a70 <_svfprintf_r+0xc80>
 8006a24:	465b      	mov	r3, fp
 8006a26:	f04f 0a10 	mov.w	sl, #16
 8006a2a:	f8dd b020 	ldr.w	fp, [sp, #32]
 8006a2e:	e006      	b.n	8006a3e <_svfprintf_r+0xc4e>
 8006a30:	f1a8 0810 	sub.w	r8, r8, #16
 8006a34:	f1b8 0f10 	cmp.w	r8, #16
 8006a38:	f104 0408 	add.w	r4, r4, #8
 8006a3c:	dd17      	ble.n	8006a6e <_svfprintf_r+0xc7e>
 8006a3e:	3501      	adds	r5, #1
 8006a40:	3310      	adds	r3, #16
 8006a42:	2d07      	cmp	r5, #7
 8006a44:	9327      	str	r3, [sp, #156]	; 0x9c
 8006a46:	9526      	str	r5, [sp, #152]	; 0x98
 8006a48:	e884 0600 	stmia.w	r4, {r9, sl}
 8006a4c:	ddf0      	ble.n	8006a30 <_svfprintf_r+0xc40>
 8006a4e:	4658      	mov	r0, fp
 8006a50:	4631      	mov	r1, r6
 8006a52:	aa25      	add	r2, sp, #148	; 0x94
 8006a54:	f002 fa28 	bl	8008ea8 <__ssprint_r>
 8006a58:	2800      	cmp	r0, #0
 8006a5a:	f47f aa91 	bne.w	8005f80 <_svfprintf_r+0x190>
 8006a5e:	f1a8 0810 	sub.w	r8, r8, #16
 8006a62:	f1b8 0f10 	cmp.w	r8, #16
 8006a66:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8006a68:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8006a6a:	463c      	mov	r4, r7
 8006a6c:	dce7      	bgt.n	8006a3e <_svfprintf_r+0xc4e>
 8006a6e:	469b      	mov	fp, r3
 8006a70:	3501      	adds	r5, #1
 8006a72:	44c3      	add	fp, r8
 8006a74:	2d07      	cmp	r5, #7
 8006a76:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 8006a7a:	9526      	str	r5, [sp, #152]	; 0x98
 8006a7c:	f8c4 9000 	str.w	r9, [r4]
 8006a80:	f8c4 8004 	str.w	r8, [r4, #4]
 8006a84:	f77f aef3 	ble.w	800686e <_svfprintf_r+0xa7e>
 8006a88:	9808      	ldr	r0, [sp, #32]
 8006a8a:	4631      	mov	r1, r6
 8006a8c:	aa25      	add	r2, sp, #148	; 0x94
 8006a8e:	f002 fa0b 	bl	8008ea8 <__ssprint_r>
 8006a92:	2800      	cmp	r0, #0
 8006a94:	f47f aa74 	bne.w	8005f80 <_svfprintf_r+0x190>
 8006a98:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 8006a9c:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8006a9e:	463c      	mov	r4, r7
 8006aa0:	e6e6      	b.n	8006870 <_svfprintf_r+0xa80>
 8006aa2:	4693      	mov	fp, r2
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	44ab      	add	fp, r5
 8006aa8:	2b07      	cmp	r3, #7
 8006aaa:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 8006aae:	9326      	str	r3, [sp, #152]	; 0x98
 8006ab0:	f8c4 9000 	str.w	r9, [r4]
 8006ab4:	6065      	str	r5, [r4, #4]
 8006ab6:	f77f ab9d 	ble.w	80061f4 <_svfprintf_r+0x404>
 8006aba:	e6e5      	b.n	8006888 <_svfprintf_r+0xa98>
 8006abc:	46bb      	mov	fp, r7
 8006abe:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8006ac2:	4640      	mov	r0, r8
 8006ac4:	4649      	mov	r1, r9
 8006ac6:	220a      	movs	r2, #10
 8006ac8:	2300      	movs	r3, #0
 8006aca:	f7fe fd87 	bl	80055dc <__aeabi_uldivmod>
 8006ace:	3230      	adds	r2, #48	; 0x30
 8006ad0:	4640      	mov	r0, r8
 8006ad2:	4649      	mov	r1, r9
 8006ad4:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 8006ad8:	2300      	movs	r3, #0
 8006ada:	220a      	movs	r2, #10
 8006adc:	f7fe fd7e 	bl	80055dc <__aeabi_uldivmod>
 8006ae0:	4680      	mov	r8, r0
 8006ae2:	4689      	mov	r9, r1
 8006ae4:	ea58 0309 	orrs.w	r3, r8, r9
 8006ae8:	d1eb      	bne.n	8006ac2 <_svfprintf_r+0xcd2>
 8006aea:	465b      	mov	r3, fp
 8006aec:	1afb      	subs	r3, r7, r3
 8006aee:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8006af2:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
 8006af6:	930d      	str	r3, [sp, #52]	; 0x34
 8006af8:	f7ff ba94 	b.w	8006024 <_svfprintf_r+0x234>
 8006afc:	2b30      	cmp	r3, #48	; 0x30
 8006afe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006b00:	f43f af27 	beq.w	8006952 <_svfprintf_r+0xb62>
 8006b04:	3b01      	subs	r3, #1
 8006b06:	461a      	mov	r2, r3
 8006b08:	9310      	str	r3, [sp, #64]	; 0x40
 8006b0a:	1aba      	subs	r2, r7, r2
 8006b0c:	2330      	movs	r3, #48	; 0x30
 8006b0e:	920d      	str	r2, [sp, #52]	; 0x34
 8006b10:	f801 3c01 	strb.w	r3, [r1, #-1]
 8006b14:	f7ff ba86 	b.w	8006024 <_svfprintf_r+0x234>
 8006b18:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006b1a:	680a      	ldr	r2, [r1, #0]
 8006b1c:	3104      	adds	r1, #4
 8006b1e:	910e      	str	r1, [sp, #56]	; 0x38
 8006b20:	4690      	mov	r8, r2
 8006b22:	f04f 0900 	mov.w	r9, #0
 8006b26:	f7ff ba4a 	b.w	8005fbe <_svfprintf_r+0x1ce>
 8006b2a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006b2c:	680a      	ldr	r2, [r1, #0]
 8006b2e:	3104      	adds	r1, #4
 8006b30:	2301      	movs	r3, #1
 8006b32:	910e      	str	r1, [sp, #56]	; 0x38
 8006b34:	4690      	mov	r8, r2
 8006b36:	f04f 0900 	mov.w	r9, #0
 8006b3a:	f7ff ba40 	b.w	8005fbe <_svfprintf_r+0x1ce>
 8006b3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b40:	6813      	ldr	r3, [r2, #0]
 8006b42:	4698      	mov	r8, r3
 8006b44:	ea4f 79e3 	mov.w	r9, r3, asr #31
 8006b48:	4613      	mov	r3, r2
 8006b4a:	3304      	adds	r3, #4
 8006b4c:	4642      	mov	r2, r8
 8006b4e:	930e      	str	r3, [sp, #56]	; 0x38
 8006b50:	2a00      	cmp	r2, #0
 8006b52:	464b      	mov	r3, r9
 8006b54:	f173 0300 	sbcs.w	r3, r3, #0
 8006b58:	f6bf abf2 	bge.w	8006340 <_svfprintf_r+0x550>
 8006b5c:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 8006b60:	f1d8 0800 	rsbs	r8, r8, #0
 8006b64:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
 8006b68:	f88d c077 	strb.w	ip, [sp, #119]	; 0x77
 8006b6c:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8006b70:	2301      	movs	r3, #1
 8006b72:	f7ff ba2a 	b.w	8005fca <_svfprintf_r+0x1da>
 8006b76:	9808      	ldr	r0, [sp, #32]
 8006b78:	4631      	mov	r1, r6
 8006b7a:	aa25      	add	r2, sp, #148	; 0x94
 8006b7c:	f002 f994 	bl	8008ea8 <__ssprint_r>
 8006b80:	2800      	cmp	r0, #0
 8006b82:	f47f a9fd 	bne.w	8005f80 <_svfprintf_r+0x190>
 8006b86:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 8006b8a:	463c      	mov	r4, r7
 8006b8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006b8e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006b90:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006b92:	440a      	add	r2, r1
 8006b94:	4690      	mov	r8, r2
 8006b96:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	db46      	blt.n	8006c2a <_svfprintf_r+0xe3a>
 8006b9c:	9a07      	ldr	r2, [sp, #28]
 8006b9e:	07d0      	lsls	r0, r2, #31
 8006ba0:	d443      	bmi.n	8006c2a <_svfprintf_r+0xe3a>
 8006ba2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006ba4:	ebc8 050a 	rsb	r5, r8, sl
 8006ba8:	1ad3      	subs	r3, r2, r3
 8006baa:	429d      	cmp	r5, r3
 8006bac:	bfa8      	it	ge
 8006bae:	461d      	movge	r5, r3
 8006bb0:	2d00      	cmp	r5, #0
 8006bb2:	dd0c      	ble.n	8006bce <_svfprintf_r+0xdde>
 8006bb4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006bb6:	f8c4 8000 	str.w	r8, [r4]
 8006bba:	3201      	adds	r2, #1
 8006bbc:	44ab      	add	fp, r5
 8006bbe:	2a07      	cmp	r2, #7
 8006bc0:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 8006bc4:	6065      	str	r5, [r4, #4]
 8006bc6:	9226      	str	r2, [sp, #152]	; 0x98
 8006bc8:	f300 8271 	bgt.w	80070ae <_svfprintf_r+0x12be>
 8006bcc:	3408      	adds	r4, #8
 8006bce:	2d00      	cmp	r5, #0
 8006bd0:	bfac      	ite	ge
 8006bd2:	1b5d      	subge	r5, r3, r5
 8006bd4:	461d      	movlt	r5, r3
 8006bd6:	2d00      	cmp	r5, #0
 8006bd8:	f77f ab0d 	ble.w	80061f6 <_svfprintf_r+0x406>
 8006bdc:	2d10      	cmp	r5, #16
 8006bde:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006be0:	f8df 93cc 	ldr.w	r9, [pc, #972]	; 8006fb0 <_svfprintf_r+0x11c0>
 8006be4:	f77f af5e 	ble.w	8006aa4 <_svfprintf_r+0xcb4>
 8006be8:	f04f 0810 	mov.w	r8, #16
 8006bec:	465a      	mov	r2, fp
 8006bee:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006bf2:	e004      	b.n	8006bfe <_svfprintf_r+0xe0e>
 8006bf4:	3408      	adds	r4, #8
 8006bf6:	3d10      	subs	r5, #16
 8006bf8:	2d10      	cmp	r5, #16
 8006bfa:	f77f af52 	ble.w	8006aa2 <_svfprintf_r+0xcb2>
 8006bfe:	3301      	adds	r3, #1
 8006c00:	3210      	adds	r2, #16
 8006c02:	2b07      	cmp	r3, #7
 8006c04:	9227      	str	r2, [sp, #156]	; 0x9c
 8006c06:	9326      	str	r3, [sp, #152]	; 0x98
 8006c08:	f8c4 9000 	str.w	r9, [r4]
 8006c0c:	f8c4 8004 	str.w	r8, [r4, #4]
 8006c10:	ddf0      	ble.n	8006bf4 <_svfprintf_r+0xe04>
 8006c12:	4650      	mov	r0, sl
 8006c14:	4631      	mov	r1, r6
 8006c16:	aa25      	add	r2, sp, #148	; 0x94
 8006c18:	f002 f946 	bl	8008ea8 <__ssprint_r>
 8006c1c:	2800      	cmp	r0, #0
 8006c1e:	f47f a9af 	bne.w	8005f80 <_svfprintf_r+0x190>
 8006c22:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8006c24:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006c26:	463c      	mov	r4, r7
 8006c28:	e7e5      	b.n	8006bf6 <_svfprintf_r+0xe06>
 8006c2a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006c2c:	9818      	ldr	r0, [sp, #96]	; 0x60
 8006c2e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8006c30:	6021      	str	r1, [r4, #0]
 8006c32:	3201      	adds	r2, #1
 8006c34:	4483      	add	fp, r0
 8006c36:	2a07      	cmp	r2, #7
 8006c38:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 8006c3c:	6060      	str	r0, [r4, #4]
 8006c3e:	9226      	str	r2, [sp, #152]	; 0x98
 8006c40:	f300 8209 	bgt.w	8007056 <_svfprintf_r+0x1266>
 8006c44:	3408      	adds	r4, #8
 8006c46:	e7ac      	b.n	8006ba2 <_svfprintf_r+0xdb2>
 8006c48:	9b07      	ldr	r3, [sp, #28]
 8006c4a:	07d9      	lsls	r1, r3, #31
 8006c4c:	f53f addd 	bmi.w	800680a <_svfprintf_r+0xa1a>
 8006c50:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006c52:	6023      	str	r3, [r4, #0]
 8006c54:	3501      	adds	r5, #1
 8006c56:	f10b 0b01 	add.w	fp, fp, #1
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	2d07      	cmp	r5, #7
 8006c5e:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 8006c62:	9526      	str	r5, [sp, #152]	; 0x98
 8006c64:	6063      	str	r3, [r4, #4]
 8006c66:	f77f ae02 	ble.w	800686e <_svfprintf_r+0xa7e>
 8006c6a:	e70d      	b.n	8006a88 <_svfprintf_r+0xc98>
 8006c6c:	9808      	ldr	r0, [sp, #32]
 8006c6e:	4631      	mov	r1, r6
 8006c70:	aa25      	add	r2, sp, #148	; 0x94
 8006c72:	f002 f919 	bl	8008ea8 <__ssprint_r>
 8006c76:	2800      	cmp	r0, #0
 8006c78:	f47f a982 	bne.w	8005f80 <_svfprintf_r+0x190>
 8006c7c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8006c7e:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8006c80:	463c      	mov	r4, r7
 8006c82:	e5cf      	b.n	8006824 <_svfprintf_r+0xa34>
 8006c84:	9808      	ldr	r0, [sp, #32]
 8006c86:	4631      	mov	r1, r6
 8006c88:	aa25      	add	r2, sp, #148	; 0x94
 8006c8a:	f002 f90d 	bl	8008ea8 <__ssprint_r>
 8006c8e:	2800      	cmp	r0, #0
 8006c90:	f47f a976 	bne.w	8005f80 <_svfprintf_r+0x190>
 8006c94:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 8006c98:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8006c9a:	463c      	mov	r4, r7
 8006c9c:	e5d0      	b.n	8006840 <_svfprintf_r+0xa50>
 8006c9e:	9808      	ldr	r0, [sp, #32]
 8006ca0:	4631      	mov	r1, r6
 8006ca2:	aa25      	add	r2, sp, #148	; 0x94
 8006ca4:	f002 f900 	bl	8008ea8 <__ssprint_r>
 8006ca8:	2800      	cmp	r0, #0
 8006caa:	f47f a969 	bne.w	8005f80 <_svfprintf_r+0x190>
 8006cae:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 8006cb2:	463c      	mov	r4, r7
 8006cb4:	f7ff ba49 	b.w	800614a <_svfprintf_r+0x35a>
 8006cb8:	f7fd ff9a 	bl	8004bf0 <__fpclassifyd>
 8006cbc:	2800      	cmp	r0, #0
 8006cbe:	f040 80d1 	bne.w	8006e64 <_svfprintf_r+0x1074>
 8006cc2:	4686      	mov	lr, r0
 8006cc4:	4ab7      	ldr	r2, [pc, #732]	; (8006fa4 <_svfprintf_r+0x11b4>)
 8006cc6:	4bb8      	ldr	r3, [pc, #736]	; (8006fa8 <_svfprintf_r+0x11b8>)
 8006cc8:	9011      	str	r0, [sp, #68]	; 0x44
 8006cca:	9807      	ldr	r0, [sp, #28]
 8006ccc:	f89d c077 	ldrb.w	ip, [sp, #119]	; 0x77
 8006cd0:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
 8006cd4:	2103      	movs	r1, #3
 8006cd6:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8006cda:	2d47      	cmp	r5, #71	; 0x47
 8006cdc:	bfd8      	it	le
 8006cde:	461a      	movle	r2, r3
 8006ce0:	9109      	str	r1, [sp, #36]	; 0x24
 8006ce2:	9007      	str	r0, [sp, #28]
 8006ce4:	9210      	str	r2, [sp, #64]	; 0x40
 8006ce6:	910d      	str	r1, [sp, #52]	; 0x34
 8006ce8:	f7ff b9a4 	b.w	8006034 <_svfprintf_r+0x244>
 8006cec:	f029 0907 	bic.w	r9, r9, #7
 8006cf0:	ed99 7b00 	vldr	d7, [r9]
 8006cf4:	f109 0308 	add.w	r3, r9, #8
 8006cf8:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8006cfc:	930e      	str	r3, [sp, #56]	; 0x38
 8006cfe:	e47a      	b.n	80065f6 <_svfprintf_r+0x806>
 8006d00:	9b07      	ldr	r3, [sp, #28]
 8006d02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d04:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006d08:	4613      	mov	r3, r2
 8006d0a:	f43f ac21 	beq.w	8006550 <_svfprintf_r+0x760>
 8006d0e:	3304      	adds	r3, #4
 8006d10:	f8b2 8000 	ldrh.w	r8, [r2]
 8006d14:	930e      	str	r3, [sp, #56]	; 0x38
 8006d16:	f04f 0900 	mov.w	r9, #0
 8006d1a:	f7ff bb2a 	b.w	8006372 <_svfprintf_r+0x582>
 8006d1e:	9b07      	ldr	r3, [sp, #28]
 8006d20:	06db      	lsls	r3, r3, #27
 8006d22:	d40b      	bmi.n	8006d3c <_svfprintf_r+0xf4c>
 8006d24:	9b07      	ldr	r3, [sp, #28]
 8006d26:	065d      	lsls	r5, r3, #25
 8006d28:	d508      	bpl.n	8006d3c <_svfprintf_r+0xf4c>
 8006d2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d2c:	6813      	ldr	r3, [r2, #0]
 8006d2e:	3204      	adds	r2, #4
 8006d30:	920e      	str	r2, [sp, #56]	; 0x38
 8006d32:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8006d36:	801a      	strh	r2, [r3, #0]
 8006d38:	f7ff b881 	b.w	8005e3e <_svfprintf_r+0x4e>
 8006d3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d3e:	6813      	ldr	r3, [r2, #0]
 8006d40:	3204      	adds	r2, #4
 8006d42:	920e      	str	r2, [sp, #56]	; 0x38
 8006d44:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006d46:	601a      	str	r2, [r3, #0]
 8006d48:	f7ff b879 	b.w	8005e3e <_svfprintf_r+0x4e>
 8006d4c:	4693      	mov	fp, r2
 8006d4e:	3301      	adds	r3, #1
 8006d50:	44ab      	add	fp, r5
 8006d52:	2b07      	cmp	r3, #7
 8006d54:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 8006d58:	9326      	str	r3, [sp, #152]	; 0x98
 8006d5a:	f8c4 9000 	str.w	r9, [r4]
 8006d5e:	6065      	str	r5, [r4, #4]
 8006d60:	f73f af09 	bgt.w	8006b76 <_svfprintf_r+0xd86>
 8006d64:	3408      	adds	r4, #8
 8006d66:	e711      	b.n	8006b8c <_svfprintf_r+0xd9c>
 8006d68:	9808      	ldr	r0, [sp, #32]
 8006d6a:	4631      	mov	r1, r6
 8006d6c:	aa25      	add	r2, sp, #148	; 0x94
 8006d6e:	f002 f89b 	bl	8008ea8 <__ssprint_r>
 8006d72:	2800      	cmp	r0, #0
 8006d74:	f47f a904 	bne.w	8005f80 <_svfprintf_r+0x190>
 8006d78:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 8006d7c:	463c      	mov	r4, r7
 8006d7e:	e4b7      	b.n	80066f0 <_svfprintf_r+0x900>
 8006d80:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006d82:	4a8a      	ldr	r2, [pc, #552]	; (8006fac <_svfprintf_r+0x11bc>)
 8006d84:	6022      	str	r2, [r4, #0]
 8006d86:	3301      	adds	r3, #1
 8006d88:	f10b 0b01 	add.w	fp, fp, #1
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	2b07      	cmp	r3, #7
 8006d90:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 8006d94:	9326      	str	r3, [sp, #152]	; 0x98
 8006d96:	6062      	str	r2, [r4, #4]
 8006d98:	f300 80f3 	bgt.w	8006f82 <_svfprintf_r+0x1192>
 8006d9c:	3408      	adds	r4, #8
 8006d9e:	b92d      	cbnz	r5, 8006dac <_svfprintf_r+0xfbc>
 8006da0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006da2:	b91b      	cbnz	r3, 8006dac <_svfprintf_r+0xfbc>
 8006da4:	9b07      	ldr	r3, [sp, #28]
 8006da6:	07db      	lsls	r3, r3, #31
 8006da8:	f57f aa25 	bpl.w	80061f6 <_svfprintf_r+0x406>
 8006dac:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006dae:	9818      	ldr	r0, [sp, #96]	; 0x60
 8006db0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006db2:	6022      	str	r2, [r4, #0]
 8006db4:	3301      	adds	r3, #1
 8006db6:	eb0b 0100 	add.w	r1, fp, r0
 8006dba:	2b07      	cmp	r3, #7
 8006dbc:	9127      	str	r1, [sp, #156]	; 0x9c
 8006dbe:	6060      	str	r0, [r4, #4]
 8006dc0:	9326      	str	r3, [sp, #152]	; 0x98
 8006dc2:	f300 81f3 	bgt.w	80071ac <_svfprintf_r+0x13bc>
 8006dc6:	f104 0208 	add.w	r2, r4, #8
 8006dca:	426d      	negs	r5, r5
 8006dcc:	2d00      	cmp	r5, #0
 8006dce:	f340 80fc 	ble.w	8006fca <_svfprintf_r+0x11da>
 8006dd2:	2d10      	cmp	r5, #16
 8006dd4:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 8006fb0 <_svfprintf_r+0x11c0>
 8006dd8:	f340 814a 	ble.w	8007070 <_svfprintf_r+0x1280>
 8006ddc:	2410      	movs	r4, #16
 8006dde:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006de2:	e004      	b.n	8006dee <_svfprintf_r+0xffe>
 8006de4:	3208      	adds	r2, #8
 8006de6:	3d10      	subs	r5, #16
 8006de8:	2d10      	cmp	r5, #16
 8006dea:	f340 8141 	ble.w	8007070 <_svfprintf_r+0x1280>
 8006dee:	3301      	adds	r3, #1
 8006df0:	3110      	adds	r1, #16
 8006df2:	2b07      	cmp	r3, #7
 8006df4:	9127      	str	r1, [sp, #156]	; 0x9c
 8006df6:	9326      	str	r3, [sp, #152]	; 0x98
 8006df8:	f8c2 9000 	str.w	r9, [r2]
 8006dfc:	6054      	str	r4, [r2, #4]
 8006dfe:	ddf1      	ble.n	8006de4 <_svfprintf_r+0xff4>
 8006e00:	4640      	mov	r0, r8
 8006e02:	4631      	mov	r1, r6
 8006e04:	aa25      	add	r2, sp, #148	; 0x94
 8006e06:	f002 f84f 	bl	8008ea8 <__ssprint_r>
 8006e0a:	2800      	cmp	r0, #0
 8006e0c:	f47f a8b8 	bne.w	8005f80 <_svfprintf_r+0x190>
 8006e10:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8006e12:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006e14:	463a      	mov	r2, r7
 8006e16:	e7e6      	b.n	8006de6 <_svfprintf_r+0xff6>
 8006e18:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8006e1a:	46b1      	mov	r9, r6
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	f43f a8b0 	beq.w	8005f82 <_svfprintf_r+0x192>
 8006e22:	9808      	ldr	r0, [sp, #32]
 8006e24:	4631      	mov	r1, r6
 8006e26:	aa25      	add	r2, sp, #148	; 0x94
 8006e28:	f002 f83e 	bl	8008ea8 <__ssprint_r>
 8006e2c:	f7ff b8a9 	b.w	8005f82 <_svfprintf_r+0x192>
 8006e30:	f041 0120 	orr.w	r1, r1, #32
 8006e34:	9107      	str	r1, [sp, #28]
 8006e36:	785d      	ldrb	r5, [r3, #1]
 8006e38:	1c59      	adds	r1, r3, #1
 8006e3a:	f7ff b82e 	b.w	8005e9a <_svfprintf_r+0xaa>
 8006e3e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006e40:	910e      	str	r1, [sp, #56]	; 0x38
 8006e42:	4240      	negs	r0, r0
 8006e44:	900c      	str	r0, [sp, #48]	; 0x30
 8006e46:	4619      	mov	r1, r3
 8006e48:	f7ff ba2b 	b.w	80062a2 <_svfprintf_r+0x4b2>
 8006e4c:	9808      	ldr	r0, [sp, #32]
 8006e4e:	4631      	mov	r1, r6
 8006e50:	aa25      	add	r2, sp, #148	; 0x94
 8006e52:	f002 f829 	bl	8008ea8 <__ssprint_r>
 8006e56:	2800      	cmp	r0, #0
 8006e58:	f47f a892 	bne.w	8005f80 <_svfprintf_r+0x190>
 8006e5c:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 8006e60:	463c      	mov	r4, r7
 8006e62:	e45b      	b.n	800671c <_svfprintf_r+0x92c>
 8006e64:	f025 0320 	bic.w	r3, r5, #32
 8006e68:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006e6c:	9309      	str	r3, [sp, #36]	; 0x24
 8006e6e:	f000 8095 	beq.w	8006f9c <_svfprintf_r+0x11ac>
 8006e72:	2b47      	cmp	r3, #71	; 0x47
 8006e74:	d105      	bne.n	8006e82 <_svfprintf_r+0x1092>
 8006e76:	f1ba 0f00 	cmp.w	sl, #0
 8006e7a:	bf14      	ite	ne
 8006e7c:	46d3      	movne	fp, sl
 8006e7e:	f04f 0b01 	moveq.w	fp, #1
 8006e82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e84:	9a07      	ldr	r2, [sp, #28]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e8c:	920f      	str	r2, [sp, #60]	; 0x3c
 8006e8e:	f2c0 81a8 	blt.w	80071e2 <_svfprintf_r+0x13f2>
 8006e92:	ed9d 7b14 	vldr	d7, [sp, #80]	; 0x50
 8006e96:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
 8006e9a:	f04f 0a00 	mov.w	sl, #0
 8006e9e:	2d66      	cmp	r5, #102	; 0x66
 8006ea0:	f000 80ae 	beq.w	8007000 <_svfprintf_r+0x1210>
 8006ea4:	2d46      	cmp	r5, #70	; 0x46
 8006ea6:	f000 80ab 	beq.w	8007000 <_svfprintf_r+0x1210>
 8006eaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eac:	2b45      	cmp	r3, #69	; 0x45
 8006eae:	bf0c      	ite	eq
 8006eb0:	f10b 0901 	addeq.w	r9, fp, #1
 8006eb4:	46d9      	movne	r9, fp
 8006eb6:	2002      	movs	r0, #2
 8006eb8:	a91f      	add	r1, sp, #124	; 0x7c
 8006eba:	aa20      	add	r2, sp, #128	; 0x80
 8006ebc:	ab23      	add	r3, sp, #140	; 0x8c
 8006ebe:	e88d 0201 	stmia.w	sp, {r0, r9}
 8006ec2:	9203      	str	r2, [sp, #12]
 8006ec4:	9304      	str	r3, [sp, #16]
 8006ec6:	9102      	str	r1, [sp, #8]
 8006ec8:	9808      	ldr	r0, [sp, #32]
 8006eca:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8006ece:	f000 fa8f 	bl	80073f0 <_dtoa_r>
 8006ed2:	2d67      	cmp	r5, #103	; 0x67
 8006ed4:	9010      	str	r0, [sp, #64]	; 0x40
 8006ed6:	d002      	beq.n	8006ede <_svfprintf_r+0x10ee>
 8006ed8:	2d47      	cmp	r5, #71	; 0x47
 8006eda:	f040 80a1 	bne.w	8007020 <_svfprintf_r+0x1230>
 8006ede:	9b07      	ldr	r3, [sp, #28]
 8006ee0:	07db      	lsls	r3, r3, #31
 8006ee2:	f140 8194 	bpl.w	800720e <_svfprintf_r+0x141e>
 8006ee6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006ee8:	eb03 0809 	add.w	r8, r3, r9
 8006eec:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	f7fe fad0 	bl	8005498 <__aeabi_dcmpeq>
 8006ef8:	2800      	cmp	r0, #0
 8006efa:	f040 80ff 	bne.w	80070fc <_svfprintf_r+0x130c>
 8006efe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006f00:	4598      	cmp	r8, r3
 8006f02:	d906      	bls.n	8006f12 <_svfprintf_r+0x1122>
 8006f04:	2130      	movs	r1, #48	; 0x30
 8006f06:	1c5a      	adds	r2, r3, #1
 8006f08:	9223      	str	r2, [sp, #140]	; 0x8c
 8006f0a:	7019      	strb	r1, [r3, #0]
 8006f0c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006f0e:	4598      	cmp	r8, r3
 8006f10:	d8f9      	bhi.n	8006f06 <_svfprintf_r+0x1116>
 8006f12:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006f14:	1a9b      	subs	r3, r3, r2
 8006f16:	9313      	str	r3, [sp, #76]	; 0x4c
 8006f18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f1a:	2b47      	cmp	r3, #71	; 0x47
 8006f1c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006f1e:	f000 80e0 	beq.w	80070e2 <_svfprintf_r+0x12f2>
 8006f22:	2d65      	cmp	r5, #101	; 0x65
 8006f24:	f340 80fa 	ble.w	800711c <_svfprintf_r+0x132c>
 8006f28:	2d66      	cmp	r5, #102	; 0x66
 8006f2a:	9312      	str	r3, [sp, #72]	; 0x48
 8006f2c:	f000 8162 	beq.w	80071f4 <_svfprintf_r+0x1404>
 8006f30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006f32:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006f34:	4293      	cmp	r3, r2
 8006f36:	f300 8146 	bgt.w	80071c6 <_svfprintf_r+0x13d6>
 8006f3a:	9b07      	ldr	r3, [sp, #28]
 8006f3c:	07d9      	lsls	r1, r3, #31
 8006f3e:	f100 8168 	bmi.w	8007212 <_svfprintf_r+0x1422>
 8006f42:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006f46:	920d      	str	r2, [sp, #52]	; 0x34
 8006f48:	f1ba 0f00 	cmp.w	sl, #0
 8006f4c:	f040 80be 	bne.w	80070cc <_svfprintf_r+0x12dc>
 8006f50:	9309      	str	r3, [sp, #36]	; 0x24
 8006f52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006f54:	9307      	str	r3, [sp, #28]
 8006f56:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8006f5a:	f89d c077 	ldrb.w	ip, [sp, #119]	; 0x77
 8006f5e:	f7ff b869 	b.w	8006034 <_svfprintf_r+0x244>
 8006f62:	9808      	ldr	r0, [sp, #32]
 8006f64:	2140      	movs	r1, #64	; 0x40
 8006f66:	f001 f98f 	bl	8008288 <_malloc_r>
 8006f6a:	f8c9 0000 	str.w	r0, [r9]
 8006f6e:	f8c9 0010 	str.w	r0, [r9, #16]
 8006f72:	2800      	cmp	r0, #0
 8006f74:	f000 8199 	beq.w	80072aa <_svfprintf_r+0x14ba>
 8006f78:	2340      	movs	r3, #64	; 0x40
 8006f7a:	f8c9 3014 	str.w	r3, [r9, #20]
 8006f7e:	f7fe bf4f 	b.w	8005e20 <_svfprintf_r+0x30>
 8006f82:	9808      	ldr	r0, [sp, #32]
 8006f84:	4631      	mov	r1, r6
 8006f86:	aa25      	add	r2, sp, #148	; 0x94
 8006f88:	f001 ff8e 	bl	8008ea8 <__ssprint_r>
 8006f8c:	2800      	cmp	r0, #0
 8006f8e:	f47e aff7 	bne.w	8005f80 <_svfprintf_r+0x190>
 8006f92:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8006f94:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 8006f98:	463c      	mov	r4, r7
 8006f9a:	e700      	b.n	8006d9e <_svfprintf_r+0xfae>
 8006f9c:	f04f 0b06 	mov.w	fp, #6
 8006fa0:	e76f      	b.n	8006e82 <_svfprintf_r+0x1092>
 8006fa2:	bf00      	nop
 8006fa4:	08009c0c 	.word	0x08009c0c
 8006fa8:	08009c08 	.word	0x08009c08
 8006fac:	08009c40 	.word	0x08009c40
 8006fb0:	08009c44 	.word	0x08009c44
 8006fb4:	9808      	ldr	r0, [sp, #32]
 8006fb6:	4631      	mov	r1, r6
 8006fb8:	aa25      	add	r2, sp, #148	; 0x94
 8006fba:	f001 ff75 	bl	8008ea8 <__ssprint_r>
 8006fbe:	2800      	cmp	r0, #0
 8006fc0:	f47e afde 	bne.w	8005f80 <_svfprintf_r+0x190>
 8006fc4:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8006fc6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006fc8:	463a      	mov	r2, r7
 8006fca:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8006fcc:	6054      	str	r4, [r2, #4]
 8006fce:	3301      	adds	r3, #1
 8006fd0:	eb01 0b04 	add.w	fp, r1, r4
 8006fd4:	2b07      	cmp	r3, #7
 8006fd6:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006fd8:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 8006fdc:	9326      	str	r3, [sp, #152]	; 0x98
 8006fde:	6011      	str	r1, [r2, #0]
 8006fe0:	f73f ac52 	bgt.w	8006888 <_svfprintf_r+0xa98>
 8006fe4:	f102 0408 	add.w	r4, r2, #8
 8006fe8:	f7ff b905 	b.w	80061f6 <_svfprintf_r+0x406>
 8006fec:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8006ff0:	f001 ff2c 	bl	8008e4c <strlen>
 8006ff4:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006ff8:	900d      	str	r0, [sp, #52]	; 0x34
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	f7ff ba0e 	b.w	800641c <_svfprintf_r+0x62c>
 8007000:	2003      	movs	r0, #3
 8007002:	a91f      	add	r1, sp, #124	; 0x7c
 8007004:	aa20      	add	r2, sp, #128	; 0x80
 8007006:	ab23      	add	r3, sp, #140	; 0x8c
 8007008:	e88d 0801 	stmia.w	sp, {r0, fp}
 800700c:	9203      	str	r2, [sp, #12]
 800700e:	9304      	str	r3, [sp, #16]
 8007010:	9102      	str	r1, [sp, #8]
 8007012:	9808      	ldr	r0, [sp, #32]
 8007014:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8007018:	f000 f9ea 	bl	80073f0 <_dtoa_r>
 800701c:	46d9      	mov	r9, fp
 800701e:	9010      	str	r0, [sp, #64]	; 0x40
 8007020:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007022:	eb03 0809 	add.w	r8, r3, r9
 8007026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007028:	2b46      	cmp	r3, #70	; 0x46
 800702a:	f47f af5f 	bne.w	8006eec <_svfprintf_r+0x10fc>
 800702e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	2b30      	cmp	r3, #48	; 0x30
 8007034:	f000 8103 	beq.w	800723e <_svfprintf_r+0x144e>
 8007038:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800703a:	4498      	add	r8, r3
 800703c:	e756      	b.n	8006eec <_svfprintf_r+0x10fc>
 800703e:	9808      	ldr	r0, [sp, #32]
 8007040:	4631      	mov	r1, r6
 8007042:	aa25      	add	r2, sp, #148	; 0x94
 8007044:	f001 ff30 	bl	8008ea8 <__ssprint_r>
 8007048:	2800      	cmp	r0, #0
 800704a:	f47e af99 	bne.w	8005f80 <_svfprintf_r+0x190>
 800704e:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 8007052:	463c      	mov	r4, r7
 8007054:	e49d      	b.n	8006992 <_svfprintf_r+0xba2>
 8007056:	9808      	ldr	r0, [sp, #32]
 8007058:	4631      	mov	r1, r6
 800705a:	aa25      	add	r2, sp, #148	; 0x94
 800705c:	f001 ff24 	bl	8008ea8 <__ssprint_r>
 8007060:	2800      	cmp	r0, #0
 8007062:	f47e af8d 	bne.w	8005f80 <_svfprintf_r+0x190>
 8007066:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007068:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 800706c:	463c      	mov	r4, r7
 800706e:	e598      	b.n	8006ba2 <_svfprintf_r+0xdb2>
 8007070:	3301      	adds	r3, #1
 8007072:	4429      	add	r1, r5
 8007074:	2b07      	cmp	r3, #7
 8007076:	9127      	str	r1, [sp, #156]	; 0x9c
 8007078:	9326      	str	r3, [sp, #152]	; 0x98
 800707a:	f8c2 9000 	str.w	r9, [r2]
 800707e:	6055      	str	r5, [r2, #4]
 8007080:	dc98      	bgt.n	8006fb4 <_svfprintf_r+0x11c4>
 8007082:	3208      	adds	r2, #8
 8007084:	e7a1      	b.n	8006fca <_svfprintf_r+0x11da>
 8007086:	4653      	mov	r3, sl
 8007088:	2b06      	cmp	r3, #6
 800708a:	bf28      	it	cs
 800708c:	2306      	movcs	r3, #6
 800708e:	930d      	str	r3, [sp, #52]	; 0x34
 8007090:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007094:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 8007098:	9309      	str	r3, [sp, #36]	; 0x24
 800709a:	4b87      	ldr	r3, [pc, #540]	; (80072b8 <_svfprintf_r+0x14c8>)
 800709c:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80070a0:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
 80070a4:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 80070a8:	9310      	str	r3, [sp, #64]	; 0x40
 80070aa:	f7fe bfc3 	b.w	8006034 <_svfprintf_r+0x244>
 80070ae:	9808      	ldr	r0, [sp, #32]
 80070b0:	4631      	mov	r1, r6
 80070b2:	aa25      	add	r2, sp, #148	; 0x94
 80070b4:	f001 fef8 	bl	8008ea8 <__ssprint_r>
 80070b8:	2800      	cmp	r0, #0
 80070ba:	f47e af61 	bne.w	8005f80 <_svfprintf_r+0x190>
 80070be:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80070c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80070c2:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 80070c6:	1ad3      	subs	r3, r2, r3
 80070c8:	463c      	mov	r4, r7
 80070ca:	e580      	b.n	8006bce <_svfprintf_r+0xdde>
 80070cc:	9309      	str	r3, [sp, #36]	; 0x24
 80070ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80070d0:	9307      	str	r3, [sp, #28]
 80070d2:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 80070d6:	2300      	movs	r3, #0
 80070d8:	f88d c077 	strb.w	ip, [sp, #119]	; 0x77
 80070dc:	9311      	str	r3, [sp, #68]	; 0x44
 80070de:	f7fe bfac 	b.w	800603a <_svfprintf_r+0x24a>
 80070e2:	1cda      	adds	r2, r3, #3
 80070e4:	db19      	blt.n	800711a <_svfprintf_r+0x132a>
 80070e6:	459b      	cmp	fp, r3
 80070e8:	db17      	blt.n	800711a <_svfprintf_r+0x132a>
 80070ea:	9312      	str	r3, [sp, #72]	; 0x48
 80070ec:	2567      	movs	r5, #103	; 0x67
 80070ee:	e71f      	b.n	8006f30 <_svfprintf_r+0x1140>
 80070f0:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 80070f4:	f88d c077 	strb.w	ip, [sp, #119]	; 0x77
 80070f8:	f7ff ba8f 	b.w	800661a <_svfprintf_r+0x82a>
 80070fc:	4643      	mov	r3, r8
 80070fe:	e708      	b.n	8006f12 <_svfprintf_r+0x1122>
 8007100:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 8007104:	9011      	str	r0, [sp, #68]	; 0x44
 8007106:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800710a:	9012      	str	r0, [sp, #72]	; 0x48
 800710c:	f89d c077 	ldrb.w	ip, [sp, #119]	; 0x77
 8007110:	9309      	str	r3, [sp, #36]	; 0x24
 8007112:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007116:	f7fe bf8d 	b.w	8006034 <_svfprintf_r+0x244>
 800711a:	3d02      	subs	r5, #2
 800711c:	3b01      	subs	r3, #1
 800711e:	2b00      	cmp	r3, #0
 8007120:	931f      	str	r3, [sp, #124]	; 0x7c
 8007122:	bfba      	itte	lt
 8007124:	425b      	neglt	r3, r3
 8007126:	222d      	movlt	r2, #45	; 0x2d
 8007128:	222b      	movge	r2, #43	; 0x2b
 800712a:	2b09      	cmp	r3, #9
 800712c:	f88d 5084 	strb.w	r5, [sp, #132]	; 0x84
 8007130:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
 8007134:	dd7b      	ble.n	800722e <_svfprintf_r+0x143e>
 8007136:	f10d 0e93 	add.w	lr, sp, #147	; 0x93
 800713a:	4670      	mov	r0, lr
 800713c:	4a5f      	ldr	r2, [pc, #380]	; (80072bc <_svfprintf_r+0x14cc>)
 800713e:	fb82 2103 	smull	r2, r1, r2, r3
 8007142:	17da      	asrs	r2, r3, #31
 8007144:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 8007148:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800714c:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8007150:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007154:	2a09      	cmp	r2, #9
 8007156:	4613      	mov	r3, r2
 8007158:	f800 1d01 	strb.w	r1, [r0, #-1]!
 800715c:	dcee      	bgt.n	800713c <_svfprintf_r+0x134c>
 800715e:	4602      	mov	r2, r0
 8007160:	3330      	adds	r3, #48	; 0x30
 8007162:	b2d9      	uxtb	r1, r3
 8007164:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8007168:	4596      	cmp	lr, r2
 800716a:	f240 809b 	bls.w	80072a4 <_svfprintf_r+0x14b4>
 800716e:	f10d 0286 	add.w	r2, sp, #134	; 0x86
 8007172:	4603      	mov	r3, r0
 8007174:	e001      	b.n	800717a <_svfprintf_r+0x138a>
 8007176:	f813 1b01 	ldrb.w	r1, [r3], #1
 800717a:	f802 1b01 	strb.w	r1, [r2], #1
 800717e:	4573      	cmp	r3, lr
 8007180:	d1f9      	bne.n	8007176 <_svfprintf_r+0x1386>
 8007182:	ab25      	add	r3, sp, #148	; 0x94
 8007184:	1a1b      	subs	r3, r3, r0
 8007186:	f10d 0286 	add.w	r2, sp, #134	; 0x86
 800718a:	4413      	add	r3, r2
 800718c:	aa21      	add	r2, sp, #132	; 0x84
 800718e:	1a9b      	subs	r3, r3, r2
 8007190:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007192:	9319      	str	r3, [sp, #100]	; 0x64
 8007194:	2a01      	cmp	r2, #1
 8007196:	4413      	add	r3, r2
 8007198:	930d      	str	r3, [sp, #52]	; 0x34
 800719a:	dd74      	ble.n	8007286 <_svfprintf_r+0x1496>
 800719c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800719e:	2200      	movs	r2, #0
 80071a0:	3301      	adds	r3, #1
 80071a2:	930d      	str	r3, [sp, #52]	; 0x34
 80071a4:	9212      	str	r2, [sp, #72]	; 0x48
 80071a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80071aa:	e6cd      	b.n	8006f48 <_svfprintf_r+0x1158>
 80071ac:	9808      	ldr	r0, [sp, #32]
 80071ae:	4631      	mov	r1, r6
 80071b0:	aa25      	add	r2, sp, #148	; 0x94
 80071b2:	f001 fe79 	bl	8008ea8 <__ssprint_r>
 80071b6:	2800      	cmp	r0, #0
 80071b8:	f47e aee2 	bne.w	8005f80 <_svfprintf_r+0x190>
 80071bc:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 80071be:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80071c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80071c2:	463a      	mov	r2, r7
 80071c4:	e601      	b.n	8006dca <_svfprintf_r+0xfda>
 80071c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	bfd8      	it	le
 80071cc:	f1c3 0802 	rsble	r8, r3, #2
 80071d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80071d2:	bfc8      	it	gt
 80071d4:	f04f 0801 	movgt.w	r8, #1
 80071d8:	4443      	add	r3, r8
 80071da:	930d      	str	r3, [sp, #52]	; 0x34
 80071dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80071e0:	e6b2      	b.n	8006f48 <_svfprintf_r+0x1158>
 80071e2:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 80071e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80071ea:	901a      	str	r0, [sp, #104]	; 0x68
 80071ec:	931b      	str	r3, [sp, #108]	; 0x6c
 80071ee:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 80071f2:	e654      	b.n	8006e9e <_svfprintf_r+0x10ae>
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	dd3d      	ble.n	8007274 <_svfprintf_r+0x1484>
 80071f8:	f1bb 0f00 	cmp.w	fp, #0
 80071fc:	d10f      	bne.n	800721e <_svfprintf_r+0x142e>
 80071fe:	9b07      	ldr	r3, [sp, #28]
 8007200:	07db      	lsls	r3, r3, #31
 8007202:	d40c      	bmi.n	800721e <_svfprintf_r+0x142e>
 8007204:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007206:	920d      	str	r2, [sp, #52]	; 0x34
 8007208:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800720c:	e69c      	b.n	8006f48 <_svfprintf_r+0x1158>
 800720e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007210:	e67f      	b.n	8006f12 <_svfprintf_r+0x1122>
 8007212:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007214:	3301      	adds	r3, #1
 8007216:	930d      	str	r3, [sp, #52]	; 0x34
 8007218:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800721c:	e694      	b.n	8006f48 <_svfprintf_r+0x1158>
 800721e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007220:	f10b 0801 	add.w	r8, fp, #1
 8007224:	4443      	add	r3, r8
 8007226:	930d      	str	r3, [sp, #52]	; 0x34
 8007228:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800722c:	e68c      	b.n	8006f48 <_svfprintf_r+0x1158>
 800722e:	3330      	adds	r3, #48	; 0x30
 8007230:	2230      	movs	r2, #48	; 0x30
 8007232:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
 8007236:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
 800723a:	ab22      	add	r3, sp, #136	; 0x88
 800723c:	e7a6      	b.n	800718c <_svfprintf_r+0x139c>
 800723e:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 8007242:	2200      	movs	r2, #0
 8007244:	2300      	movs	r3, #0
 8007246:	f7fe f927 	bl	8005498 <__aeabi_dcmpeq>
 800724a:	2800      	cmp	r0, #0
 800724c:	f47f aef4 	bne.w	8007038 <_svfprintf_r+0x1248>
 8007250:	f1c9 0301 	rsb	r3, r9, #1
 8007254:	931f      	str	r3, [sp, #124]	; 0x7c
 8007256:	4498      	add	r8, r3
 8007258:	e648      	b.n	8006eec <_svfprintf_r+0x10fc>
 800725a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800725c:	f8d5 a000 	ldr.w	sl, [r5]
 8007260:	4628      	mov	r0, r5
 8007262:	3004      	adds	r0, #4
 8007264:	f1ba 0f00 	cmp.w	sl, #0
 8007268:	785d      	ldrb	r5, [r3, #1]
 800726a:	900e      	str	r0, [sp, #56]	; 0x38
 800726c:	f6be ae15 	bge.w	8005e9a <_svfprintf_r+0xaa>
 8007270:	f7fe be11 	b.w	8005e96 <_svfprintf_r+0xa6>
 8007274:	f1bb 0f00 	cmp.w	fp, #0
 8007278:	d10e      	bne.n	8007298 <_svfprintf_r+0x14a8>
 800727a:	9b07      	ldr	r3, [sp, #28]
 800727c:	07d8      	lsls	r0, r3, #31
 800727e:	d40b      	bmi.n	8007298 <_svfprintf_r+0x14a8>
 8007280:	2301      	movs	r3, #1
 8007282:	930d      	str	r3, [sp, #52]	; 0x34
 8007284:	e660      	b.n	8006f48 <_svfprintf_r+0x1158>
 8007286:	9b07      	ldr	r3, [sp, #28]
 8007288:	f013 0301 	ands.w	r3, r3, #1
 800728c:	d186      	bne.n	800719c <_svfprintf_r+0x13ac>
 800728e:	9312      	str	r3, [sp, #72]	; 0x48
 8007290:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007292:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007296:	e657      	b.n	8006f48 <_svfprintf_r+0x1158>
 8007298:	f10b 0302 	add.w	r3, fp, #2
 800729c:	930d      	str	r3, [sp, #52]	; 0x34
 800729e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80072a2:	e651      	b.n	8006f48 <_svfprintf_r+0x1158>
 80072a4:	f10d 0386 	add.w	r3, sp, #134	; 0x86
 80072a8:	e770      	b.n	800718c <_svfprintf_r+0x139c>
 80072aa:	9a08      	ldr	r2, [sp, #32]
 80072ac:	230c      	movs	r3, #12
 80072ae:	6013      	str	r3, [r2, #0]
 80072b0:	f04f 30ff 	mov.w	r0, #4294967295
 80072b4:	f7fe be6e 	b.w	8005f94 <_svfprintf_r+0x1a4>
 80072b8:	08009c38 	.word	0x08009c38
 80072bc:	66666667 	.word	0x66666667

080072c0 <quorem>:
 80072c0:	6902      	ldr	r2, [r0, #16]
 80072c2:	690b      	ldr	r3, [r1, #16]
 80072c4:	4293      	cmp	r3, r2
 80072c6:	f300 808f 	bgt.w	80073e8 <quorem+0x128>
 80072ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80072d2:	f101 0714 	add.w	r7, r1, #20
 80072d6:	f100 0b14 	add.w	fp, r0, #20
 80072da:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 80072de:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
 80072e2:	ea4f 0488 	mov.w	r4, r8, lsl #2
 80072e6:	b083      	sub	sp, #12
 80072e8:	3201      	adds	r2, #1
 80072ea:	fbb3 f9f2 	udiv	r9, r3, r2
 80072ee:	eb0b 0304 	add.w	r3, fp, r4
 80072f2:	9400      	str	r4, [sp, #0]
 80072f4:	eb07 0a04 	add.w	sl, r7, r4
 80072f8:	9301      	str	r3, [sp, #4]
 80072fa:	f1b9 0f00 	cmp.w	r9, #0
 80072fe:	d03b      	beq.n	8007378 <quorem+0xb8>
 8007300:	2600      	movs	r6, #0
 8007302:	4632      	mov	r2, r6
 8007304:	46bc      	mov	ip, r7
 8007306:	46de      	mov	lr, fp
 8007308:	4634      	mov	r4, r6
 800730a:	f85c 6b04 	ldr.w	r6, [ip], #4
 800730e:	f8de 5000 	ldr.w	r5, [lr]
 8007312:	b2b3      	uxth	r3, r6
 8007314:	0c36      	lsrs	r6, r6, #16
 8007316:	fb03 4409 	mla	r4, r3, r9, r4
 800731a:	fb06 f609 	mul.w	r6, r6, r9
 800731e:	eb06 4614 	add.w	r6, r6, r4, lsr #16
 8007322:	b2a3      	uxth	r3, r4
 8007324:	1ad3      	subs	r3, r2, r3
 8007326:	b2b4      	uxth	r4, r6
 8007328:	fa13 f385 	uxtah	r3, r3, r5
 800732c:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
 8007330:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8007334:	b29b      	uxth	r3, r3
 8007336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800733a:	45e2      	cmp	sl, ip
 800733c:	ea4f 4224 	mov.w	r2, r4, asr #16
 8007340:	f84e 3b04 	str.w	r3, [lr], #4
 8007344:	ea4f 4416 	mov.w	r4, r6, lsr #16
 8007348:	d2df      	bcs.n	800730a <quorem+0x4a>
 800734a:	9b00      	ldr	r3, [sp, #0]
 800734c:	f85b 3003 	ldr.w	r3, [fp, r3]
 8007350:	b993      	cbnz	r3, 8007378 <quorem+0xb8>
 8007352:	9c01      	ldr	r4, [sp, #4]
 8007354:	1f23      	subs	r3, r4, #4
 8007356:	459b      	cmp	fp, r3
 8007358:	d20c      	bcs.n	8007374 <quorem+0xb4>
 800735a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800735e:	b94b      	cbnz	r3, 8007374 <quorem+0xb4>
 8007360:	f1a4 0308 	sub.w	r3, r4, #8
 8007364:	e002      	b.n	800736c <quorem+0xac>
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	3b04      	subs	r3, #4
 800736a:	b91a      	cbnz	r2, 8007374 <quorem+0xb4>
 800736c:	459b      	cmp	fp, r3
 800736e:	f108 38ff 	add.w	r8, r8, #4294967295
 8007372:	d3f8      	bcc.n	8007366 <quorem+0xa6>
 8007374:	f8c0 8010 	str.w	r8, [r0, #16]
 8007378:	4604      	mov	r4, r0
 800737a:	f001 fc6b 	bl	8008c54 <__mcmp>
 800737e:	2800      	cmp	r0, #0
 8007380:	db2e      	blt.n	80073e0 <quorem+0x120>
 8007382:	f109 0901 	add.w	r9, r9, #1
 8007386:	465d      	mov	r5, fp
 8007388:	2300      	movs	r3, #0
 800738a:	f857 1b04 	ldr.w	r1, [r7], #4
 800738e:	6828      	ldr	r0, [r5, #0]
 8007390:	b28a      	uxth	r2, r1
 8007392:	1a9a      	subs	r2, r3, r2
 8007394:	0c09      	lsrs	r1, r1, #16
 8007396:	fa12 f280 	uxtah	r2, r2, r0
 800739a:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
 800739e:	eb03 4322 	add.w	r3, r3, r2, asr #16
 80073a2:	b291      	uxth	r1, r2
 80073a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80073a8:	45ba      	cmp	sl, r7
 80073aa:	f845 1b04 	str.w	r1, [r5], #4
 80073ae:	ea4f 4323 	mov.w	r3, r3, asr #16
 80073b2:	d2ea      	bcs.n	800738a <quorem+0xca>
 80073b4:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
 80073b8:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
 80073bc:	b982      	cbnz	r2, 80073e0 <quorem+0x120>
 80073be:	1f1a      	subs	r2, r3, #4
 80073c0:	4593      	cmp	fp, r2
 80073c2:	d20b      	bcs.n	80073dc <quorem+0x11c>
 80073c4:	f853 2c04 	ldr.w	r2, [r3, #-4]
 80073c8:	b942      	cbnz	r2, 80073dc <quorem+0x11c>
 80073ca:	3b08      	subs	r3, #8
 80073cc:	e002      	b.n	80073d4 <quorem+0x114>
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	3b04      	subs	r3, #4
 80073d2:	b91a      	cbnz	r2, 80073dc <quorem+0x11c>
 80073d4:	459b      	cmp	fp, r3
 80073d6:	f108 38ff 	add.w	r8, r8, #4294967295
 80073da:	d3f8      	bcc.n	80073ce <quorem+0x10e>
 80073dc:	f8c4 8010 	str.w	r8, [r4, #16]
 80073e0:	4648      	mov	r0, r9
 80073e2:	b003      	add	sp, #12
 80073e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073e8:	2000      	movs	r0, #0
 80073ea:	4770      	bx	lr
 80073ec:	0000      	movs	r0, r0
	...

080073f0 <_dtoa_r>:
 80073f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073f4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80073f6:	b097      	sub	sp, #92	; 0x5c
 80073f8:	4604      	mov	r4, r0
 80073fa:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 80073fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007400:	b141      	cbz	r1, 8007414 <_dtoa_r+0x24>
 8007402:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007404:	604a      	str	r2, [r1, #4]
 8007406:	2301      	movs	r3, #1
 8007408:	4093      	lsls	r3, r2
 800740a:	608b      	str	r3, [r1, #8]
 800740c:	f001 fa3e 	bl	800888c <_Bfree>
 8007410:	2300      	movs	r3, #0
 8007412:	6423      	str	r3, [r4, #64]	; 0x40
 8007414:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007418:	2b00      	cmp	r3, #0
 800741a:	4699      	mov	r9, r3
 800741c:	db36      	blt.n	800748c <_dtoa_r+0x9c>
 800741e:	2300      	movs	r3, #0
 8007420:	602b      	str	r3, [r5, #0]
 8007422:	4ba5      	ldr	r3, [pc, #660]	; (80076b8 <_dtoa_r+0x2c8>)
 8007424:	461a      	mov	r2, r3
 8007426:	ea09 0303 	and.w	r3, r9, r3
 800742a:	4293      	cmp	r3, r2
 800742c:	d017      	beq.n	800745e <_dtoa_r+0x6e>
 800742e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007432:	2200      	movs	r2, #0
 8007434:	2300      	movs	r3, #0
 8007436:	4630      	mov	r0, r6
 8007438:	4639      	mov	r1, r7
 800743a:	f7fe f82d 	bl	8005498 <__aeabi_dcmpeq>
 800743e:	4680      	mov	r8, r0
 8007440:	2800      	cmp	r0, #0
 8007442:	d02b      	beq.n	800749c <_dtoa_r+0xac>
 8007444:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007446:	2301      	movs	r3, #1
 8007448:	6013      	str	r3, [r2, #0]
 800744a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800744c:	2b00      	cmp	r3, #0
 800744e:	f000 80cb 	beq.w	80075e8 <_dtoa_r+0x1f8>
 8007452:	489a      	ldr	r0, [pc, #616]	; (80076bc <_dtoa_r+0x2cc>)
 8007454:	6018      	str	r0, [r3, #0]
 8007456:	3801      	subs	r0, #1
 8007458:	b017      	add	sp, #92	; 0x5c
 800745a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800745e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007460:	f242 730f 	movw	r3, #9999	; 0x270f
 8007464:	6013      	str	r3, [r2, #0]
 8007466:	9b02      	ldr	r3, [sp, #8]
 8007468:	2b00      	cmp	r3, #0
 800746a:	f000 80a6 	beq.w	80075ba <_dtoa_r+0x1ca>
 800746e:	4894      	ldr	r0, [pc, #592]	; (80076c0 <_dtoa_r+0x2d0>)
 8007470:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007472:	2b00      	cmp	r3, #0
 8007474:	d0f0      	beq.n	8007458 <_dtoa_r+0x68>
 8007476:	78c3      	ldrb	r3, [r0, #3]
 8007478:	2b00      	cmp	r3, #0
 800747a:	f000 80b7 	beq.w	80075ec <_dtoa_r+0x1fc>
 800747e:	f100 0308 	add.w	r3, r0, #8
 8007482:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007484:	6013      	str	r3, [r2, #0]
 8007486:	b017      	add	sp, #92	; 0x5c
 8007488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800748c:	9a03      	ldr	r2, [sp, #12]
 800748e:	2301      	movs	r3, #1
 8007490:	f022 4900 	bic.w	r9, r2, #2147483648	; 0x80000000
 8007494:	602b      	str	r3, [r5, #0]
 8007496:	f8cd 900c 	str.w	r9, [sp, #12]
 800749a:	e7c2      	b.n	8007422 <_dtoa_r+0x32>
 800749c:	aa15      	add	r2, sp, #84	; 0x54
 800749e:	ab14      	add	r3, sp, #80	; 0x50
 80074a0:	e88d 000c 	stmia.w	sp, {r2, r3}
 80074a4:	4620      	mov	r0, r4
 80074a6:	4632      	mov	r2, r6
 80074a8:	463b      	mov	r3, r7
 80074aa:	f001 fc61 	bl	8008d70 <__d2b>
 80074ae:	ea5f 5519 	movs.w	r5, r9, lsr #20
 80074b2:	4683      	mov	fp, r0
 80074b4:	f040 808a 	bne.w	80075cc <_dtoa_r+0x1dc>
 80074b8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80074bc:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80074be:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 80074c2:	4445      	add	r5, r8
 80074c4:	429d      	cmp	r5, r3
 80074c6:	f2c0 8297 	blt.w	80079f8 <_dtoa_r+0x608>
 80074ca:	4a7e      	ldr	r2, [pc, #504]	; (80076c4 <_dtoa_r+0x2d4>)
 80074cc:	1b52      	subs	r2, r2, r5
 80074ce:	fa09 f902 	lsl.w	r9, r9, r2
 80074d2:	9a02      	ldr	r2, [sp, #8]
 80074d4:	f205 4312 	addw	r3, r5, #1042	; 0x412
 80074d8:	fa22 f003 	lsr.w	r0, r2, r3
 80074dc:	ea49 0000 	orr.w	r0, r9, r0
 80074e0:	f7fd fcfc 	bl	8004edc <__aeabi_ui2d>
 80074e4:	2301      	movs	r3, #1
 80074e6:	3d01      	subs	r5, #1
 80074e8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80074ec:	930d      	str	r3, [sp, #52]	; 0x34
 80074ee:	2200      	movs	r2, #0
 80074f0:	4b75      	ldr	r3, [pc, #468]	; (80076c8 <_dtoa_r+0x2d8>)
 80074f2:	f7fd fbb5 	bl	8004c60 <__aeabi_dsub>
 80074f6:	a36a      	add	r3, pc, #424	; (adr r3, 80076a0 <_dtoa_r+0x2b0>)
 80074f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074fc:	f7fd fd64 	bl	8004fc8 <__aeabi_dmul>
 8007500:	a369      	add	r3, pc, #420	; (adr r3, 80076a8 <_dtoa_r+0x2b8>)
 8007502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007506:	f7fd fbad 	bl	8004c64 <__adddf3>
 800750a:	4606      	mov	r6, r0
 800750c:	4628      	mov	r0, r5
 800750e:	460f      	mov	r7, r1
 8007510:	f7fd fcf4 	bl	8004efc <__aeabi_i2d>
 8007514:	a366      	add	r3, pc, #408	; (adr r3, 80076b0 <_dtoa_r+0x2c0>)
 8007516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800751a:	f7fd fd55 	bl	8004fc8 <__aeabi_dmul>
 800751e:	4602      	mov	r2, r0
 8007520:	460b      	mov	r3, r1
 8007522:	4630      	mov	r0, r6
 8007524:	4639      	mov	r1, r7
 8007526:	f7fd fb9d 	bl	8004c64 <__adddf3>
 800752a:	4606      	mov	r6, r0
 800752c:	460f      	mov	r7, r1
 800752e:	f002 f8ed 	bl	800970c <__aeabi_d2iz>
 8007532:	4639      	mov	r1, r7
 8007534:	9004      	str	r0, [sp, #16]
 8007536:	2200      	movs	r2, #0
 8007538:	4630      	mov	r0, r6
 800753a:	2300      	movs	r3, #0
 800753c:	f7fd ffb6 	bl	80054ac <__aeabi_dcmplt>
 8007540:	2800      	cmp	r0, #0
 8007542:	f040 81a6 	bne.w	8007892 <_dtoa_r+0x4a2>
 8007546:	9b04      	ldr	r3, [sp, #16]
 8007548:	2b16      	cmp	r3, #22
 800754a:	f200 819f 	bhi.w	800788c <_dtoa_r+0x49c>
 800754e:	9a04      	ldr	r2, [sp, #16]
 8007550:	4b5e      	ldr	r3, [pc, #376]	; (80076cc <_dtoa_r+0x2dc>)
 8007552:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007556:	e9d3 0100 	ldrd	r0, r1, [r3]
 800755a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800755e:	f7fd ffc3 	bl	80054e8 <__aeabi_dcmpgt>
 8007562:	2800      	cmp	r0, #0
 8007564:	f000 824e 	beq.w	8007a04 <_dtoa_r+0x614>
 8007568:	9b04      	ldr	r3, [sp, #16]
 800756a:	3b01      	subs	r3, #1
 800756c:	9304      	str	r3, [sp, #16]
 800756e:	2300      	movs	r3, #0
 8007570:	930b      	str	r3, [sp, #44]	; 0x2c
 8007572:	ebc5 0508 	rsb	r5, r5, r8
 8007576:	f1b5 0a01 	subs.w	sl, r5, #1
 800757a:	f100 81a1 	bmi.w	80078c0 <_dtoa_r+0x4d0>
 800757e:	2300      	movs	r3, #0
 8007580:	9305      	str	r3, [sp, #20]
 8007582:	9b04      	ldr	r3, [sp, #16]
 8007584:	2b00      	cmp	r3, #0
 8007586:	f2c0 8192 	blt.w	80078ae <_dtoa_r+0x4be>
 800758a:	449a      	add	sl, r3
 800758c:	930a      	str	r3, [sp, #40]	; 0x28
 800758e:	2300      	movs	r3, #0
 8007590:	9308      	str	r3, [sp, #32]
 8007592:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007594:	2b09      	cmp	r3, #9
 8007596:	d82b      	bhi.n	80075f0 <_dtoa_r+0x200>
 8007598:	2b05      	cmp	r3, #5
 800759a:	f340 866d 	ble.w	8008278 <_dtoa_r+0xe88>
 800759e:	3b04      	subs	r3, #4
 80075a0:	9320      	str	r3, [sp, #128]	; 0x80
 80075a2:	2500      	movs	r5, #0
 80075a4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80075a6:	3b02      	subs	r3, #2
 80075a8:	2b03      	cmp	r3, #3
 80075aa:	f200 864b 	bhi.w	8008244 <_dtoa_r+0xe54>
 80075ae:	e8df f013 	tbh	[pc, r3, lsl #1]
 80075b2:	03cc      	.short	0x03cc
 80075b4:	02b203be 	.word	0x02b203be
 80075b8:	0660      	.short	0x0660
 80075ba:	4b41      	ldr	r3, [pc, #260]	; (80076c0 <_dtoa_r+0x2d0>)
 80075bc:	4a44      	ldr	r2, [pc, #272]	; (80076d0 <_dtoa_r+0x2e0>)
 80075be:	f3c9 0013 	ubfx	r0, r9, #0, #20
 80075c2:	2800      	cmp	r0, #0
 80075c4:	bf14      	ite	ne
 80075c6:	4618      	movne	r0, r3
 80075c8:	4610      	moveq	r0, r2
 80075ca:	e751      	b.n	8007470 <_dtoa_r+0x80>
 80075cc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80075d0:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80075d4:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 80075d8:	4630      	mov	r0, r6
 80075da:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80075de:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80075e2:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80075e6:	e782      	b.n	80074ee <_dtoa_r+0xfe>
 80075e8:	483a      	ldr	r0, [pc, #232]	; (80076d4 <_dtoa_r+0x2e4>)
 80075ea:	e735      	b.n	8007458 <_dtoa_r+0x68>
 80075ec:	1cc3      	adds	r3, r0, #3
 80075ee:	e748      	b.n	8007482 <_dtoa_r+0x92>
 80075f0:	2100      	movs	r1, #0
 80075f2:	6461      	str	r1, [r4, #68]	; 0x44
 80075f4:	4620      	mov	r0, r4
 80075f6:	9120      	str	r1, [sp, #128]	; 0x80
 80075f8:	f001 f922 	bl	8008840 <_Balloc>
 80075fc:	f04f 33ff 	mov.w	r3, #4294967295
 8007600:	9306      	str	r3, [sp, #24]
 8007602:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007604:	930c      	str	r3, [sp, #48]	; 0x30
 8007606:	2301      	movs	r3, #1
 8007608:	9007      	str	r0, [sp, #28]
 800760a:	9221      	str	r2, [sp, #132]	; 0x84
 800760c:	6420      	str	r0, [r4, #64]	; 0x40
 800760e:	9309      	str	r3, [sp, #36]	; 0x24
 8007610:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007612:	2b00      	cmp	r3, #0
 8007614:	f2c0 80d2 	blt.w	80077bc <_dtoa_r+0x3cc>
 8007618:	9a04      	ldr	r2, [sp, #16]
 800761a:	2a0e      	cmp	r2, #14
 800761c:	f300 80ce 	bgt.w	80077bc <_dtoa_r+0x3cc>
 8007620:	4b2a      	ldr	r3, [pc, #168]	; (80076cc <_dtoa_r+0x2dc>)
 8007622:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007626:	e9d3 8900 	ldrd	r8, r9, [r3]
 800762a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800762c:	2b00      	cmp	r3, #0
 800762e:	f2c0 838f 	blt.w	8007d50 <_dtoa_r+0x960>
 8007632:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007636:	4642      	mov	r2, r8
 8007638:	464b      	mov	r3, r9
 800763a:	4630      	mov	r0, r6
 800763c:	4639      	mov	r1, r7
 800763e:	f7fd fded 	bl	800521c <__aeabi_ddiv>
 8007642:	f002 f863 	bl	800970c <__aeabi_d2iz>
 8007646:	4682      	mov	sl, r0
 8007648:	f7fd fc58 	bl	8004efc <__aeabi_i2d>
 800764c:	4642      	mov	r2, r8
 800764e:	464b      	mov	r3, r9
 8007650:	f7fd fcba 	bl	8004fc8 <__aeabi_dmul>
 8007654:	460b      	mov	r3, r1
 8007656:	4602      	mov	r2, r0
 8007658:	4639      	mov	r1, r7
 800765a:	4630      	mov	r0, r6
 800765c:	f7fd fb00 	bl	8004c60 <__aeabi_dsub>
 8007660:	9d07      	ldr	r5, [sp, #28]
 8007662:	f10a 0330 	add.w	r3, sl, #48	; 0x30
 8007666:	702b      	strb	r3, [r5, #0]
 8007668:	9b06      	ldr	r3, [sp, #24]
 800766a:	2b01      	cmp	r3, #1
 800766c:	4606      	mov	r6, r0
 800766e:	460f      	mov	r7, r1
 8007670:	f105 0501 	add.w	r5, r5, #1
 8007674:	d062      	beq.n	800773c <_dtoa_r+0x34c>
 8007676:	2200      	movs	r2, #0
 8007678:	4b17      	ldr	r3, [pc, #92]	; (80076d8 <_dtoa_r+0x2e8>)
 800767a:	f7fd fca5 	bl	8004fc8 <__aeabi_dmul>
 800767e:	2200      	movs	r2, #0
 8007680:	2300      	movs	r3, #0
 8007682:	4606      	mov	r6, r0
 8007684:	460f      	mov	r7, r1
 8007686:	f7fd ff07 	bl	8005498 <__aeabi_dcmpeq>
 800768a:	2800      	cmp	r0, #0
 800768c:	f040 8083 	bne.w	8007796 <_dtoa_r+0x3a6>
 8007690:	f8cd b008 	str.w	fp, [sp, #8]
 8007694:	9405      	str	r4, [sp, #20]
 8007696:	f8dd b01c 	ldr.w	fp, [sp, #28]
 800769a:	9c06      	ldr	r4, [sp, #24]
 800769c:	e029      	b.n	80076f2 <_dtoa_r+0x302>
 800769e:	bf00      	nop
 80076a0:	636f4361 	.word	0x636f4361
 80076a4:	3fd287a7 	.word	0x3fd287a7
 80076a8:	8b60c8b3 	.word	0x8b60c8b3
 80076ac:	3fc68a28 	.word	0x3fc68a28
 80076b0:	509f79fb 	.word	0x509f79fb
 80076b4:	3fd34413 	.word	0x3fd34413
 80076b8:	7ff00000 	.word	0x7ff00000
 80076bc:	08009c41 	.word	0x08009c41
 80076c0:	08009c60 	.word	0x08009c60
 80076c4:	fffffc0e 	.word	0xfffffc0e
 80076c8:	3ff80000 	.word	0x3ff80000
 80076cc:	08009c70 	.word	0x08009c70
 80076d0:	08009c54 	.word	0x08009c54
 80076d4:	08009c40 	.word	0x08009c40
 80076d8:	40240000 	.word	0x40240000
 80076dc:	f7fd fc74 	bl	8004fc8 <__aeabi_dmul>
 80076e0:	2200      	movs	r2, #0
 80076e2:	2300      	movs	r3, #0
 80076e4:	4606      	mov	r6, r0
 80076e6:	460f      	mov	r7, r1
 80076e8:	f7fd fed6 	bl	8005498 <__aeabi_dcmpeq>
 80076ec:	2800      	cmp	r0, #0
 80076ee:	f040 83de 	bne.w	8007eae <_dtoa_r+0xabe>
 80076f2:	4642      	mov	r2, r8
 80076f4:	464b      	mov	r3, r9
 80076f6:	4630      	mov	r0, r6
 80076f8:	4639      	mov	r1, r7
 80076fa:	f7fd fd8f 	bl	800521c <__aeabi_ddiv>
 80076fe:	f002 f805 	bl	800970c <__aeabi_d2iz>
 8007702:	4682      	mov	sl, r0
 8007704:	f7fd fbfa 	bl	8004efc <__aeabi_i2d>
 8007708:	4642      	mov	r2, r8
 800770a:	464b      	mov	r3, r9
 800770c:	f7fd fc5c 	bl	8004fc8 <__aeabi_dmul>
 8007710:	4602      	mov	r2, r0
 8007712:	460b      	mov	r3, r1
 8007714:	4630      	mov	r0, r6
 8007716:	4639      	mov	r1, r7
 8007718:	f7fd faa2 	bl	8004c60 <__aeabi_dsub>
 800771c:	f10a 0e30 	add.w	lr, sl, #48	; 0x30
 8007720:	f805 eb01 	strb.w	lr, [r5], #1
 8007724:	ebcb 0e05 	rsb	lr, fp, r5
 8007728:	4574      	cmp	r4, lr
 800772a:	4606      	mov	r6, r0
 800772c:	460f      	mov	r7, r1
 800772e:	f04f 0200 	mov.w	r2, #0
 8007732:	4bb5      	ldr	r3, [pc, #724]	; (8007a08 <_dtoa_r+0x618>)
 8007734:	d1d2      	bne.n	80076dc <_dtoa_r+0x2ec>
 8007736:	f8dd b008 	ldr.w	fp, [sp, #8]
 800773a:	9c05      	ldr	r4, [sp, #20]
 800773c:	4632      	mov	r2, r6
 800773e:	463b      	mov	r3, r7
 8007740:	4630      	mov	r0, r6
 8007742:	4639      	mov	r1, r7
 8007744:	f7fd fa8e 	bl	8004c64 <__adddf3>
 8007748:	4606      	mov	r6, r0
 800774a:	460f      	mov	r7, r1
 800774c:	4640      	mov	r0, r8
 800774e:	4649      	mov	r1, r9
 8007750:	4632      	mov	r2, r6
 8007752:	463b      	mov	r3, r7
 8007754:	f7fd feaa 	bl	80054ac <__aeabi_dcmplt>
 8007758:	b948      	cbnz	r0, 800776e <_dtoa_r+0x37e>
 800775a:	4640      	mov	r0, r8
 800775c:	4649      	mov	r1, r9
 800775e:	4632      	mov	r2, r6
 8007760:	463b      	mov	r3, r7
 8007762:	f7fd fe99 	bl	8005498 <__aeabi_dcmpeq>
 8007766:	b1b0      	cbz	r0, 8007796 <_dtoa_r+0x3a6>
 8007768:	f01a 0f01 	tst.w	sl, #1
 800776c:	d013      	beq.n	8007796 <_dtoa_r+0x3a6>
 800776e:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 8007772:	9907      	ldr	r1, [sp, #28]
 8007774:	1e6b      	subs	r3, r5, #1
 8007776:	e004      	b.n	8007782 <_dtoa_r+0x392>
 8007778:	428b      	cmp	r3, r1
 800777a:	f000 8442 	beq.w	8008002 <_dtoa_r+0xc12>
 800777e:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
 8007782:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007786:	f103 0501 	add.w	r5, r3, #1
 800778a:	461a      	mov	r2, r3
 800778c:	d0f4      	beq.n	8007778 <_dtoa_r+0x388>
 800778e:	f108 0301 	add.w	r3, r8, #1
 8007792:	b2db      	uxtb	r3, r3
 8007794:	7013      	strb	r3, [r2, #0]
 8007796:	4620      	mov	r0, r4
 8007798:	4659      	mov	r1, fp
 800779a:	f001 f877 	bl	800888c <_Bfree>
 800779e:	2200      	movs	r2, #0
 80077a0:	9b04      	ldr	r3, [sp, #16]
 80077a2:	702a      	strb	r2, [r5, #0]
 80077a4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80077a6:	3301      	adds	r3, #1
 80077a8:	6013      	str	r3, [r2, #0]
 80077aa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	f000 8345 	beq.w	8007e3c <_dtoa_r+0xa4c>
 80077b2:	9807      	ldr	r0, [sp, #28]
 80077b4:	601d      	str	r5, [r3, #0]
 80077b6:	b017      	add	sp, #92	; 0x5c
 80077b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077be:	2a00      	cmp	r2, #0
 80077c0:	f000 8084 	beq.w	80078cc <_dtoa_r+0x4dc>
 80077c4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80077c6:	2a01      	cmp	r2, #1
 80077c8:	f340 8304 	ble.w	8007dd4 <_dtoa_r+0x9e4>
 80077cc:	9b06      	ldr	r3, [sp, #24]
 80077ce:	1e5f      	subs	r7, r3, #1
 80077d0:	9b08      	ldr	r3, [sp, #32]
 80077d2:	42bb      	cmp	r3, r7
 80077d4:	f2c0 83a0 	blt.w	8007f18 <_dtoa_r+0xb28>
 80077d8:	1bdf      	subs	r7, r3, r7
 80077da:	9b06      	ldr	r3, [sp, #24]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	f2c0 849e 	blt.w	800811e <_dtoa_r+0xd2e>
 80077e2:	9d05      	ldr	r5, [sp, #20]
 80077e4:	9b06      	ldr	r3, [sp, #24]
 80077e6:	9a05      	ldr	r2, [sp, #20]
 80077e8:	4620      	mov	r0, r4
 80077ea:	441a      	add	r2, r3
 80077ec:	2101      	movs	r1, #1
 80077ee:	9205      	str	r2, [sp, #20]
 80077f0:	449a      	add	sl, r3
 80077f2:	f001 f8e5 	bl	80089c0 <__i2b>
 80077f6:	4606      	mov	r6, r0
 80077f8:	b165      	cbz	r5, 8007814 <_dtoa_r+0x424>
 80077fa:	f1ba 0f00 	cmp.w	sl, #0
 80077fe:	dd09      	ble.n	8007814 <_dtoa_r+0x424>
 8007800:	45aa      	cmp	sl, r5
 8007802:	9a05      	ldr	r2, [sp, #20]
 8007804:	4653      	mov	r3, sl
 8007806:	bfa8      	it	ge
 8007808:	462b      	movge	r3, r5
 800780a:	1ad2      	subs	r2, r2, r3
 800780c:	9205      	str	r2, [sp, #20]
 800780e:	1aed      	subs	r5, r5, r3
 8007810:	ebc3 0a0a 	rsb	sl, r3, sl
 8007814:	9b08      	ldr	r3, [sp, #32]
 8007816:	2b00      	cmp	r3, #0
 8007818:	dd1a      	ble.n	8007850 <_dtoa_r+0x460>
 800781a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800781c:	2b00      	cmp	r3, #0
 800781e:	f000 8374 	beq.w	8007f0a <_dtoa_r+0xb1a>
 8007822:	2f00      	cmp	r7, #0
 8007824:	dd10      	ble.n	8007848 <_dtoa_r+0x458>
 8007826:	4631      	mov	r1, r6
 8007828:	463a      	mov	r2, r7
 800782a:	4620      	mov	r0, r4
 800782c:	f001 f96c 	bl	8008b08 <__pow5mult>
 8007830:	4606      	mov	r6, r0
 8007832:	465a      	mov	r2, fp
 8007834:	4631      	mov	r1, r6
 8007836:	4620      	mov	r0, r4
 8007838:	f001 f8cc 	bl	80089d4 <__multiply>
 800783c:	4659      	mov	r1, fp
 800783e:	4680      	mov	r8, r0
 8007840:	4620      	mov	r0, r4
 8007842:	f001 f823 	bl	800888c <_Bfree>
 8007846:	46c3      	mov	fp, r8
 8007848:	9b08      	ldr	r3, [sp, #32]
 800784a:	1bda      	subs	r2, r3, r7
 800784c:	f040 82a2 	bne.w	8007d94 <_dtoa_r+0x9a4>
 8007850:	4620      	mov	r0, r4
 8007852:	2101      	movs	r1, #1
 8007854:	f001 f8b4 	bl	80089c0 <__i2b>
 8007858:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800785a:	2b00      	cmp	r3, #0
 800785c:	4680      	mov	r8, r0
 800785e:	dd39      	ble.n	80078d4 <_dtoa_r+0x4e4>
 8007860:	4601      	mov	r1, r0
 8007862:	461a      	mov	r2, r3
 8007864:	4620      	mov	r0, r4
 8007866:	f001 f94f 	bl	8008b08 <__pow5mult>
 800786a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800786c:	2b01      	cmp	r3, #1
 800786e:	4680      	mov	r8, r0
 8007870:	f340 8296 	ble.w	8007da0 <_dtoa_r+0x9b0>
 8007874:	f04f 0900 	mov.w	r9, #0
 8007878:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800787c:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8007880:	6918      	ldr	r0, [r3, #16]
 8007882:	f001 f84f 	bl	8008924 <__hi0bits>
 8007886:	f1c0 0020 	rsb	r0, r0, #32
 800788a:	e02d      	b.n	80078e8 <_dtoa_r+0x4f8>
 800788c:	2301      	movs	r3, #1
 800788e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007890:	e66f      	b.n	8007572 <_dtoa_r+0x182>
 8007892:	9804      	ldr	r0, [sp, #16]
 8007894:	f7fd fb32 	bl	8004efc <__aeabi_i2d>
 8007898:	4632      	mov	r2, r6
 800789a:	463b      	mov	r3, r7
 800789c:	f7fd fdfc 	bl	8005498 <__aeabi_dcmpeq>
 80078a0:	2800      	cmp	r0, #0
 80078a2:	f47f ae50 	bne.w	8007546 <_dtoa_r+0x156>
 80078a6:	9b04      	ldr	r3, [sp, #16]
 80078a8:	3b01      	subs	r3, #1
 80078aa:	9304      	str	r3, [sp, #16]
 80078ac:	e64b      	b.n	8007546 <_dtoa_r+0x156>
 80078ae:	9a05      	ldr	r2, [sp, #20]
 80078b0:	9b04      	ldr	r3, [sp, #16]
 80078b2:	1ad2      	subs	r2, r2, r3
 80078b4:	425b      	negs	r3, r3
 80078b6:	9308      	str	r3, [sp, #32]
 80078b8:	2300      	movs	r3, #0
 80078ba:	9205      	str	r2, [sp, #20]
 80078bc:	930a      	str	r3, [sp, #40]	; 0x28
 80078be:	e668      	b.n	8007592 <_dtoa_r+0x1a2>
 80078c0:	f1ca 0300 	rsb	r3, sl, #0
 80078c4:	9305      	str	r3, [sp, #20]
 80078c6:	f04f 0a00 	mov.w	sl, #0
 80078ca:	e65a      	b.n	8007582 <_dtoa_r+0x192>
 80078cc:	9f08      	ldr	r7, [sp, #32]
 80078ce:	9d05      	ldr	r5, [sp, #20]
 80078d0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80078d2:	e791      	b.n	80077f8 <_dtoa_r+0x408>
 80078d4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	f340 82b3 	ble.w	8007e42 <_dtoa_r+0xa52>
 80078dc:	f04f 0900 	mov.w	r9, #0
 80078e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d1c8      	bne.n	8007878 <_dtoa_r+0x488>
 80078e6:	2001      	movs	r0, #1
 80078e8:	4450      	add	r0, sl
 80078ea:	f010 001f 	ands.w	r0, r0, #31
 80078ee:	f000 8081 	beq.w	80079f4 <_dtoa_r+0x604>
 80078f2:	f1c0 0320 	rsb	r3, r0, #32
 80078f6:	2b04      	cmp	r3, #4
 80078f8:	f340 84b5 	ble.w	8008266 <_dtoa_r+0xe76>
 80078fc:	f1c0 001c 	rsb	r0, r0, #28
 8007900:	9b05      	ldr	r3, [sp, #20]
 8007902:	4403      	add	r3, r0
 8007904:	9305      	str	r3, [sp, #20]
 8007906:	4405      	add	r5, r0
 8007908:	4482      	add	sl, r0
 800790a:	9b05      	ldr	r3, [sp, #20]
 800790c:	2b00      	cmp	r3, #0
 800790e:	dd05      	ble.n	800791c <_dtoa_r+0x52c>
 8007910:	4659      	mov	r1, fp
 8007912:	461a      	mov	r2, r3
 8007914:	4620      	mov	r0, r4
 8007916:	f001 f947 	bl	8008ba8 <__lshift>
 800791a:	4683      	mov	fp, r0
 800791c:	f1ba 0f00 	cmp.w	sl, #0
 8007920:	dd05      	ble.n	800792e <_dtoa_r+0x53e>
 8007922:	4641      	mov	r1, r8
 8007924:	4652      	mov	r2, sl
 8007926:	4620      	mov	r0, r4
 8007928:	f001 f93e 	bl	8008ba8 <__lshift>
 800792c:	4680      	mov	r8, r0
 800792e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007930:	2b00      	cmp	r3, #0
 8007932:	f040 8268 	bne.w	8007e06 <_dtoa_r+0xa16>
 8007936:	9b06      	ldr	r3, [sp, #24]
 8007938:	2b00      	cmp	r3, #0
 800793a:	f340 8295 	ble.w	8007e68 <_dtoa_r+0xa78>
 800793e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007940:	2b00      	cmp	r3, #0
 8007942:	d171      	bne.n	8007a28 <_dtoa_r+0x638>
 8007944:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8007948:	9f06      	ldr	r7, [sp, #24]
 800794a:	464d      	mov	r5, r9
 800794c:	e002      	b.n	8007954 <_dtoa_r+0x564>
 800794e:	f000 ffa7 	bl	80088a0 <__multadd>
 8007952:	4683      	mov	fp, r0
 8007954:	4641      	mov	r1, r8
 8007956:	4658      	mov	r0, fp
 8007958:	f7ff fcb2 	bl	80072c0 <quorem>
 800795c:	f100 0c30 	add.w	ip, r0, #48	; 0x30
 8007960:	f805 cb01 	strb.w	ip, [r5], #1
 8007964:	ebc9 0305 	rsb	r3, r9, r5
 8007968:	42bb      	cmp	r3, r7
 800796a:	4620      	mov	r0, r4
 800796c:	4659      	mov	r1, fp
 800796e:	f04f 020a 	mov.w	r2, #10
 8007972:	f04f 0300 	mov.w	r3, #0
 8007976:	dbea      	blt.n	800794e <_dtoa_r+0x55e>
 8007978:	9b07      	ldr	r3, [sp, #28]
 800797a:	9a06      	ldr	r2, [sp, #24]
 800797c:	2a01      	cmp	r2, #1
 800797e:	bfac      	ite	ge
 8007980:	189b      	addge	r3, r3, r2
 8007982:	3301      	addlt	r3, #1
 8007984:	461d      	mov	r5, r3
 8007986:	f04f 0a00 	mov.w	sl, #0
 800798a:	4659      	mov	r1, fp
 800798c:	2201      	movs	r2, #1
 800798e:	4620      	mov	r0, r4
 8007990:	f8cd c008 	str.w	ip, [sp, #8]
 8007994:	f001 f908 	bl	8008ba8 <__lshift>
 8007998:	4641      	mov	r1, r8
 800799a:	4683      	mov	fp, r0
 800799c:	f001 f95a 	bl	8008c54 <__mcmp>
 80079a0:	2800      	cmp	r0, #0
 80079a2:	f8dd c008 	ldr.w	ip, [sp, #8]
 80079a6:	f340 82ed 	ble.w	8007f84 <_dtoa_r+0xb94>
 80079aa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80079ae:	9907      	ldr	r1, [sp, #28]
 80079b0:	1e6b      	subs	r3, r5, #1
 80079b2:	e004      	b.n	80079be <_dtoa_r+0x5ce>
 80079b4:	428b      	cmp	r3, r1
 80079b6:	f000 8273 	beq.w	8007ea0 <_dtoa_r+0xab0>
 80079ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80079be:	2a39      	cmp	r2, #57	; 0x39
 80079c0:	f103 0501 	add.w	r5, r3, #1
 80079c4:	d0f6      	beq.n	80079b4 <_dtoa_r+0x5c4>
 80079c6:	3201      	adds	r2, #1
 80079c8:	701a      	strb	r2, [r3, #0]
 80079ca:	4641      	mov	r1, r8
 80079cc:	4620      	mov	r0, r4
 80079ce:	f000 ff5d 	bl	800888c <_Bfree>
 80079d2:	2e00      	cmp	r6, #0
 80079d4:	f43f aedf 	beq.w	8007796 <_dtoa_r+0x3a6>
 80079d8:	f1ba 0f00 	cmp.w	sl, #0
 80079dc:	d005      	beq.n	80079ea <_dtoa_r+0x5fa>
 80079de:	45b2      	cmp	sl, r6
 80079e0:	d003      	beq.n	80079ea <_dtoa_r+0x5fa>
 80079e2:	4651      	mov	r1, sl
 80079e4:	4620      	mov	r0, r4
 80079e6:	f000 ff51 	bl	800888c <_Bfree>
 80079ea:	4631      	mov	r1, r6
 80079ec:	4620      	mov	r0, r4
 80079ee:	f000 ff4d 	bl	800888c <_Bfree>
 80079f2:	e6d0      	b.n	8007796 <_dtoa_r+0x3a6>
 80079f4:	201c      	movs	r0, #28
 80079f6:	e783      	b.n	8007900 <_dtoa_r+0x510>
 80079f8:	4b04      	ldr	r3, [pc, #16]	; (8007a0c <_dtoa_r+0x61c>)
 80079fa:	9a02      	ldr	r2, [sp, #8]
 80079fc:	1b5b      	subs	r3, r3, r5
 80079fe:	fa02 f003 	lsl.w	r0, r2, r3
 8007a02:	e56d      	b.n	80074e0 <_dtoa_r+0xf0>
 8007a04:	900b      	str	r0, [sp, #44]	; 0x2c
 8007a06:	e5b4      	b.n	8007572 <_dtoa_r+0x182>
 8007a08:	40240000 	.word	0x40240000
 8007a0c:	fffffbee 	.word	0xfffffbee
 8007a10:	4631      	mov	r1, r6
 8007a12:	2300      	movs	r3, #0
 8007a14:	4620      	mov	r0, r4
 8007a16:	220a      	movs	r2, #10
 8007a18:	f000 ff42 	bl	80088a0 <__multadd>
 8007a1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	4606      	mov	r6, r0
 8007a22:	f340 8409 	ble.w	8008238 <_dtoa_r+0xe48>
 8007a26:	9306      	str	r3, [sp, #24]
 8007a28:	2d00      	cmp	r5, #0
 8007a2a:	dd05      	ble.n	8007a38 <_dtoa_r+0x648>
 8007a2c:	4631      	mov	r1, r6
 8007a2e:	462a      	mov	r2, r5
 8007a30:	4620      	mov	r0, r4
 8007a32:	f001 f8b9 	bl	8008ba8 <__lshift>
 8007a36:	4606      	mov	r6, r0
 8007a38:	f1b9 0f00 	cmp.w	r9, #0
 8007a3c:	f040 82eb 	bne.w	8008016 <_dtoa_r+0xc26>
 8007a40:	46b1      	mov	r9, r6
 8007a42:	9b06      	ldr	r3, [sp, #24]
 8007a44:	9a07      	ldr	r2, [sp, #28]
 8007a46:	3b01      	subs	r3, #1
 8007a48:	18d3      	adds	r3, r2, r3
 8007a4a:	9308      	str	r3, [sp, #32]
 8007a4c:	9b02      	ldr	r3, [sp, #8]
 8007a4e:	f003 0301 	and.w	r3, r3, #1
 8007a52:	9309      	str	r3, [sp, #36]	; 0x24
 8007a54:	4617      	mov	r7, r2
 8007a56:	4641      	mov	r1, r8
 8007a58:	4658      	mov	r0, fp
 8007a5a:	f7ff fc31 	bl	80072c0 <quorem>
 8007a5e:	4631      	mov	r1, r6
 8007a60:	4605      	mov	r5, r0
 8007a62:	4658      	mov	r0, fp
 8007a64:	f001 f8f6 	bl	8008c54 <__mcmp>
 8007a68:	464a      	mov	r2, r9
 8007a6a:	4682      	mov	sl, r0
 8007a6c:	4641      	mov	r1, r8
 8007a6e:	4620      	mov	r0, r4
 8007a70:	f001 f914 	bl	8008c9c <__mdiff>
 8007a74:	68c2      	ldr	r2, [r0, #12]
 8007a76:	4603      	mov	r3, r0
 8007a78:	f105 0c30 	add.w	ip, r5, #48	; 0x30
 8007a7c:	2a00      	cmp	r2, #0
 8007a7e:	f040 81b8 	bne.w	8007df2 <_dtoa_r+0xa02>
 8007a82:	4619      	mov	r1, r3
 8007a84:	4658      	mov	r0, fp
 8007a86:	f8cd c018 	str.w	ip, [sp, #24]
 8007a8a:	9305      	str	r3, [sp, #20]
 8007a8c:	f001 f8e2 	bl	8008c54 <__mcmp>
 8007a90:	9b05      	ldr	r3, [sp, #20]
 8007a92:	9002      	str	r0, [sp, #8]
 8007a94:	4619      	mov	r1, r3
 8007a96:	4620      	mov	r0, r4
 8007a98:	f000 fef8 	bl	800888c <_Bfree>
 8007a9c:	9a02      	ldr	r2, [sp, #8]
 8007a9e:	f8dd c018 	ldr.w	ip, [sp, #24]
 8007aa2:	b92a      	cbnz	r2, 8007ab0 <_dtoa_r+0x6c0>
 8007aa4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007aa6:	b91b      	cbnz	r3, 8007ab0 <_dtoa_r+0x6c0>
 8007aa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	f000 83a8 	beq.w	8008200 <_dtoa_r+0xe10>
 8007ab0:	f1ba 0f00 	cmp.w	sl, #0
 8007ab4:	f2c0 8248 	blt.w	8007f48 <_dtoa_r+0xb58>
 8007ab8:	d105      	bne.n	8007ac6 <_dtoa_r+0x6d6>
 8007aba:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007abc:	b91b      	cbnz	r3, 8007ac6 <_dtoa_r+0x6d6>
 8007abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	f000 8241 	beq.w	8007f48 <_dtoa_r+0xb58>
 8007ac6:	2a00      	cmp	r2, #0
 8007ac8:	f300 82b9 	bgt.w	800803e <_dtoa_r+0xc4e>
 8007acc:	9b08      	ldr	r3, [sp, #32]
 8007ace:	f887 c000 	strb.w	ip, [r7]
 8007ad2:	f107 0a01 	add.w	sl, r7, #1
 8007ad6:	429f      	cmp	r7, r3
 8007ad8:	4655      	mov	r5, sl
 8007ada:	f000 82bc 	beq.w	8008056 <_dtoa_r+0xc66>
 8007ade:	4659      	mov	r1, fp
 8007ae0:	220a      	movs	r2, #10
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	4620      	mov	r0, r4
 8007ae6:	f000 fedb 	bl	80088a0 <__multadd>
 8007aea:	454e      	cmp	r6, r9
 8007aec:	4683      	mov	fp, r0
 8007aee:	4631      	mov	r1, r6
 8007af0:	4620      	mov	r0, r4
 8007af2:	f04f 020a 	mov.w	r2, #10
 8007af6:	f04f 0300 	mov.w	r3, #0
 8007afa:	f000 8174 	beq.w	8007de6 <_dtoa_r+0x9f6>
 8007afe:	f000 fecf 	bl	80088a0 <__multadd>
 8007b02:	4649      	mov	r1, r9
 8007b04:	4606      	mov	r6, r0
 8007b06:	220a      	movs	r2, #10
 8007b08:	4620      	mov	r0, r4
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	f000 fec8 	bl	80088a0 <__multadd>
 8007b10:	4657      	mov	r7, sl
 8007b12:	4681      	mov	r9, r0
 8007b14:	e79f      	b.n	8007a56 <_dtoa_r+0x666>
 8007b16:	2301      	movs	r3, #1
 8007b18:	9309      	str	r3, [sp, #36]	; 0x24
 8007b1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	f340 820a 	ble.w	8007f36 <_dtoa_r+0xb46>
 8007b22:	461f      	mov	r7, r3
 8007b24:	461e      	mov	r6, r3
 8007b26:	930c      	str	r3, [sp, #48]	; 0x30
 8007b28:	9306      	str	r3, [sp, #24]
 8007b2a:	2100      	movs	r1, #0
 8007b2c:	2f17      	cmp	r7, #23
 8007b2e:	6461      	str	r1, [r4, #68]	; 0x44
 8007b30:	d90a      	bls.n	8007b48 <_dtoa_r+0x758>
 8007b32:	2201      	movs	r2, #1
 8007b34:	2304      	movs	r3, #4
 8007b36:	005b      	lsls	r3, r3, #1
 8007b38:	f103 0014 	add.w	r0, r3, #20
 8007b3c:	4287      	cmp	r7, r0
 8007b3e:	4611      	mov	r1, r2
 8007b40:	f102 0201 	add.w	r2, r2, #1
 8007b44:	d2f7      	bcs.n	8007b36 <_dtoa_r+0x746>
 8007b46:	6461      	str	r1, [r4, #68]	; 0x44
 8007b48:	4620      	mov	r0, r4
 8007b4a:	f000 fe79 	bl	8008840 <_Balloc>
 8007b4e:	2e0e      	cmp	r6, #14
 8007b50:	9007      	str	r0, [sp, #28]
 8007b52:	6420      	str	r0, [r4, #64]	; 0x40
 8007b54:	f63f ad5c 	bhi.w	8007610 <_dtoa_r+0x220>
 8007b58:	2d00      	cmp	r5, #0
 8007b5a:	f43f ad59 	beq.w	8007610 <_dtoa_r+0x220>
 8007b5e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007b62:	9904      	ldr	r1, [sp, #16]
 8007b64:	2900      	cmp	r1, #0
 8007b66:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8007b6a:	f340 8223 	ble.w	8007fb4 <_dtoa_r+0xbc4>
 8007b6e:	4bb7      	ldr	r3, [pc, #732]	; (8007e4c <_dtoa_r+0xa5c>)
 8007b70:	f001 020f 	and.w	r2, r1, #15
 8007b74:	110d      	asrs	r5, r1, #4
 8007b76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b7a:	06e9      	lsls	r1, r5, #27
 8007b7c:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007b80:	f140 81d2 	bpl.w	8007f28 <_dtoa_r+0xb38>
 8007b84:	4bb2      	ldr	r3, [pc, #712]	; (8007e50 <_dtoa_r+0xa60>)
 8007b86:	ec51 0b17 	vmov	r0, r1, d7
 8007b8a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007b8e:	f7fd fb45 	bl	800521c <__aeabi_ddiv>
 8007b92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b96:	f005 050f 	and.w	r5, r5, #15
 8007b9a:	f04f 0803 	mov.w	r8, #3
 8007b9e:	b18d      	cbz	r5, 8007bc4 <_dtoa_r+0x7d4>
 8007ba0:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 8007e50 <_dtoa_r+0xa60>
 8007ba4:	4630      	mov	r0, r6
 8007ba6:	4639      	mov	r1, r7
 8007ba8:	07ea      	lsls	r2, r5, #31
 8007baa:	d505      	bpl.n	8007bb8 <_dtoa_r+0x7c8>
 8007bac:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007bb0:	f7fd fa0a 	bl	8004fc8 <__aeabi_dmul>
 8007bb4:	f108 0801 	add.w	r8, r8, #1
 8007bb8:	106d      	asrs	r5, r5, #1
 8007bba:	f109 0908 	add.w	r9, r9, #8
 8007bbe:	d1f3      	bne.n	8007ba8 <_dtoa_r+0x7b8>
 8007bc0:	4606      	mov	r6, r0
 8007bc2:	460f      	mov	r7, r1
 8007bc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bc8:	4632      	mov	r2, r6
 8007bca:	463b      	mov	r3, r7
 8007bcc:	f7fd fb26 	bl	800521c <__aeabi_ddiv>
 8007bd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bd6:	b143      	cbz	r3, 8007bea <_dtoa_r+0x7fa>
 8007bd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	4b9d      	ldr	r3, [pc, #628]	; (8007e54 <_dtoa_r+0xa64>)
 8007be0:	f7fd fc64 	bl	80054ac <__aeabi_dcmplt>
 8007be4:	2800      	cmp	r0, #0
 8007be6:	f040 82ae 	bne.w	8008146 <_dtoa_r+0xd56>
 8007bea:	4640      	mov	r0, r8
 8007bec:	f7fd f986 	bl	8004efc <__aeabi_i2d>
 8007bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007bf4:	f7fd f9e8 	bl	8004fc8 <__aeabi_dmul>
 8007bf8:	4b97      	ldr	r3, [pc, #604]	; (8007e58 <_dtoa_r+0xa68>)
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	f7fd f832 	bl	8004c64 <__adddf3>
 8007c00:	9b06      	ldr	r3, [sp, #24]
 8007c02:	4606      	mov	r6, r0
 8007c04:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	f000 8162 	beq.w	8007ed2 <_dtoa_r+0xae2>
 8007c0e:	9b04      	ldr	r3, [sp, #16]
 8007c10:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8007c14:	9312      	str	r3, [sp, #72]	; 0x48
 8007c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	f000 8223 	beq.w	8008064 <_dtoa_r+0xc74>
 8007c1e:	4b8b      	ldr	r3, [pc, #556]	; (8007e4c <_dtoa_r+0xa5c>)
 8007c20:	498e      	ldr	r1, [pc, #568]	; (8007e5c <_dtoa_r+0xa6c>)
 8007c22:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8007c26:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007c2a:	2000      	movs	r0, #0
 8007c2c:	f7fd faf6 	bl	800521c <__aeabi_ddiv>
 8007c30:	4632      	mov	r2, r6
 8007c32:	463b      	mov	r3, r7
 8007c34:	f7fd f814 	bl	8004c60 <__aeabi_dsub>
 8007c38:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007c3c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007c40:	4639      	mov	r1, r7
 8007c42:	4630      	mov	r0, r6
 8007c44:	f001 fd62 	bl	800970c <__aeabi_d2iz>
 8007c48:	4605      	mov	r5, r0
 8007c4a:	f7fd f957 	bl	8004efc <__aeabi_i2d>
 8007c4e:	3530      	adds	r5, #48	; 0x30
 8007c50:	4602      	mov	r2, r0
 8007c52:	460b      	mov	r3, r1
 8007c54:	4630      	mov	r0, r6
 8007c56:	4639      	mov	r1, r7
 8007c58:	f7fd f802 	bl	8004c60 <__aeabi_dsub>
 8007c5c:	fa5f f885 	uxtb.w	r8, r5
 8007c60:	9d07      	ldr	r5, [sp, #28]
 8007c62:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007c66:	f885 8000 	strb.w	r8, [r5]
 8007c6a:	4606      	mov	r6, r0
 8007c6c:	460f      	mov	r7, r1
 8007c6e:	3501      	adds	r5, #1
 8007c70:	f7fd fc1c 	bl	80054ac <__aeabi_dcmplt>
 8007c74:	2800      	cmp	r0, #0
 8007c76:	f040 82a7 	bne.w	80081c8 <_dtoa_r+0xdd8>
 8007c7a:	4632      	mov	r2, r6
 8007c7c:	463b      	mov	r3, r7
 8007c7e:	2000      	movs	r0, #0
 8007c80:	4974      	ldr	r1, [pc, #464]	; (8007e54 <_dtoa_r+0xa64>)
 8007c82:	f7fc ffed 	bl	8004c60 <__aeabi_dsub>
 8007c86:	4602      	mov	r2, r0
 8007c88:	460b      	mov	r3, r1
 8007c8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007c8e:	f7fd fc2b 	bl	80054e8 <__aeabi_dcmpgt>
 8007c92:	2800      	cmp	r0, #0
 8007c94:	f040 82ad 	bne.w	80081f2 <_dtoa_r+0xe02>
 8007c98:	f1b9 0f01 	cmp.w	r9, #1
 8007c9c:	f340 8184 	ble.w	8007fa8 <_dtoa_r+0xbb8>
 8007ca0:	9b07      	ldr	r3, [sp, #28]
 8007ca2:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
 8007ca6:	f8cd b008 	str.w	fp, [sp, #8]
 8007caa:	4499      	add	r9, r3
 8007cac:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
 8007cb0:	46a0      	mov	r8, r4
 8007cb2:	e00d      	b.n	8007cd0 <_dtoa_r+0x8e0>
 8007cb4:	2000      	movs	r0, #0
 8007cb6:	4967      	ldr	r1, [pc, #412]	; (8007e54 <_dtoa_r+0xa64>)
 8007cb8:	f7fc ffd2 	bl	8004c60 <__aeabi_dsub>
 8007cbc:	4652      	mov	r2, sl
 8007cbe:	465b      	mov	r3, fp
 8007cc0:	f7fd fbf4 	bl	80054ac <__aeabi_dcmplt>
 8007cc4:	2800      	cmp	r0, #0
 8007cc6:	f040 828f 	bne.w	80081e8 <_dtoa_r+0xdf8>
 8007cca:	454d      	cmp	r5, r9
 8007ccc:	f000 8167 	beq.w	8007f9e <_dtoa_r+0xbae>
 8007cd0:	4650      	mov	r0, sl
 8007cd2:	4659      	mov	r1, fp
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	4b62      	ldr	r3, [pc, #392]	; (8007e60 <_dtoa_r+0xa70>)
 8007cd8:	f7fd f976 	bl	8004fc8 <__aeabi_dmul>
 8007cdc:	2200      	movs	r2, #0
 8007cde:	4b60      	ldr	r3, [pc, #384]	; (8007e60 <_dtoa_r+0xa70>)
 8007ce0:	4682      	mov	sl, r0
 8007ce2:	468b      	mov	fp, r1
 8007ce4:	4630      	mov	r0, r6
 8007ce6:	4639      	mov	r1, r7
 8007ce8:	f7fd f96e 	bl	8004fc8 <__aeabi_dmul>
 8007cec:	460f      	mov	r7, r1
 8007cee:	4606      	mov	r6, r0
 8007cf0:	f001 fd0c 	bl	800970c <__aeabi_d2iz>
 8007cf4:	4604      	mov	r4, r0
 8007cf6:	f7fd f901 	bl	8004efc <__aeabi_i2d>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	4630      	mov	r0, r6
 8007d00:	4639      	mov	r1, r7
 8007d02:	f7fc ffad 	bl	8004c60 <__aeabi_dsub>
 8007d06:	3430      	adds	r4, #48	; 0x30
 8007d08:	b2e4      	uxtb	r4, r4
 8007d0a:	4652      	mov	r2, sl
 8007d0c:	465b      	mov	r3, fp
 8007d0e:	f805 4b01 	strb.w	r4, [r5], #1
 8007d12:	4606      	mov	r6, r0
 8007d14:	460f      	mov	r7, r1
 8007d16:	f7fd fbc9 	bl	80054ac <__aeabi_dcmplt>
 8007d1a:	4632      	mov	r2, r6
 8007d1c:	463b      	mov	r3, r7
 8007d1e:	2800      	cmp	r0, #0
 8007d20:	d0c8      	beq.n	8007cb4 <_dtoa_r+0x8c4>
 8007d22:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007d24:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007d28:	9304      	str	r3, [sp, #16]
 8007d2a:	4644      	mov	r4, r8
 8007d2c:	e533      	b.n	8007796 <_dtoa_r+0x3a6>
 8007d2e:	2300      	movs	r3, #0
 8007d30:	9309      	str	r3, [sp, #36]	; 0x24
 8007d32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d34:	9a04      	ldr	r2, [sp, #16]
 8007d36:	4413      	add	r3, r2
 8007d38:	930c      	str	r3, [sp, #48]	; 0x30
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	9306      	str	r3, [sp, #24]
 8007d40:	f340 8100 	ble.w	8007f44 <_dtoa_r+0xb54>
 8007d44:	9e06      	ldr	r6, [sp, #24]
 8007d46:	4637      	mov	r7, r6
 8007d48:	e6ef      	b.n	8007b2a <_dtoa_r+0x73a>
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	9309      	str	r3, [sp, #36]	; 0x24
 8007d4e:	e6e4      	b.n	8007b1a <_dtoa_r+0x72a>
 8007d50:	9b06      	ldr	r3, [sp, #24]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	f73f ac6d 	bgt.w	8007632 <_dtoa_r+0x242>
 8007d58:	f040 80d3 	bne.w	8007f02 <_dtoa_r+0xb12>
 8007d5c:	4640      	mov	r0, r8
 8007d5e:	2200      	movs	r2, #0
 8007d60:	4b40      	ldr	r3, [pc, #256]	; (8007e64 <_dtoa_r+0xa74>)
 8007d62:	4649      	mov	r1, r9
 8007d64:	f7fd f930 	bl	8004fc8 <__aeabi_dmul>
 8007d68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d6c:	f7fd fbb2 	bl	80054d4 <__aeabi_dcmpge>
 8007d70:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8007d74:	4646      	mov	r6, r8
 8007d76:	2800      	cmp	r0, #0
 8007d78:	f000 808a 	beq.w	8007e90 <_dtoa_r+0xaa0>
 8007d7c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d7e:	9d07      	ldr	r5, [sp, #28]
 8007d80:	43db      	mvns	r3, r3
 8007d82:	9304      	str	r3, [sp, #16]
 8007d84:	4641      	mov	r1, r8
 8007d86:	4620      	mov	r0, r4
 8007d88:	f000 fd80 	bl	800888c <_Bfree>
 8007d8c:	2e00      	cmp	r6, #0
 8007d8e:	f47f ae2c 	bne.w	80079ea <_dtoa_r+0x5fa>
 8007d92:	e500      	b.n	8007796 <_dtoa_r+0x3a6>
 8007d94:	4659      	mov	r1, fp
 8007d96:	4620      	mov	r0, r4
 8007d98:	f000 feb6 	bl	8008b08 <__pow5mult>
 8007d9c:	4683      	mov	fp, r0
 8007d9e:	e557      	b.n	8007850 <_dtoa_r+0x460>
 8007da0:	9b02      	ldr	r3, [sp, #8]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	f47f ad66 	bne.w	8007874 <_dtoa_r+0x484>
 8007da8:	9b03      	ldr	r3, [sp, #12]
 8007daa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	f47f ad94 	bne.w	80078dc <_dtoa_r+0x4ec>
 8007db4:	9b03      	ldr	r3, [sp, #12]
 8007db6:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 8007dba:	0d3f      	lsrs	r7, r7, #20
 8007dbc:	053f      	lsls	r7, r7, #20
 8007dbe:	2f00      	cmp	r7, #0
 8007dc0:	f000 821b 	beq.w	80081fa <_dtoa_r+0xe0a>
 8007dc4:	9b05      	ldr	r3, [sp, #20]
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	9305      	str	r3, [sp, #20]
 8007dca:	f10a 0a01 	add.w	sl, sl, #1
 8007dce:	f04f 0901 	mov.w	r9, #1
 8007dd2:	e585      	b.n	80078e0 <_dtoa_r+0x4f0>
 8007dd4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007dd6:	2a00      	cmp	r2, #0
 8007dd8:	f000 81a7 	beq.w	800812a <_dtoa_r+0xd3a>
 8007ddc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007de0:	9f08      	ldr	r7, [sp, #32]
 8007de2:	9d05      	ldr	r5, [sp, #20]
 8007de4:	e4ff      	b.n	80077e6 <_dtoa_r+0x3f6>
 8007de6:	f000 fd5b 	bl	80088a0 <__multadd>
 8007dea:	4657      	mov	r7, sl
 8007dec:	4606      	mov	r6, r0
 8007dee:	4681      	mov	r9, r0
 8007df0:	e631      	b.n	8007a56 <_dtoa_r+0x666>
 8007df2:	4601      	mov	r1, r0
 8007df4:	4620      	mov	r0, r4
 8007df6:	f8cd c008 	str.w	ip, [sp, #8]
 8007dfa:	f000 fd47 	bl	800888c <_Bfree>
 8007dfe:	2201      	movs	r2, #1
 8007e00:	f8dd c008 	ldr.w	ip, [sp, #8]
 8007e04:	e654      	b.n	8007ab0 <_dtoa_r+0x6c0>
 8007e06:	4658      	mov	r0, fp
 8007e08:	4641      	mov	r1, r8
 8007e0a:	f000 ff23 	bl	8008c54 <__mcmp>
 8007e0e:	2800      	cmp	r0, #0
 8007e10:	f6bf ad91 	bge.w	8007936 <_dtoa_r+0x546>
 8007e14:	9f04      	ldr	r7, [sp, #16]
 8007e16:	4659      	mov	r1, fp
 8007e18:	2300      	movs	r3, #0
 8007e1a:	4620      	mov	r0, r4
 8007e1c:	220a      	movs	r2, #10
 8007e1e:	3f01      	subs	r7, #1
 8007e20:	9704      	str	r7, [sp, #16]
 8007e22:	f000 fd3d 	bl	80088a0 <__multadd>
 8007e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e28:	4683      	mov	fp, r0
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	f47f adf0 	bne.w	8007a10 <_dtoa_r+0x620>
 8007e30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	f340 81f5 	ble.w	8008222 <_dtoa_r+0xe32>
 8007e38:	9306      	str	r3, [sp, #24]
 8007e3a:	e583      	b.n	8007944 <_dtoa_r+0x554>
 8007e3c:	9807      	ldr	r0, [sp, #28]
 8007e3e:	f7ff bb0b 	b.w	8007458 <_dtoa_r+0x68>
 8007e42:	9b02      	ldr	r3, [sp, #8]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	f47f ad49 	bne.w	80078dc <_dtoa_r+0x4ec>
 8007e4a:	e7ad      	b.n	8007da8 <_dtoa_r+0x9b8>
 8007e4c:	08009c70 	.word	0x08009c70
 8007e50:	08009d38 	.word	0x08009d38
 8007e54:	3ff00000 	.word	0x3ff00000
 8007e58:	401c0000 	.word	0x401c0000
 8007e5c:	3fe00000 	.word	0x3fe00000
 8007e60:	40240000 	.word	0x40240000
 8007e64:	40140000 	.word	0x40140000
 8007e68:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007e6a:	2b02      	cmp	r3, #2
 8007e6c:	f77f ad67 	ble.w	800793e <_dtoa_r+0x54e>
 8007e70:	9b06      	ldr	r3, [sp, #24]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d182      	bne.n	8007d7c <_dtoa_r+0x98c>
 8007e76:	4641      	mov	r1, r8
 8007e78:	2205      	movs	r2, #5
 8007e7a:	4620      	mov	r0, r4
 8007e7c:	f000 fd10 	bl	80088a0 <__multadd>
 8007e80:	4680      	mov	r8, r0
 8007e82:	4641      	mov	r1, r8
 8007e84:	4658      	mov	r0, fp
 8007e86:	f000 fee5 	bl	8008c54 <__mcmp>
 8007e8a:	2800      	cmp	r0, #0
 8007e8c:	f77f af76 	ble.w	8007d7c <_dtoa_r+0x98c>
 8007e90:	9a04      	ldr	r2, [sp, #16]
 8007e92:	9907      	ldr	r1, [sp, #28]
 8007e94:	2331      	movs	r3, #49	; 0x31
 8007e96:	3201      	adds	r2, #1
 8007e98:	9204      	str	r2, [sp, #16]
 8007e9a:	700b      	strb	r3, [r1, #0]
 8007e9c:	1c4d      	adds	r5, r1, #1
 8007e9e:	e771      	b.n	8007d84 <_dtoa_r+0x994>
 8007ea0:	9a04      	ldr	r2, [sp, #16]
 8007ea2:	3201      	adds	r2, #1
 8007ea4:	9204      	str	r2, [sp, #16]
 8007ea6:	9a07      	ldr	r2, [sp, #28]
 8007ea8:	2331      	movs	r3, #49	; 0x31
 8007eaa:	7013      	strb	r3, [r2, #0]
 8007eac:	e58d      	b.n	80079ca <_dtoa_r+0x5da>
 8007eae:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007eb2:	9c05      	ldr	r4, [sp, #20]
 8007eb4:	e46f      	b.n	8007796 <_dtoa_r+0x3a6>
 8007eb6:	4640      	mov	r0, r8
 8007eb8:	f7fd f820 	bl	8004efc <__aeabi_i2d>
 8007ebc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ec0:	f7fd f882 	bl	8004fc8 <__aeabi_dmul>
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	4bc2      	ldr	r3, [pc, #776]	; (80081d0 <_dtoa_r+0xde0>)
 8007ec8:	f7fc fecc 	bl	8004c64 <__adddf3>
 8007ecc:	4606      	mov	r6, r0
 8007ece:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	4bbf      	ldr	r3, [pc, #764]	; (80081d4 <_dtoa_r+0xde4>)
 8007ed6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007eda:	f7fc fec1 	bl	8004c60 <__aeabi_dsub>
 8007ede:	4632      	mov	r2, r6
 8007ee0:	463b      	mov	r3, r7
 8007ee2:	4680      	mov	r8, r0
 8007ee4:	4689      	mov	r9, r1
 8007ee6:	f7fd faff 	bl	80054e8 <__aeabi_dcmpgt>
 8007eea:	2800      	cmp	r0, #0
 8007eec:	f040 80b6 	bne.w	800805c <_dtoa_r+0xc6c>
 8007ef0:	4632      	mov	r2, r6
 8007ef2:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007ef6:	4640      	mov	r0, r8
 8007ef8:	4649      	mov	r1, r9
 8007efa:	f7fd fad7 	bl	80054ac <__aeabi_dcmplt>
 8007efe:	2800      	cmp	r0, #0
 8007f00:	d052      	beq.n	8007fa8 <_dtoa_r+0xbb8>
 8007f02:	f04f 0800 	mov.w	r8, #0
 8007f06:	4646      	mov	r6, r8
 8007f08:	e738      	b.n	8007d7c <_dtoa_r+0x98c>
 8007f0a:	4659      	mov	r1, fp
 8007f0c:	9a08      	ldr	r2, [sp, #32]
 8007f0e:	4620      	mov	r0, r4
 8007f10:	f000 fdfa 	bl	8008b08 <__pow5mult>
 8007f14:	4683      	mov	fp, r0
 8007f16:	e49b      	b.n	8007850 <_dtoa_r+0x460>
 8007f18:	9b08      	ldr	r3, [sp, #32]
 8007f1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f1c:	9708      	str	r7, [sp, #32]
 8007f1e:	1afb      	subs	r3, r7, r3
 8007f20:	441a      	add	r2, r3
 8007f22:	920a      	str	r2, [sp, #40]	; 0x28
 8007f24:	2700      	movs	r7, #0
 8007f26:	e458      	b.n	80077da <_dtoa_r+0x3ea>
 8007f28:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 8007f2c:	f04f 0802 	mov.w	r8, #2
 8007f30:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007f34:	e633      	b.n	8007b9e <_dtoa_r+0x7ae>
 8007f36:	2601      	movs	r6, #1
 8007f38:	9621      	str	r6, [sp, #132]	; 0x84
 8007f3a:	960c      	str	r6, [sp, #48]	; 0x30
 8007f3c:	9606      	str	r6, [sp, #24]
 8007f3e:	2100      	movs	r1, #0
 8007f40:	6461      	str	r1, [r4, #68]	; 0x44
 8007f42:	e601      	b.n	8007b48 <_dtoa_r+0x758>
 8007f44:	461e      	mov	r6, r3
 8007f46:	e7fa      	b.n	8007f3e <_dtoa_r+0xb4e>
 8007f48:	2a00      	cmp	r2, #0
 8007f4a:	dd15      	ble.n	8007f78 <_dtoa_r+0xb88>
 8007f4c:	4659      	mov	r1, fp
 8007f4e:	2201      	movs	r2, #1
 8007f50:	4620      	mov	r0, r4
 8007f52:	f8cd c008 	str.w	ip, [sp, #8]
 8007f56:	f000 fe27 	bl	8008ba8 <__lshift>
 8007f5a:	4641      	mov	r1, r8
 8007f5c:	4683      	mov	fp, r0
 8007f5e:	f000 fe79 	bl	8008c54 <__mcmp>
 8007f62:	2800      	cmp	r0, #0
 8007f64:	f8dd c008 	ldr.w	ip, [sp, #8]
 8007f68:	f340 8154 	ble.w	8008214 <_dtoa_r+0xe24>
 8007f6c:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 8007f70:	f000 8111 	beq.w	8008196 <_dtoa_r+0xda6>
 8007f74:	f10c 0c01 	add.w	ip, ip, #1
 8007f78:	46b2      	mov	sl, r6
 8007f7a:	f887 c000 	strb.w	ip, [r7]
 8007f7e:	1c7d      	adds	r5, r7, #1
 8007f80:	464e      	mov	r6, r9
 8007f82:	e522      	b.n	80079ca <_dtoa_r+0x5da>
 8007f84:	d104      	bne.n	8007f90 <_dtoa_r+0xba0>
 8007f86:	f01c 0f01 	tst.w	ip, #1
 8007f8a:	d001      	beq.n	8007f90 <_dtoa_r+0xba0>
 8007f8c:	e50d      	b.n	80079aa <_dtoa_r+0x5ba>
 8007f8e:	4615      	mov	r5, r2
 8007f90:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007f94:	2b30      	cmp	r3, #48	; 0x30
 8007f96:	f105 32ff 	add.w	r2, r5, #4294967295
 8007f9a:	d0f8      	beq.n	8007f8e <_dtoa_r+0xb9e>
 8007f9c:	e515      	b.n	80079ca <_dtoa_r+0x5da>
 8007f9e:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8007fa2:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007fa6:	4644      	mov	r4, r8
 8007fa8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007fac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007fb0:	f7ff bb2e 	b.w	8007610 <_dtoa_r+0x220>
 8007fb4:	9b04      	ldr	r3, [sp, #16]
 8007fb6:	425d      	negs	r5, r3
 8007fb8:	2d00      	cmp	r5, #0
 8007fba:	f000 80bd 	beq.w	8008138 <_dtoa_r+0xd48>
 8007fbe:	4b86      	ldr	r3, [pc, #536]	; (80081d8 <_dtoa_r+0xde8>)
 8007fc0:	f005 020f 	and.w	r2, r5, #15
 8007fc4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fcc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007fd0:	f7fc fffa 	bl	8004fc8 <__aeabi_dmul>
 8007fd4:	112d      	asrs	r5, r5, #4
 8007fd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fda:	f000 8127 	beq.w	800822c <_dtoa_r+0xe3c>
 8007fde:	4e7f      	ldr	r6, [pc, #508]	; (80081dc <_dtoa_r+0xdec>)
 8007fe0:	f04f 0802 	mov.w	r8, #2
 8007fe4:	07eb      	lsls	r3, r5, #31
 8007fe6:	d505      	bpl.n	8007ff4 <_dtoa_r+0xc04>
 8007fe8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007fec:	f7fc ffec 	bl	8004fc8 <__aeabi_dmul>
 8007ff0:	f108 0801 	add.w	r8, r8, #1
 8007ff4:	106d      	asrs	r5, r5, #1
 8007ff6:	f106 0608 	add.w	r6, r6, #8
 8007ffa:	d1f3      	bne.n	8007fe4 <_dtoa_r+0xbf4>
 8007ffc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008000:	e5e8      	b.n	8007bd4 <_dtoa_r+0x7e4>
 8008002:	9a04      	ldr	r2, [sp, #16]
 8008004:	3201      	adds	r2, #1
 8008006:	9204      	str	r2, [sp, #16]
 8008008:	9a07      	ldr	r2, [sp, #28]
 800800a:	2330      	movs	r3, #48	; 0x30
 800800c:	7013      	strb	r3, [r2, #0]
 800800e:	2331      	movs	r3, #49	; 0x31
 8008010:	7013      	strb	r3, [r2, #0]
 8008012:	f7ff bbc0 	b.w	8007796 <_dtoa_r+0x3a6>
 8008016:	6871      	ldr	r1, [r6, #4]
 8008018:	4620      	mov	r0, r4
 800801a:	f000 fc11 	bl	8008840 <_Balloc>
 800801e:	6933      	ldr	r3, [r6, #16]
 8008020:	1c9a      	adds	r2, r3, #2
 8008022:	4605      	mov	r5, r0
 8008024:	0092      	lsls	r2, r2, #2
 8008026:	f106 010c 	add.w	r1, r6, #12
 800802a:	300c      	adds	r0, #12
 800802c:	f7fd fdd0 	bl	8005bd0 <memcpy>
 8008030:	4620      	mov	r0, r4
 8008032:	4629      	mov	r1, r5
 8008034:	2201      	movs	r2, #1
 8008036:	f000 fdb7 	bl	8008ba8 <__lshift>
 800803a:	4681      	mov	r9, r0
 800803c:	e501      	b.n	8007a42 <_dtoa_r+0x652>
 800803e:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 8008042:	f000 80a8 	beq.w	8008196 <_dtoa_r+0xda6>
 8008046:	f10c 0c01 	add.w	ip, ip, #1
 800804a:	46b2      	mov	sl, r6
 800804c:	f887 c000 	strb.w	ip, [r7]
 8008050:	1c7d      	adds	r5, r7, #1
 8008052:	464e      	mov	r6, r9
 8008054:	e4b9      	b.n	80079ca <_dtoa_r+0x5da>
 8008056:	46b2      	mov	sl, r6
 8008058:	464e      	mov	r6, r9
 800805a:	e496      	b.n	800798a <_dtoa_r+0x59a>
 800805c:	f04f 0800 	mov.w	r8, #0
 8008060:	4646      	mov	r6, r8
 8008062:	e715      	b.n	8007e90 <_dtoa_r+0xaa0>
 8008064:	495c      	ldr	r1, [pc, #368]	; (80081d8 <_dtoa_r+0xde8>)
 8008066:	f109 33ff 	add.w	r3, r9, #4294967295
 800806a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800806e:	4632      	mov	r2, r6
 8008070:	9313      	str	r3, [sp, #76]	; 0x4c
 8008072:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008076:	463b      	mov	r3, r7
 8008078:	f7fc ffa6 	bl	8004fc8 <__aeabi_dmul>
 800807c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008080:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008084:	4639      	mov	r1, r7
 8008086:	4630      	mov	r0, r6
 8008088:	f001 fb40 	bl	800970c <__aeabi_d2iz>
 800808c:	4605      	mov	r5, r0
 800808e:	f7fc ff35 	bl	8004efc <__aeabi_i2d>
 8008092:	4602      	mov	r2, r0
 8008094:	460b      	mov	r3, r1
 8008096:	4630      	mov	r0, r6
 8008098:	4639      	mov	r1, r7
 800809a:	f7fc fde1 	bl	8004c60 <__aeabi_dsub>
 800809e:	9a07      	ldr	r2, [sp, #28]
 80080a0:	3530      	adds	r5, #48	; 0x30
 80080a2:	f1b9 0f01 	cmp.w	r9, #1
 80080a6:	7015      	strb	r5, [r2, #0]
 80080a8:	4606      	mov	r6, r0
 80080aa:	460f      	mov	r7, r1
 80080ac:	f102 0501 	add.w	r5, r2, #1
 80080b0:	d023      	beq.n	80080fa <_dtoa_r+0xd0a>
 80080b2:	9b07      	ldr	r3, [sp, #28]
 80080b4:	f8cd a008 	str.w	sl, [sp, #8]
 80080b8:	444b      	add	r3, r9
 80080ba:	465e      	mov	r6, fp
 80080bc:	469a      	mov	sl, r3
 80080be:	46ab      	mov	fp, r5
 80080c0:	2200      	movs	r2, #0
 80080c2:	4b47      	ldr	r3, [pc, #284]	; (80081e0 <_dtoa_r+0xdf0>)
 80080c4:	f7fc ff80 	bl	8004fc8 <__aeabi_dmul>
 80080c8:	4689      	mov	r9, r1
 80080ca:	4680      	mov	r8, r0
 80080cc:	f001 fb1e 	bl	800970c <__aeabi_d2iz>
 80080d0:	4607      	mov	r7, r0
 80080d2:	f7fc ff13 	bl	8004efc <__aeabi_i2d>
 80080d6:	3730      	adds	r7, #48	; 0x30
 80080d8:	4602      	mov	r2, r0
 80080da:	460b      	mov	r3, r1
 80080dc:	4640      	mov	r0, r8
 80080de:	4649      	mov	r1, r9
 80080e0:	f7fc fdbe 	bl	8004c60 <__aeabi_dsub>
 80080e4:	f80b 7b01 	strb.w	r7, [fp], #1
 80080e8:	45d3      	cmp	fp, sl
 80080ea:	d1e9      	bne.n	80080c0 <_dtoa_r+0xcd0>
 80080ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80080ee:	f8dd a008 	ldr.w	sl, [sp, #8]
 80080f2:	46b3      	mov	fp, r6
 80080f4:	460f      	mov	r7, r1
 80080f6:	4606      	mov	r6, r0
 80080f8:	441d      	add	r5, r3
 80080fa:	2200      	movs	r2, #0
 80080fc:	4b39      	ldr	r3, [pc, #228]	; (80081e4 <_dtoa_r+0xdf4>)
 80080fe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008102:	f7fc fdaf 	bl	8004c64 <__adddf3>
 8008106:	4632      	mov	r2, r6
 8008108:	463b      	mov	r3, r7
 800810a:	f7fd f9cf 	bl	80054ac <__aeabi_dcmplt>
 800810e:	2800      	cmp	r0, #0
 8008110:	d047      	beq.n	80081a2 <_dtoa_r+0xdb2>
 8008112:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008114:	9304      	str	r3, [sp, #16]
 8008116:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 800811a:	f7ff bb2a 	b.w	8007772 <_dtoa_r+0x382>
 800811e:	9b05      	ldr	r3, [sp, #20]
 8008120:	9a06      	ldr	r2, [sp, #24]
 8008122:	1a9d      	subs	r5, r3, r2
 8008124:	2300      	movs	r3, #0
 8008126:	f7ff bb5e 	b.w	80077e6 <_dtoa_r+0x3f6>
 800812a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800812c:	9f08      	ldr	r7, [sp, #32]
 800812e:	9d05      	ldr	r5, [sp, #20]
 8008130:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008134:	f7ff bb57 	b.w	80077e6 <_dtoa_r+0x3f6>
 8008138:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 800813c:	f04f 0802 	mov.w	r8, #2
 8008140:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008144:	e546      	b.n	8007bd4 <_dtoa_r+0x7e4>
 8008146:	9b06      	ldr	r3, [sp, #24]
 8008148:	2b00      	cmp	r3, #0
 800814a:	f43f aeb4 	beq.w	8007eb6 <_dtoa_r+0xac6>
 800814e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008150:	2d00      	cmp	r5, #0
 8008152:	f77f af29 	ble.w	8007fa8 <_dtoa_r+0xbb8>
 8008156:	2200      	movs	r2, #0
 8008158:	4b21      	ldr	r3, [pc, #132]	; (80081e0 <_dtoa_r+0xdf0>)
 800815a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800815e:	f7fc ff33 	bl	8004fc8 <__aeabi_dmul>
 8008162:	4606      	mov	r6, r0
 8008164:	460f      	mov	r7, r1
 8008166:	f108 0001 	add.w	r0, r8, #1
 800816a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800816e:	f7fc fec5 	bl	8004efc <__aeabi_i2d>
 8008172:	4602      	mov	r2, r0
 8008174:	460b      	mov	r3, r1
 8008176:	4630      	mov	r0, r6
 8008178:	4639      	mov	r1, r7
 800817a:	f7fc ff25 	bl	8004fc8 <__aeabi_dmul>
 800817e:	4b14      	ldr	r3, [pc, #80]	; (80081d0 <_dtoa_r+0xde0>)
 8008180:	2200      	movs	r2, #0
 8008182:	f7fc fd6f 	bl	8004c64 <__adddf3>
 8008186:	9b04      	ldr	r3, [sp, #16]
 8008188:	3b01      	subs	r3, #1
 800818a:	4606      	mov	r6, r0
 800818c:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8008190:	9312      	str	r3, [sp, #72]	; 0x48
 8008192:	46a9      	mov	r9, r5
 8008194:	e53f      	b.n	8007c16 <_dtoa_r+0x826>
 8008196:	2239      	movs	r2, #57	; 0x39
 8008198:	46b2      	mov	sl, r6
 800819a:	703a      	strb	r2, [r7, #0]
 800819c:	464e      	mov	r6, r9
 800819e:	1c7d      	adds	r5, r7, #1
 80081a0:	e405      	b.n	80079ae <_dtoa_r+0x5be>
 80081a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80081a6:	2000      	movs	r0, #0
 80081a8:	490e      	ldr	r1, [pc, #56]	; (80081e4 <_dtoa_r+0xdf4>)
 80081aa:	f7fc fd59 	bl	8004c60 <__aeabi_dsub>
 80081ae:	4632      	mov	r2, r6
 80081b0:	463b      	mov	r3, r7
 80081b2:	f7fd f999 	bl	80054e8 <__aeabi_dcmpgt>
 80081b6:	b908      	cbnz	r0, 80081bc <_dtoa_r+0xdcc>
 80081b8:	e6f6      	b.n	8007fa8 <_dtoa_r+0xbb8>
 80081ba:	4615      	mov	r5, r2
 80081bc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80081c0:	2b30      	cmp	r3, #48	; 0x30
 80081c2:	f105 32ff 	add.w	r2, r5, #4294967295
 80081c6:	d0f8      	beq.n	80081ba <_dtoa_r+0xdca>
 80081c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80081ca:	9304      	str	r3, [sp, #16]
 80081cc:	f7ff bae3 	b.w	8007796 <_dtoa_r+0x3a6>
 80081d0:	401c0000 	.word	0x401c0000
 80081d4:	40140000 	.word	0x40140000
 80081d8:	08009c70 	.word	0x08009c70
 80081dc:	08009d38 	.word	0x08009d38
 80081e0:	40240000 	.word	0x40240000
 80081e4:	3fe00000 	.word	0x3fe00000
 80081e8:	4643      	mov	r3, r8
 80081ea:	f8dd b008 	ldr.w	fp, [sp, #8]
 80081ee:	46a0      	mov	r8, r4
 80081f0:	461c      	mov	r4, r3
 80081f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80081f4:	9304      	str	r3, [sp, #16]
 80081f6:	f7ff babc 	b.w	8007772 <_dtoa_r+0x382>
 80081fa:	46b9      	mov	r9, r7
 80081fc:	f7ff bb70 	b.w	80078e0 <_dtoa_r+0x4f0>
 8008200:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 8008204:	d0c7      	beq.n	8008196 <_dtoa_r+0xda6>
 8008206:	f1ba 0f00 	cmp.w	sl, #0
 800820a:	f77f aeb5 	ble.w	8007f78 <_dtoa_r+0xb88>
 800820e:	f105 0c31 	add.w	ip, r5, #49	; 0x31
 8008212:	e6b1      	b.n	8007f78 <_dtoa_r+0xb88>
 8008214:	f47f aeb0 	bne.w	8007f78 <_dtoa_r+0xb88>
 8008218:	f01c 0f01 	tst.w	ip, #1
 800821c:	f43f aeac 	beq.w	8007f78 <_dtoa_r+0xb88>
 8008220:	e6a4      	b.n	8007f6c <_dtoa_r+0xb7c>
 8008222:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008224:	2b02      	cmp	r3, #2
 8008226:	dc04      	bgt.n	8008232 <_dtoa_r+0xe42>
 8008228:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800822a:	e605      	b.n	8007e38 <_dtoa_r+0xa48>
 800822c:	f04f 0802 	mov.w	r8, #2
 8008230:	e4d0      	b.n	8007bd4 <_dtoa_r+0x7e4>
 8008232:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008234:	9306      	str	r3, [sp, #24]
 8008236:	e61b      	b.n	8007e70 <_dtoa_r+0xa80>
 8008238:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800823a:	2b02      	cmp	r3, #2
 800823c:	dcf9      	bgt.n	8008232 <_dtoa_r+0xe42>
 800823e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008240:	f7ff bbf1 	b.w	8007a26 <_dtoa_r+0x636>
 8008244:	2500      	movs	r5, #0
 8008246:	6465      	str	r5, [r4, #68]	; 0x44
 8008248:	4629      	mov	r1, r5
 800824a:	4620      	mov	r0, r4
 800824c:	f000 faf8 	bl	8008840 <_Balloc>
 8008250:	f04f 33ff 	mov.w	r3, #4294967295
 8008254:	9306      	str	r3, [sp, #24]
 8008256:	930c      	str	r3, [sp, #48]	; 0x30
 8008258:	2301      	movs	r3, #1
 800825a:	9007      	str	r0, [sp, #28]
 800825c:	9521      	str	r5, [sp, #132]	; 0x84
 800825e:	6420      	str	r0, [r4, #64]	; 0x40
 8008260:	9309      	str	r3, [sp, #36]	; 0x24
 8008262:	f7ff b9d5 	b.w	8007610 <_dtoa_r+0x220>
 8008266:	f43f ab50 	beq.w	800790a <_dtoa_r+0x51a>
 800826a:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 800826e:	f7ff bb47 	b.w	8007900 <_dtoa_r+0x510>
 8008272:	2301      	movs	r3, #1
 8008274:	9309      	str	r3, [sp, #36]	; 0x24
 8008276:	e55c      	b.n	8007d32 <_dtoa_r+0x942>
 8008278:	2501      	movs	r5, #1
 800827a:	f7ff b993 	b.w	80075a4 <_dtoa_r+0x1b4>
 800827e:	bf00      	nop

08008280 <_localeconv_r>:
 8008280:	4800      	ldr	r0, [pc, #0]	; (8008284 <_localeconv_r+0x4>)
 8008282:	4770      	bx	lr
 8008284:	20000764 	.word	0x20000764

08008288 <_malloc_r>:
 8008288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800828c:	f101 050b 	add.w	r5, r1, #11
 8008290:	2d16      	cmp	r5, #22
 8008292:	b083      	sub	sp, #12
 8008294:	4606      	mov	r6, r0
 8008296:	d927      	bls.n	80082e8 <_malloc_r+0x60>
 8008298:	f035 0507 	bics.w	r5, r5, #7
 800829c:	f100 80b6 	bmi.w	800840c <_malloc_r+0x184>
 80082a0:	42a9      	cmp	r1, r5
 80082a2:	f200 80b3 	bhi.w	800840c <_malloc_r+0x184>
 80082a6:	f000 fac7 	bl	8008838 <__malloc_lock>
 80082aa:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 80082ae:	d222      	bcs.n	80082f6 <_malloc_r+0x6e>
 80082b0:	4fc2      	ldr	r7, [pc, #776]	; (80085bc <_malloc_r+0x334>)
 80082b2:	08e8      	lsrs	r0, r5, #3
 80082b4:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
 80082b8:	68dc      	ldr	r4, [r3, #12]
 80082ba:	429c      	cmp	r4, r3
 80082bc:	f000 81c9 	beq.w	8008652 <_malloc_r+0x3ca>
 80082c0:	6863      	ldr	r3, [r4, #4]
 80082c2:	68e1      	ldr	r1, [r4, #12]
 80082c4:	68a5      	ldr	r5, [r4, #8]
 80082c6:	f023 0303 	bic.w	r3, r3, #3
 80082ca:	4423      	add	r3, r4
 80082cc:	4630      	mov	r0, r6
 80082ce:	685a      	ldr	r2, [r3, #4]
 80082d0:	60e9      	str	r1, [r5, #12]
 80082d2:	f042 0201 	orr.w	r2, r2, #1
 80082d6:	608d      	str	r5, [r1, #8]
 80082d8:	605a      	str	r2, [r3, #4]
 80082da:	f000 faaf 	bl	800883c <__malloc_unlock>
 80082de:	3408      	adds	r4, #8
 80082e0:	4620      	mov	r0, r4
 80082e2:	b003      	add	sp, #12
 80082e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082e8:	2910      	cmp	r1, #16
 80082ea:	f200 808f 	bhi.w	800840c <_malloc_r+0x184>
 80082ee:	f000 faa3 	bl	8008838 <__malloc_lock>
 80082f2:	2510      	movs	r5, #16
 80082f4:	e7dc      	b.n	80082b0 <_malloc_r+0x28>
 80082f6:	0a68      	lsrs	r0, r5, #9
 80082f8:	f000 808f 	beq.w	800841a <_malloc_r+0x192>
 80082fc:	2804      	cmp	r0, #4
 80082fe:	f200 8154 	bhi.w	80085aa <_malloc_r+0x322>
 8008302:	09a8      	lsrs	r0, r5, #6
 8008304:	3038      	adds	r0, #56	; 0x38
 8008306:	0041      	lsls	r1, r0, #1
 8008308:	4fac      	ldr	r7, [pc, #688]	; (80085bc <_malloc_r+0x334>)
 800830a:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 800830e:	68cc      	ldr	r4, [r1, #12]
 8008310:	42a1      	cmp	r1, r4
 8008312:	d106      	bne.n	8008322 <_malloc_r+0x9a>
 8008314:	e00c      	b.n	8008330 <_malloc_r+0xa8>
 8008316:	2a00      	cmp	r2, #0
 8008318:	f280 8082 	bge.w	8008420 <_malloc_r+0x198>
 800831c:	68e4      	ldr	r4, [r4, #12]
 800831e:	42a1      	cmp	r1, r4
 8008320:	d006      	beq.n	8008330 <_malloc_r+0xa8>
 8008322:	6863      	ldr	r3, [r4, #4]
 8008324:	f023 0303 	bic.w	r3, r3, #3
 8008328:	1b5a      	subs	r2, r3, r5
 800832a:	2a0f      	cmp	r2, #15
 800832c:	ddf3      	ble.n	8008316 <_malloc_r+0x8e>
 800832e:	3801      	subs	r0, #1
 8008330:	3001      	adds	r0, #1
 8008332:	49a2      	ldr	r1, [pc, #648]	; (80085bc <_malloc_r+0x334>)
 8008334:	693c      	ldr	r4, [r7, #16]
 8008336:	f101 0e08 	add.w	lr, r1, #8
 800833a:	4574      	cmp	r4, lr
 800833c:	f000 817e 	beq.w	800863c <_malloc_r+0x3b4>
 8008340:	6863      	ldr	r3, [r4, #4]
 8008342:	f023 0303 	bic.w	r3, r3, #3
 8008346:	1b5a      	subs	r2, r3, r5
 8008348:	2a0f      	cmp	r2, #15
 800834a:	f300 8164 	bgt.w	8008616 <_malloc_r+0x38e>
 800834e:	2a00      	cmp	r2, #0
 8008350:	f8c1 e014 	str.w	lr, [r1, #20]
 8008354:	f8c1 e010 	str.w	lr, [r1, #16]
 8008358:	da73      	bge.n	8008442 <_malloc_r+0x1ba>
 800835a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800835e:	f080 8139 	bcs.w	80085d4 <_malloc_r+0x34c>
 8008362:	08db      	lsrs	r3, r3, #3
 8008364:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
 8008368:	ea4f 0ca3 	mov.w	ip, r3, asr #2
 800836c:	684a      	ldr	r2, [r1, #4]
 800836e:	f8d8 9008 	ldr.w	r9, [r8, #8]
 8008372:	f8c4 9008 	str.w	r9, [r4, #8]
 8008376:	2301      	movs	r3, #1
 8008378:	fa03 f30c 	lsl.w	r3, r3, ip
 800837c:	4313      	orrs	r3, r2
 800837e:	f8c4 800c 	str.w	r8, [r4, #12]
 8008382:	604b      	str	r3, [r1, #4]
 8008384:	f8c8 4008 	str.w	r4, [r8, #8]
 8008388:	f8c9 400c 	str.w	r4, [r9, #12]
 800838c:	1082      	asrs	r2, r0, #2
 800838e:	2401      	movs	r4, #1
 8008390:	4094      	lsls	r4, r2
 8008392:	429c      	cmp	r4, r3
 8008394:	d862      	bhi.n	800845c <_malloc_r+0x1d4>
 8008396:	4223      	tst	r3, r4
 8008398:	d106      	bne.n	80083a8 <_malloc_r+0x120>
 800839a:	f020 0003 	bic.w	r0, r0, #3
 800839e:	0064      	lsls	r4, r4, #1
 80083a0:	4223      	tst	r3, r4
 80083a2:	f100 0004 	add.w	r0, r0, #4
 80083a6:	d0fa      	beq.n	800839e <_malloc_r+0x116>
 80083a8:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
 80083ac:	46c4      	mov	ip, r8
 80083ae:	4681      	mov	r9, r0
 80083b0:	f8dc 300c 	ldr.w	r3, [ip, #12]
 80083b4:	459c      	cmp	ip, r3
 80083b6:	d107      	bne.n	80083c8 <_malloc_r+0x140>
 80083b8:	e142      	b.n	8008640 <_malloc_r+0x3b8>
 80083ba:	2900      	cmp	r1, #0
 80083bc:	f280 8152 	bge.w	8008664 <_malloc_r+0x3dc>
 80083c0:	68db      	ldr	r3, [r3, #12]
 80083c2:	459c      	cmp	ip, r3
 80083c4:	f000 813c 	beq.w	8008640 <_malloc_r+0x3b8>
 80083c8:	685a      	ldr	r2, [r3, #4]
 80083ca:	f022 0203 	bic.w	r2, r2, #3
 80083ce:	1b51      	subs	r1, r2, r5
 80083d0:	290f      	cmp	r1, #15
 80083d2:	ddf2      	ble.n	80083ba <_malloc_r+0x132>
 80083d4:	461c      	mov	r4, r3
 80083d6:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 80083da:	f854 8f08 	ldr.w	r8, [r4, #8]!
 80083de:	195a      	adds	r2, r3, r5
 80083e0:	f045 0901 	orr.w	r9, r5, #1
 80083e4:	f041 0501 	orr.w	r5, r1, #1
 80083e8:	f8c3 9004 	str.w	r9, [r3, #4]
 80083ec:	4630      	mov	r0, r6
 80083ee:	f8c8 c00c 	str.w	ip, [r8, #12]
 80083f2:	f8cc 8008 	str.w	r8, [ip, #8]
 80083f6:	617a      	str	r2, [r7, #20]
 80083f8:	613a      	str	r2, [r7, #16]
 80083fa:	f8c2 e00c 	str.w	lr, [r2, #12]
 80083fe:	f8c2 e008 	str.w	lr, [r2, #8]
 8008402:	6055      	str	r5, [r2, #4]
 8008404:	5051      	str	r1, [r2, r1]
 8008406:	f000 fa19 	bl	800883c <__malloc_unlock>
 800840a:	e769      	b.n	80082e0 <_malloc_r+0x58>
 800840c:	2400      	movs	r4, #0
 800840e:	230c      	movs	r3, #12
 8008410:	4620      	mov	r0, r4
 8008412:	6033      	str	r3, [r6, #0]
 8008414:	b003      	add	sp, #12
 8008416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800841a:	217e      	movs	r1, #126	; 0x7e
 800841c:	203f      	movs	r0, #63	; 0x3f
 800841e:	e773      	b.n	8008308 <_malloc_r+0x80>
 8008420:	4423      	add	r3, r4
 8008422:	68e1      	ldr	r1, [r4, #12]
 8008424:	685a      	ldr	r2, [r3, #4]
 8008426:	68a5      	ldr	r5, [r4, #8]
 8008428:	f042 0201 	orr.w	r2, r2, #1
 800842c:	60e9      	str	r1, [r5, #12]
 800842e:	4630      	mov	r0, r6
 8008430:	608d      	str	r5, [r1, #8]
 8008432:	605a      	str	r2, [r3, #4]
 8008434:	f000 fa02 	bl	800883c <__malloc_unlock>
 8008438:	3408      	adds	r4, #8
 800843a:	4620      	mov	r0, r4
 800843c:	b003      	add	sp, #12
 800843e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008442:	4423      	add	r3, r4
 8008444:	4630      	mov	r0, r6
 8008446:	685a      	ldr	r2, [r3, #4]
 8008448:	f042 0201 	orr.w	r2, r2, #1
 800844c:	605a      	str	r2, [r3, #4]
 800844e:	f000 f9f5 	bl	800883c <__malloc_unlock>
 8008452:	3408      	adds	r4, #8
 8008454:	4620      	mov	r0, r4
 8008456:	b003      	add	sp, #12
 8008458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800845c:	68bc      	ldr	r4, [r7, #8]
 800845e:	6863      	ldr	r3, [r4, #4]
 8008460:	f023 0803 	bic.w	r8, r3, #3
 8008464:	4545      	cmp	r5, r8
 8008466:	d804      	bhi.n	8008472 <_malloc_r+0x1ea>
 8008468:	ebc5 0308 	rsb	r3, r5, r8
 800846c:	2b0f      	cmp	r3, #15
 800846e:	f300 808c 	bgt.w	800858a <_malloc_r+0x302>
 8008472:	4b53      	ldr	r3, [pc, #332]	; (80085c0 <_malloc_r+0x338>)
 8008474:	f8df a158 	ldr.w	sl, [pc, #344]	; 80085d0 <_malloc_r+0x348>
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	f8da 3000 	ldr.w	r3, [sl]
 800847e:	3301      	adds	r3, #1
 8008480:	442a      	add	r2, r5
 8008482:	eb04 0b08 	add.w	fp, r4, r8
 8008486:	f000 8150 	beq.w	800872a <_malloc_r+0x4a2>
 800848a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800848e:	320f      	adds	r2, #15
 8008490:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8008494:	f022 020f 	bic.w	r2, r2, #15
 8008498:	4611      	mov	r1, r2
 800849a:	4630      	mov	r0, r6
 800849c:	9201      	str	r2, [sp, #4]
 800849e:	f000 fcc3 	bl	8008e28 <_sbrk_r>
 80084a2:	f1b0 3fff 	cmp.w	r0, #4294967295
 80084a6:	4681      	mov	r9, r0
 80084a8:	9a01      	ldr	r2, [sp, #4]
 80084aa:	f000 80f5 	beq.w	8008698 <_malloc_r+0x410>
 80084ae:	4583      	cmp	fp, r0
 80084b0:	f200 80ef 	bhi.w	8008692 <_malloc_r+0x40a>
 80084b4:	4b43      	ldr	r3, [pc, #268]	; (80085c4 <_malloc_r+0x33c>)
 80084b6:	6819      	ldr	r1, [r3, #0]
 80084b8:	45cb      	cmp	fp, r9
 80084ba:	4411      	add	r1, r2
 80084bc:	6019      	str	r1, [r3, #0]
 80084be:	f000 813d 	beq.w	800873c <_malloc_r+0x4b4>
 80084c2:	f8da 0000 	ldr.w	r0, [sl]
 80084c6:	f8df e108 	ldr.w	lr, [pc, #264]	; 80085d0 <_malloc_r+0x348>
 80084ca:	3001      	adds	r0, #1
 80084cc:	bf1b      	ittet	ne
 80084ce:	ebcb 0b09 	rsbne	fp, fp, r9
 80084d2:	4459      	addne	r1, fp
 80084d4:	f8ce 9000 	streq.w	r9, [lr]
 80084d8:	6019      	strne	r1, [r3, #0]
 80084da:	f019 0107 	ands.w	r1, r9, #7
 80084de:	f000 8107 	beq.w	80086f0 <_malloc_r+0x468>
 80084e2:	f1c1 0008 	rsb	r0, r1, #8
 80084e6:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 80084ea:	4481      	add	r9, r0
 80084ec:	3108      	adds	r1, #8
 80084ee:	444a      	add	r2, r9
 80084f0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80084f4:	ebc2 0a01 	rsb	sl, r2, r1
 80084f8:	4651      	mov	r1, sl
 80084fa:	4630      	mov	r0, r6
 80084fc:	9301      	str	r3, [sp, #4]
 80084fe:	f000 fc93 	bl	8008e28 <_sbrk_r>
 8008502:	1c43      	adds	r3, r0, #1
 8008504:	9b01      	ldr	r3, [sp, #4]
 8008506:	f000 8127 	beq.w	8008758 <_malloc_r+0x4d0>
 800850a:	ebc9 0200 	rsb	r2, r9, r0
 800850e:	4452      	add	r2, sl
 8008510:	f042 0201 	orr.w	r2, r2, #1
 8008514:	6819      	ldr	r1, [r3, #0]
 8008516:	f8c7 9008 	str.w	r9, [r7, #8]
 800851a:	4451      	add	r1, sl
 800851c:	42bc      	cmp	r4, r7
 800851e:	f8c9 2004 	str.w	r2, [r9, #4]
 8008522:	6019      	str	r1, [r3, #0]
 8008524:	f8df a09c 	ldr.w	sl, [pc, #156]	; 80085c4 <_malloc_r+0x33c>
 8008528:	d016      	beq.n	8008558 <_malloc_r+0x2d0>
 800852a:	f1b8 0f0f 	cmp.w	r8, #15
 800852e:	f240 80e2 	bls.w	80086f6 <_malloc_r+0x46e>
 8008532:	6862      	ldr	r2, [r4, #4]
 8008534:	f1a8 030c 	sub.w	r3, r8, #12
 8008538:	f023 0307 	bic.w	r3, r3, #7
 800853c:	18e0      	adds	r0, r4, r3
 800853e:	f002 0201 	and.w	r2, r2, #1
 8008542:	f04f 0e05 	mov.w	lr, #5
 8008546:	431a      	orrs	r2, r3
 8008548:	2b0f      	cmp	r3, #15
 800854a:	6062      	str	r2, [r4, #4]
 800854c:	f8c0 e004 	str.w	lr, [r0, #4]
 8008550:	f8c0 e008 	str.w	lr, [r0, #8]
 8008554:	f200 8104 	bhi.w	8008760 <_malloc_r+0x4d8>
 8008558:	4b1b      	ldr	r3, [pc, #108]	; (80085c8 <_malloc_r+0x340>)
 800855a:	68bc      	ldr	r4, [r7, #8]
 800855c:	681a      	ldr	r2, [r3, #0]
 800855e:	4291      	cmp	r1, r2
 8008560:	bf88      	it	hi
 8008562:	6019      	strhi	r1, [r3, #0]
 8008564:	4b19      	ldr	r3, [pc, #100]	; (80085cc <_malloc_r+0x344>)
 8008566:	681a      	ldr	r2, [r3, #0]
 8008568:	4291      	cmp	r1, r2
 800856a:	6862      	ldr	r2, [r4, #4]
 800856c:	bf88      	it	hi
 800856e:	6019      	strhi	r1, [r3, #0]
 8008570:	f022 0203 	bic.w	r2, r2, #3
 8008574:	4295      	cmp	r5, r2
 8008576:	eba2 0305 	sub.w	r3, r2, r5
 800857a:	d801      	bhi.n	8008580 <_malloc_r+0x2f8>
 800857c:	2b0f      	cmp	r3, #15
 800857e:	dc04      	bgt.n	800858a <_malloc_r+0x302>
 8008580:	4630      	mov	r0, r6
 8008582:	f000 f95b 	bl	800883c <__malloc_unlock>
 8008586:	2400      	movs	r4, #0
 8008588:	e6aa      	b.n	80082e0 <_malloc_r+0x58>
 800858a:	1962      	adds	r2, r4, r5
 800858c:	f043 0301 	orr.w	r3, r3, #1
 8008590:	f045 0501 	orr.w	r5, r5, #1
 8008594:	6065      	str	r5, [r4, #4]
 8008596:	4630      	mov	r0, r6
 8008598:	60ba      	str	r2, [r7, #8]
 800859a:	6053      	str	r3, [r2, #4]
 800859c:	f000 f94e 	bl	800883c <__malloc_unlock>
 80085a0:	3408      	adds	r4, #8
 80085a2:	4620      	mov	r0, r4
 80085a4:	b003      	add	sp, #12
 80085a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085aa:	2814      	cmp	r0, #20
 80085ac:	d969      	bls.n	8008682 <_malloc_r+0x3fa>
 80085ae:	2854      	cmp	r0, #84	; 0x54
 80085b0:	f200 8097 	bhi.w	80086e2 <_malloc_r+0x45a>
 80085b4:	0b28      	lsrs	r0, r5, #12
 80085b6:	306e      	adds	r0, #110	; 0x6e
 80085b8:	0041      	lsls	r1, r0, #1
 80085ba:	e6a5      	b.n	8008308 <_malloc_r+0x80>
 80085bc:	2000079c 	.word	0x2000079c
 80085c0:	20000bec 	.word	0x20000bec
 80085c4:	20000bf0 	.word	0x20000bf0
 80085c8:	20000be8 	.word	0x20000be8
 80085cc:	20000be4 	.word	0x20000be4
 80085d0:	20000ba8 	.word	0x20000ba8
 80085d4:	0a5a      	lsrs	r2, r3, #9
 80085d6:	2a04      	cmp	r2, #4
 80085d8:	d956      	bls.n	8008688 <_malloc_r+0x400>
 80085da:	2a14      	cmp	r2, #20
 80085dc:	f200 80a7 	bhi.w	800872e <_malloc_r+0x4a6>
 80085e0:	325b      	adds	r2, #91	; 0x5b
 80085e2:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 80085e6:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
 80085ea:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 80087a0 <_malloc_r+0x518>
 80085ee:	f8dc 1008 	ldr.w	r1, [ip, #8]
 80085f2:	4561      	cmp	r1, ip
 80085f4:	f000 8085 	beq.w	8008702 <_malloc_r+0x47a>
 80085f8:	684a      	ldr	r2, [r1, #4]
 80085fa:	f022 0203 	bic.w	r2, r2, #3
 80085fe:	4293      	cmp	r3, r2
 8008600:	d202      	bcs.n	8008608 <_malloc_r+0x380>
 8008602:	6889      	ldr	r1, [r1, #8]
 8008604:	458c      	cmp	ip, r1
 8008606:	d1f7      	bne.n	80085f8 <_malloc_r+0x370>
 8008608:	68ca      	ldr	r2, [r1, #12]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	60e2      	str	r2, [r4, #12]
 800860e:	60a1      	str	r1, [r4, #8]
 8008610:	6094      	str	r4, [r2, #8]
 8008612:	60cc      	str	r4, [r1, #12]
 8008614:	e6ba      	b.n	800838c <_malloc_r+0x104>
 8008616:	1963      	adds	r3, r4, r5
 8008618:	f042 0701 	orr.w	r7, r2, #1
 800861c:	f045 0501 	orr.w	r5, r5, #1
 8008620:	6065      	str	r5, [r4, #4]
 8008622:	4630      	mov	r0, r6
 8008624:	614b      	str	r3, [r1, #20]
 8008626:	610b      	str	r3, [r1, #16]
 8008628:	f8c3 e00c 	str.w	lr, [r3, #12]
 800862c:	f8c3 e008 	str.w	lr, [r3, #8]
 8008630:	605f      	str	r7, [r3, #4]
 8008632:	509a      	str	r2, [r3, r2]
 8008634:	3408      	adds	r4, #8
 8008636:	f000 f901 	bl	800883c <__malloc_unlock>
 800863a:	e651      	b.n	80082e0 <_malloc_r+0x58>
 800863c:	684b      	ldr	r3, [r1, #4]
 800863e:	e6a5      	b.n	800838c <_malloc_r+0x104>
 8008640:	f109 0901 	add.w	r9, r9, #1
 8008644:	f019 0f03 	tst.w	r9, #3
 8008648:	f10c 0c08 	add.w	ip, ip, #8
 800864c:	f47f aeb0 	bne.w	80083b0 <_malloc_r+0x128>
 8008650:	e02b      	b.n	80086aa <_malloc_r+0x422>
 8008652:	f104 0308 	add.w	r3, r4, #8
 8008656:	6964      	ldr	r4, [r4, #20]
 8008658:	42a3      	cmp	r3, r4
 800865a:	bf08      	it	eq
 800865c:	3002      	addeq	r0, #2
 800865e:	f43f ae68 	beq.w	8008332 <_malloc_r+0xaa>
 8008662:	e62d      	b.n	80082c0 <_malloc_r+0x38>
 8008664:	441a      	add	r2, r3
 8008666:	461c      	mov	r4, r3
 8008668:	6851      	ldr	r1, [r2, #4]
 800866a:	68db      	ldr	r3, [r3, #12]
 800866c:	f854 5f08 	ldr.w	r5, [r4, #8]!
 8008670:	f041 0101 	orr.w	r1, r1, #1
 8008674:	6051      	str	r1, [r2, #4]
 8008676:	4630      	mov	r0, r6
 8008678:	60eb      	str	r3, [r5, #12]
 800867a:	609d      	str	r5, [r3, #8]
 800867c:	f000 f8de 	bl	800883c <__malloc_unlock>
 8008680:	e62e      	b.n	80082e0 <_malloc_r+0x58>
 8008682:	305b      	adds	r0, #91	; 0x5b
 8008684:	0041      	lsls	r1, r0, #1
 8008686:	e63f      	b.n	8008308 <_malloc_r+0x80>
 8008688:	099a      	lsrs	r2, r3, #6
 800868a:	3238      	adds	r2, #56	; 0x38
 800868c:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8008690:	e7a9      	b.n	80085e6 <_malloc_r+0x35e>
 8008692:	42bc      	cmp	r4, r7
 8008694:	f43f af0e 	beq.w	80084b4 <_malloc_r+0x22c>
 8008698:	68bc      	ldr	r4, [r7, #8]
 800869a:	6862      	ldr	r2, [r4, #4]
 800869c:	f022 0203 	bic.w	r2, r2, #3
 80086a0:	e768      	b.n	8008574 <_malloc_r+0x2ec>
 80086a2:	f8d8 8000 	ldr.w	r8, [r8]
 80086a6:	4598      	cmp	r8, r3
 80086a8:	d177      	bne.n	800879a <_malloc_r+0x512>
 80086aa:	f010 0f03 	tst.w	r0, #3
 80086ae:	f1a8 0308 	sub.w	r3, r8, #8
 80086b2:	f100 30ff 	add.w	r0, r0, #4294967295
 80086b6:	d1f4      	bne.n	80086a2 <_malloc_r+0x41a>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	ea23 0304 	bic.w	r3, r3, r4
 80086be:	607b      	str	r3, [r7, #4]
 80086c0:	0064      	lsls	r4, r4, #1
 80086c2:	429c      	cmp	r4, r3
 80086c4:	f63f aeca 	bhi.w	800845c <_malloc_r+0x1d4>
 80086c8:	2c00      	cmp	r4, #0
 80086ca:	f43f aec7 	beq.w	800845c <_malloc_r+0x1d4>
 80086ce:	4223      	tst	r3, r4
 80086d0:	4648      	mov	r0, r9
 80086d2:	f47f ae69 	bne.w	80083a8 <_malloc_r+0x120>
 80086d6:	0064      	lsls	r4, r4, #1
 80086d8:	4223      	tst	r3, r4
 80086da:	f100 0004 	add.w	r0, r0, #4
 80086de:	d0fa      	beq.n	80086d6 <_malloc_r+0x44e>
 80086e0:	e662      	b.n	80083a8 <_malloc_r+0x120>
 80086e2:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
 80086e6:	d818      	bhi.n	800871a <_malloc_r+0x492>
 80086e8:	0be8      	lsrs	r0, r5, #15
 80086ea:	3077      	adds	r0, #119	; 0x77
 80086ec:	0041      	lsls	r1, r0, #1
 80086ee:	e60b      	b.n	8008308 <_malloc_r+0x80>
 80086f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80086f4:	e6fb      	b.n	80084ee <_malloc_r+0x266>
 80086f6:	2301      	movs	r3, #1
 80086f8:	f8c9 3004 	str.w	r3, [r9, #4]
 80086fc:	464c      	mov	r4, r9
 80086fe:	2200      	movs	r2, #0
 8008700:	e738      	b.n	8008574 <_malloc_r+0x2ec>
 8008702:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008706:	1092      	asrs	r2, r2, #2
 8008708:	f04f 0c01 	mov.w	ip, #1
 800870c:	fa0c f202 	lsl.w	r2, ip, r2
 8008710:	4313      	orrs	r3, r2
 8008712:	f8c8 3004 	str.w	r3, [r8, #4]
 8008716:	460a      	mov	r2, r1
 8008718:	e778      	b.n	800860c <_malloc_r+0x384>
 800871a:	f240 5354 	movw	r3, #1364	; 0x554
 800871e:	4298      	cmp	r0, r3
 8008720:	d817      	bhi.n	8008752 <_malloc_r+0x4ca>
 8008722:	0ca8      	lsrs	r0, r5, #18
 8008724:	307c      	adds	r0, #124	; 0x7c
 8008726:	0041      	lsls	r1, r0, #1
 8008728:	e5ee      	b.n	8008308 <_malloc_r+0x80>
 800872a:	3210      	adds	r2, #16
 800872c:	e6b4      	b.n	8008498 <_malloc_r+0x210>
 800872e:	2a54      	cmp	r2, #84	; 0x54
 8008730:	d81e      	bhi.n	8008770 <_malloc_r+0x4e8>
 8008732:	0b1a      	lsrs	r2, r3, #12
 8008734:	326e      	adds	r2, #110	; 0x6e
 8008736:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 800873a:	e754      	b.n	80085e6 <_malloc_r+0x35e>
 800873c:	f3cb 000b 	ubfx	r0, fp, #0, #12
 8008740:	2800      	cmp	r0, #0
 8008742:	f47f aebe 	bne.w	80084c2 <_malloc_r+0x23a>
 8008746:	4442      	add	r2, r8
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	f042 0201 	orr.w	r2, r2, #1
 800874e:	605a      	str	r2, [r3, #4]
 8008750:	e702      	b.n	8008558 <_malloc_r+0x2d0>
 8008752:	21fc      	movs	r1, #252	; 0xfc
 8008754:	207e      	movs	r0, #126	; 0x7e
 8008756:	e5d7      	b.n	8008308 <_malloc_r+0x80>
 8008758:	2201      	movs	r2, #1
 800875a:	f04f 0a00 	mov.w	sl, #0
 800875e:	e6d9      	b.n	8008514 <_malloc_r+0x28c>
 8008760:	f104 0108 	add.w	r1, r4, #8
 8008764:	4630      	mov	r0, r6
 8008766:	f000 fc9f 	bl	80090a8 <_free_r>
 800876a:	f8da 1000 	ldr.w	r1, [sl]
 800876e:	e6f3      	b.n	8008558 <_malloc_r+0x2d0>
 8008770:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8008774:	d804      	bhi.n	8008780 <_malloc_r+0x4f8>
 8008776:	0bda      	lsrs	r2, r3, #15
 8008778:	3277      	adds	r2, #119	; 0x77
 800877a:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 800877e:	e732      	b.n	80085e6 <_malloc_r+0x35e>
 8008780:	f240 5154 	movw	r1, #1364	; 0x554
 8008784:	428a      	cmp	r2, r1
 8008786:	d804      	bhi.n	8008792 <_malloc_r+0x50a>
 8008788:	0c9a      	lsrs	r2, r3, #18
 800878a:	327c      	adds	r2, #124	; 0x7c
 800878c:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8008790:	e729      	b.n	80085e6 <_malloc_r+0x35e>
 8008792:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
 8008796:	227e      	movs	r2, #126	; 0x7e
 8008798:	e725      	b.n	80085e6 <_malloc_r+0x35e>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	e790      	b.n	80086c0 <_malloc_r+0x438>
 800879e:	bf00      	nop
 80087a0:	2000079c 	.word	0x2000079c

080087a4 <memchr>:
 80087a4:	0783      	lsls	r3, r0, #30
 80087a6:	b470      	push	{r4, r5, r6}
 80087a8:	b2c9      	uxtb	r1, r1
 80087aa:	d040      	beq.n	800882e <memchr+0x8a>
 80087ac:	1e54      	subs	r4, r2, #1
 80087ae:	2a00      	cmp	r2, #0
 80087b0:	d03f      	beq.n	8008832 <memchr+0x8e>
 80087b2:	7803      	ldrb	r3, [r0, #0]
 80087b4:	428b      	cmp	r3, r1
 80087b6:	bf18      	it	ne
 80087b8:	1c43      	addne	r3, r0, #1
 80087ba:	d106      	bne.n	80087ca <memchr+0x26>
 80087bc:	e01d      	b.n	80087fa <memchr+0x56>
 80087be:	b1f4      	cbz	r4, 80087fe <memchr+0x5a>
 80087c0:	7802      	ldrb	r2, [r0, #0]
 80087c2:	428a      	cmp	r2, r1
 80087c4:	f104 34ff 	add.w	r4, r4, #4294967295
 80087c8:	d017      	beq.n	80087fa <memchr+0x56>
 80087ca:	f013 0f03 	tst.w	r3, #3
 80087ce:	4618      	mov	r0, r3
 80087d0:	f103 0301 	add.w	r3, r3, #1
 80087d4:	d1f3      	bne.n	80087be <memchr+0x1a>
 80087d6:	2c03      	cmp	r4, #3
 80087d8:	d814      	bhi.n	8008804 <memchr+0x60>
 80087da:	b184      	cbz	r4, 80087fe <memchr+0x5a>
 80087dc:	7803      	ldrb	r3, [r0, #0]
 80087de:	428b      	cmp	r3, r1
 80087e0:	d00b      	beq.n	80087fa <memchr+0x56>
 80087e2:	1905      	adds	r5, r0, r4
 80087e4:	1c43      	adds	r3, r0, #1
 80087e6:	e002      	b.n	80087ee <memchr+0x4a>
 80087e8:	7802      	ldrb	r2, [r0, #0]
 80087ea:	428a      	cmp	r2, r1
 80087ec:	d005      	beq.n	80087fa <memchr+0x56>
 80087ee:	42ab      	cmp	r3, r5
 80087f0:	4618      	mov	r0, r3
 80087f2:	f103 0301 	add.w	r3, r3, #1
 80087f6:	d1f7      	bne.n	80087e8 <memchr+0x44>
 80087f8:	2000      	movs	r0, #0
 80087fa:	bc70      	pop	{r4, r5, r6}
 80087fc:	4770      	bx	lr
 80087fe:	4620      	mov	r0, r4
 8008800:	bc70      	pop	{r4, r5, r6}
 8008802:	4770      	bx	lr
 8008804:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 8008808:	4602      	mov	r2, r0
 800880a:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 800880e:	4610      	mov	r0, r2
 8008810:	3204      	adds	r2, #4
 8008812:	6803      	ldr	r3, [r0, #0]
 8008814:	4073      	eors	r3, r6
 8008816:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 800881a:	ea25 0303 	bic.w	r3, r5, r3
 800881e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8008822:	d1da      	bne.n	80087da <memchr+0x36>
 8008824:	3c04      	subs	r4, #4
 8008826:	2c03      	cmp	r4, #3
 8008828:	4610      	mov	r0, r2
 800882a:	d8f0      	bhi.n	800880e <memchr+0x6a>
 800882c:	e7d5      	b.n	80087da <memchr+0x36>
 800882e:	4614      	mov	r4, r2
 8008830:	e7d1      	b.n	80087d6 <memchr+0x32>
 8008832:	4610      	mov	r0, r2
 8008834:	e7e1      	b.n	80087fa <memchr+0x56>
 8008836:	bf00      	nop

08008838 <__malloc_lock>:
 8008838:	4770      	bx	lr
 800883a:	bf00      	nop

0800883c <__malloc_unlock>:
 800883c:	4770      	bx	lr
 800883e:	bf00      	nop

08008840 <_Balloc>:
 8008840:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008842:	b570      	push	{r4, r5, r6, lr}
 8008844:	4605      	mov	r5, r0
 8008846:	460c      	mov	r4, r1
 8008848:	b14b      	cbz	r3, 800885e <_Balloc+0x1e>
 800884a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800884e:	b180      	cbz	r0, 8008872 <_Balloc+0x32>
 8008850:	6802      	ldr	r2, [r0, #0]
 8008852:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8008856:	2300      	movs	r3, #0
 8008858:	6103      	str	r3, [r0, #16]
 800885a:	60c3      	str	r3, [r0, #12]
 800885c:	bd70      	pop	{r4, r5, r6, pc}
 800885e:	2104      	movs	r1, #4
 8008860:	2221      	movs	r2, #33	; 0x21
 8008862:	f000 fba3 	bl	8008fac <_calloc_r>
 8008866:	64e8      	str	r0, [r5, #76]	; 0x4c
 8008868:	4603      	mov	r3, r0
 800886a:	2800      	cmp	r0, #0
 800886c:	d1ed      	bne.n	800884a <_Balloc+0xa>
 800886e:	2000      	movs	r0, #0
 8008870:	bd70      	pop	{r4, r5, r6, pc}
 8008872:	2101      	movs	r1, #1
 8008874:	fa01 f604 	lsl.w	r6, r1, r4
 8008878:	1d72      	adds	r2, r6, #5
 800887a:	4628      	mov	r0, r5
 800887c:	0092      	lsls	r2, r2, #2
 800887e:	f000 fb95 	bl	8008fac <_calloc_r>
 8008882:	2800      	cmp	r0, #0
 8008884:	d0f3      	beq.n	800886e <_Balloc+0x2e>
 8008886:	6044      	str	r4, [r0, #4]
 8008888:	6086      	str	r6, [r0, #8]
 800888a:	e7e4      	b.n	8008856 <_Balloc+0x16>

0800888c <_Bfree>:
 800888c:	b131      	cbz	r1, 800889c <_Bfree+0x10>
 800888e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008890:	684a      	ldr	r2, [r1, #4]
 8008892:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008896:	6008      	str	r0, [r1, #0]
 8008898:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800889c:	4770      	bx	lr
 800889e:	bf00      	nop

080088a0 <__multadd>:
 80088a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088a2:	690c      	ldr	r4, [r1, #16]
 80088a4:	b083      	sub	sp, #12
 80088a6:	460d      	mov	r5, r1
 80088a8:	4606      	mov	r6, r0
 80088aa:	f101 0e14 	add.w	lr, r1, #20
 80088ae:	2700      	movs	r7, #0
 80088b0:	f8de 1000 	ldr.w	r1, [lr]
 80088b4:	b288      	uxth	r0, r1
 80088b6:	0c09      	lsrs	r1, r1, #16
 80088b8:	fb02 3300 	mla	r3, r2, r0, r3
 80088bc:	fb02 f101 	mul.w	r1, r2, r1
 80088c0:	eb01 4113 	add.w	r1, r1, r3, lsr #16
 80088c4:	3701      	adds	r7, #1
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 80088cc:	42bc      	cmp	r4, r7
 80088ce:	f84e 3b04 	str.w	r3, [lr], #4
 80088d2:	ea4f 4311 	mov.w	r3, r1, lsr #16
 80088d6:	dceb      	bgt.n	80088b0 <__multadd+0x10>
 80088d8:	b13b      	cbz	r3, 80088ea <__multadd+0x4a>
 80088da:	68aa      	ldr	r2, [r5, #8]
 80088dc:	4294      	cmp	r4, r2
 80088de:	da07      	bge.n	80088f0 <__multadd+0x50>
 80088e0:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 80088e4:	3401      	adds	r4, #1
 80088e6:	6153      	str	r3, [r2, #20]
 80088e8:	612c      	str	r4, [r5, #16]
 80088ea:	4628      	mov	r0, r5
 80088ec:	b003      	add	sp, #12
 80088ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088f0:	6869      	ldr	r1, [r5, #4]
 80088f2:	9301      	str	r3, [sp, #4]
 80088f4:	3101      	adds	r1, #1
 80088f6:	4630      	mov	r0, r6
 80088f8:	f7ff ffa2 	bl	8008840 <_Balloc>
 80088fc:	692a      	ldr	r2, [r5, #16]
 80088fe:	3202      	adds	r2, #2
 8008900:	f105 010c 	add.w	r1, r5, #12
 8008904:	4607      	mov	r7, r0
 8008906:	0092      	lsls	r2, r2, #2
 8008908:	300c      	adds	r0, #12
 800890a:	f7fd f961 	bl	8005bd0 <memcpy>
 800890e:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 8008910:	6869      	ldr	r1, [r5, #4]
 8008912:	9b01      	ldr	r3, [sp, #4]
 8008914:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8008918:	6028      	str	r0, [r5, #0]
 800891a:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 800891e:	463d      	mov	r5, r7
 8008920:	e7de      	b.n	80088e0 <__multadd+0x40>
 8008922:	bf00      	nop

08008924 <__hi0bits>:
 8008924:	0c03      	lsrs	r3, r0, #16
 8008926:	041b      	lsls	r3, r3, #16
 8008928:	b9b3      	cbnz	r3, 8008958 <__hi0bits+0x34>
 800892a:	0400      	lsls	r0, r0, #16
 800892c:	2310      	movs	r3, #16
 800892e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008932:	bf04      	itt	eq
 8008934:	0200      	lsleq	r0, r0, #8
 8008936:	3308      	addeq	r3, #8
 8008938:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800893c:	bf04      	itt	eq
 800893e:	0100      	lsleq	r0, r0, #4
 8008940:	3304      	addeq	r3, #4
 8008942:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008946:	bf04      	itt	eq
 8008948:	0080      	lsleq	r0, r0, #2
 800894a:	3302      	addeq	r3, #2
 800894c:	2800      	cmp	r0, #0
 800894e:	db07      	blt.n	8008960 <__hi0bits+0x3c>
 8008950:	0042      	lsls	r2, r0, #1
 8008952:	d403      	bmi.n	800895c <__hi0bits+0x38>
 8008954:	2020      	movs	r0, #32
 8008956:	4770      	bx	lr
 8008958:	2300      	movs	r3, #0
 800895a:	e7e8      	b.n	800892e <__hi0bits+0xa>
 800895c:	1c58      	adds	r0, r3, #1
 800895e:	4770      	bx	lr
 8008960:	4618      	mov	r0, r3
 8008962:	4770      	bx	lr

08008964 <__lo0bits>:
 8008964:	6803      	ldr	r3, [r0, #0]
 8008966:	f013 0207 	ands.w	r2, r3, #7
 800896a:	d007      	beq.n	800897c <__lo0bits+0x18>
 800896c:	07d9      	lsls	r1, r3, #31
 800896e:	d420      	bmi.n	80089b2 <__lo0bits+0x4e>
 8008970:	079a      	lsls	r2, r3, #30
 8008972:	d420      	bmi.n	80089b6 <__lo0bits+0x52>
 8008974:	089b      	lsrs	r3, r3, #2
 8008976:	6003      	str	r3, [r0, #0]
 8008978:	2002      	movs	r0, #2
 800897a:	4770      	bx	lr
 800897c:	b299      	uxth	r1, r3
 800897e:	b909      	cbnz	r1, 8008984 <__lo0bits+0x20>
 8008980:	0c1b      	lsrs	r3, r3, #16
 8008982:	2210      	movs	r2, #16
 8008984:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008988:	bf04      	itt	eq
 800898a:	0a1b      	lsreq	r3, r3, #8
 800898c:	3208      	addeq	r2, #8
 800898e:	0719      	lsls	r1, r3, #28
 8008990:	bf04      	itt	eq
 8008992:	091b      	lsreq	r3, r3, #4
 8008994:	3204      	addeq	r2, #4
 8008996:	0799      	lsls	r1, r3, #30
 8008998:	bf04      	itt	eq
 800899a:	089b      	lsreq	r3, r3, #2
 800899c:	3202      	addeq	r2, #2
 800899e:	07d9      	lsls	r1, r3, #31
 80089a0:	d404      	bmi.n	80089ac <__lo0bits+0x48>
 80089a2:	085b      	lsrs	r3, r3, #1
 80089a4:	d101      	bne.n	80089aa <__lo0bits+0x46>
 80089a6:	2020      	movs	r0, #32
 80089a8:	4770      	bx	lr
 80089aa:	3201      	adds	r2, #1
 80089ac:	6003      	str	r3, [r0, #0]
 80089ae:	4610      	mov	r0, r2
 80089b0:	4770      	bx	lr
 80089b2:	2000      	movs	r0, #0
 80089b4:	4770      	bx	lr
 80089b6:	085b      	lsrs	r3, r3, #1
 80089b8:	6003      	str	r3, [r0, #0]
 80089ba:	2001      	movs	r0, #1
 80089bc:	4770      	bx	lr
 80089be:	bf00      	nop

080089c0 <__i2b>:
 80089c0:	b510      	push	{r4, lr}
 80089c2:	460c      	mov	r4, r1
 80089c4:	2101      	movs	r1, #1
 80089c6:	f7ff ff3b 	bl	8008840 <_Balloc>
 80089ca:	2201      	movs	r2, #1
 80089cc:	6144      	str	r4, [r0, #20]
 80089ce:	6102      	str	r2, [r0, #16]
 80089d0:	bd10      	pop	{r4, pc}
 80089d2:	bf00      	nop

080089d4 <__multiply>:
 80089d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089d8:	690f      	ldr	r7, [r1, #16]
 80089da:	6916      	ldr	r6, [r2, #16]
 80089dc:	42b7      	cmp	r7, r6
 80089de:	b083      	sub	sp, #12
 80089e0:	460d      	mov	r5, r1
 80089e2:	4614      	mov	r4, r2
 80089e4:	f2c0 808d 	blt.w	8008b02 <__multiply+0x12e>
 80089e8:	4633      	mov	r3, r6
 80089ea:	463e      	mov	r6, r7
 80089ec:	461f      	mov	r7, r3
 80089ee:	68ab      	ldr	r3, [r5, #8]
 80089f0:	6869      	ldr	r1, [r5, #4]
 80089f2:	eb06 0807 	add.w	r8, r6, r7
 80089f6:	4598      	cmp	r8, r3
 80089f8:	bfc8      	it	gt
 80089fa:	3101      	addgt	r1, #1
 80089fc:	f7ff ff20 	bl	8008840 <_Balloc>
 8008a00:	f100 0c14 	add.w	ip, r0, #20
 8008a04:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
 8008a08:	45cc      	cmp	ip, r9
 8008a0a:	9000      	str	r0, [sp, #0]
 8008a0c:	d205      	bcs.n	8008a1a <__multiply+0x46>
 8008a0e:	4663      	mov	r3, ip
 8008a10:	2100      	movs	r1, #0
 8008a12:	f843 1b04 	str.w	r1, [r3], #4
 8008a16:	4599      	cmp	r9, r3
 8008a18:	d8fb      	bhi.n	8008a12 <__multiply+0x3e>
 8008a1a:	f104 0214 	add.w	r2, r4, #20
 8008a1e:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
 8008a22:	f105 0314 	add.w	r3, r5, #20
 8008a26:	4552      	cmp	r2, sl
 8008a28:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 8008a2c:	d254      	bcs.n	8008ad8 <__multiply+0x104>
 8008a2e:	f8cd 9004 	str.w	r9, [sp, #4]
 8008a32:	4699      	mov	r9, r3
 8008a34:	f852 3b04 	ldr.w	r3, [r2], #4
 8008a38:	fa1f fb83 	uxth.w	fp, r3
 8008a3c:	f1bb 0f00 	cmp.w	fp, #0
 8008a40:	d020      	beq.n	8008a84 <__multiply+0xb0>
 8008a42:	2000      	movs	r0, #0
 8008a44:	464f      	mov	r7, r9
 8008a46:	4666      	mov	r6, ip
 8008a48:	4605      	mov	r5, r0
 8008a4a:	e000      	b.n	8008a4e <__multiply+0x7a>
 8008a4c:	461e      	mov	r6, r3
 8008a4e:	f857 4b04 	ldr.w	r4, [r7], #4
 8008a52:	6830      	ldr	r0, [r6, #0]
 8008a54:	b2a1      	uxth	r1, r4
 8008a56:	b283      	uxth	r3, r0
 8008a58:	fb0b 3101 	mla	r1, fp, r1, r3
 8008a5c:	0c24      	lsrs	r4, r4, #16
 8008a5e:	0c00      	lsrs	r0, r0, #16
 8008a60:	194b      	adds	r3, r1, r5
 8008a62:	fb0b 0004 	mla	r0, fp, r4, r0
 8008a66:	eb00 4013 	add.w	r0, r0, r3, lsr #16
 8008a6a:	b299      	uxth	r1, r3
 8008a6c:	4633      	mov	r3, r6
 8008a6e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008a72:	45be      	cmp	lr, r7
 8008a74:	ea4f 4510 	mov.w	r5, r0, lsr #16
 8008a78:	f843 1b04 	str.w	r1, [r3], #4
 8008a7c:	d8e6      	bhi.n	8008a4c <__multiply+0x78>
 8008a7e:	6075      	str	r5, [r6, #4]
 8008a80:	f852 3c04 	ldr.w	r3, [r2, #-4]
 8008a84:	ea5f 4b13 	movs.w	fp, r3, lsr #16
 8008a88:	d020      	beq.n	8008acc <__multiply+0xf8>
 8008a8a:	f8dc 3000 	ldr.w	r3, [ip]
 8008a8e:	4667      	mov	r7, ip
 8008a90:	4618      	mov	r0, r3
 8008a92:	464d      	mov	r5, r9
 8008a94:	2100      	movs	r1, #0
 8008a96:	e000      	b.n	8008a9a <__multiply+0xc6>
 8008a98:	4637      	mov	r7, r6
 8008a9a:	882c      	ldrh	r4, [r5, #0]
 8008a9c:	0c00      	lsrs	r0, r0, #16
 8008a9e:	fb0b 0004 	mla	r0, fp, r4, r0
 8008aa2:	4401      	add	r1, r0
 8008aa4:	b29c      	uxth	r4, r3
 8008aa6:	463e      	mov	r6, r7
 8008aa8:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
 8008aac:	f846 3b04 	str.w	r3, [r6], #4
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f855 4b04 	ldr.w	r4, [r5], #4
 8008ab6:	b283      	uxth	r3, r0
 8008ab8:	0c24      	lsrs	r4, r4, #16
 8008aba:	fb0b 3404 	mla	r4, fp, r4, r3
 8008abe:	eb04 4311 	add.w	r3, r4, r1, lsr #16
 8008ac2:	45ae      	cmp	lr, r5
 8008ac4:	ea4f 4113 	mov.w	r1, r3, lsr #16
 8008ac8:	d8e6      	bhi.n	8008a98 <__multiply+0xc4>
 8008aca:	607b      	str	r3, [r7, #4]
 8008acc:	4592      	cmp	sl, r2
 8008ace:	f10c 0c04 	add.w	ip, ip, #4
 8008ad2:	d8af      	bhi.n	8008a34 <__multiply+0x60>
 8008ad4:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008ad8:	f1b8 0f00 	cmp.w	r8, #0
 8008adc:	dd0b      	ble.n	8008af6 <__multiply+0x122>
 8008ade:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8008ae2:	f1a9 0904 	sub.w	r9, r9, #4
 8008ae6:	b11b      	cbz	r3, 8008af0 <__multiply+0x11c>
 8008ae8:	e005      	b.n	8008af6 <__multiply+0x122>
 8008aea:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 8008aee:	b913      	cbnz	r3, 8008af6 <__multiply+0x122>
 8008af0:	f1b8 0801 	subs.w	r8, r8, #1
 8008af4:	d1f9      	bne.n	8008aea <__multiply+0x116>
 8008af6:	9800      	ldr	r0, [sp, #0]
 8008af8:	f8c0 8010 	str.w	r8, [r0, #16]
 8008afc:	b003      	add	sp, #12
 8008afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b02:	4615      	mov	r5, r2
 8008b04:	460c      	mov	r4, r1
 8008b06:	e772      	b.n	80089ee <__multiply+0x1a>

08008b08 <__pow5mult>:
 8008b08:	f012 0303 	ands.w	r3, r2, #3
 8008b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b10:	4614      	mov	r4, r2
 8008b12:	4607      	mov	r7, r0
 8008b14:	460e      	mov	r6, r1
 8008b16:	d12d      	bne.n	8008b74 <__pow5mult+0x6c>
 8008b18:	10a4      	asrs	r4, r4, #2
 8008b1a:	d01c      	beq.n	8008b56 <__pow5mult+0x4e>
 8008b1c:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 8008b1e:	b395      	cbz	r5, 8008b86 <__pow5mult+0x7e>
 8008b20:	07e3      	lsls	r3, r4, #31
 8008b22:	f04f 0800 	mov.w	r8, #0
 8008b26:	d406      	bmi.n	8008b36 <__pow5mult+0x2e>
 8008b28:	1064      	asrs	r4, r4, #1
 8008b2a:	d014      	beq.n	8008b56 <__pow5mult+0x4e>
 8008b2c:	6828      	ldr	r0, [r5, #0]
 8008b2e:	b1a8      	cbz	r0, 8008b5c <__pow5mult+0x54>
 8008b30:	4605      	mov	r5, r0
 8008b32:	07e3      	lsls	r3, r4, #31
 8008b34:	d5f8      	bpl.n	8008b28 <__pow5mult+0x20>
 8008b36:	4638      	mov	r0, r7
 8008b38:	4631      	mov	r1, r6
 8008b3a:	462a      	mov	r2, r5
 8008b3c:	f7ff ff4a 	bl	80089d4 <__multiply>
 8008b40:	b1b6      	cbz	r6, 8008b70 <__pow5mult+0x68>
 8008b42:	6872      	ldr	r2, [r6, #4]
 8008b44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b46:	1064      	asrs	r4, r4, #1
 8008b48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008b4c:	6031      	str	r1, [r6, #0]
 8008b4e:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 8008b52:	4606      	mov	r6, r0
 8008b54:	d1ea      	bne.n	8008b2c <__pow5mult+0x24>
 8008b56:	4630      	mov	r0, r6
 8008b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b5c:	4629      	mov	r1, r5
 8008b5e:	462a      	mov	r2, r5
 8008b60:	4638      	mov	r0, r7
 8008b62:	f7ff ff37 	bl	80089d4 <__multiply>
 8008b66:	6028      	str	r0, [r5, #0]
 8008b68:	f8c0 8000 	str.w	r8, [r0]
 8008b6c:	4605      	mov	r5, r0
 8008b6e:	e7e0      	b.n	8008b32 <__pow5mult+0x2a>
 8008b70:	4606      	mov	r6, r0
 8008b72:	e7d9      	b.n	8008b28 <__pow5mult+0x20>
 8008b74:	1e5a      	subs	r2, r3, #1
 8008b76:	4d0b      	ldr	r5, [pc, #44]	; (8008ba4 <__pow5mult+0x9c>)
 8008b78:	2300      	movs	r3, #0
 8008b7a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8008b7e:	f7ff fe8f 	bl	80088a0 <__multadd>
 8008b82:	4606      	mov	r6, r0
 8008b84:	e7c8      	b.n	8008b18 <__pow5mult+0x10>
 8008b86:	2101      	movs	r1, #1
 8008b88:	4638      	mov	r0, r7
 8008b8a:	f7ff fe59 	bl	8008840 <_Balloc>
 8008b8e:	f240 2171 	movw	r1, #625	; 0x271
 8008b92:	2201      	movs	r2, #1
 8008b94:	2300      	movs	r3, #0
 8008b96:	6141      	str	r1, [r0, #20]
 8008b98:	6102      	str	r2, [r0, #16]
 8008b9a:	4605      	mov	r5, r0
 8008b9c:	64b8      	str	r0, [r7, #72]	; 0x48
 8008b9e:	6003      	str	r3, [r0, #0]
 8008ba0:	e7be      	b.n	8008b20 <__pow5mult+0x18>
 8008ba2:	bf00      	nop
 8008ba4:	08009d60 	.word	0x08009d60

08008ba8 <__lshift>:
 8008ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bac:	690f      	ldr	r7, [r1, #16]
 8008bae:	688b      	ldr	r3, [r1, #8]
 8008bb0:	ea4f 1962 	mov.w	r9, r2, asr #5
 8008bb4:	444f      	add	r7, r9
 8008bb6:	1c7d      	adds	r5, r7, #1
 8008bb8:	429d      	cmp	r5, r3
 8008bba:	460e      	mov	r6, r1
 8008bbc:	4614      	mov	r4, r2
 8008bbe:	6849      	ldr	r1, [r1, #4]
 8008bc0:	4680      	mov	r8, r0
 8008bc2:	dd04      	ble.n	8008bce <__lshift+0x26>
 8008bc4:	005b      	lsls	r3, r3, #1
 8008bc6:	429d      	cmp	r5, r3
 8008bc8:	f101 0101 	add.w	r1, r1, #1
 8008bcc:	dcfa      	bgt.n	8008bc4 <__lshift+0x1c>
 8008bce:	4640      	mov	r0, r8
 8008bd0:	f7ff fe36 	bl	8008840 <_Balloc>
 8008bd4:	f1b9 0f00 	cmp.w	r9, #0
 8008bd8:	f100 0114 	add.w	r1, r0, #20
 8008bdc:	dd09      	ble.n	8008bf2 <__lshift+0x4a>
 8008bde:	2300      	movs	r3, #0
 8008be0:	469e      	mov	lr, r3
 8008be2:	460a      	mov	r2, r1
 8008be4:	3301      	adds	r3, #1
 8008be6:	454b      	cmp	r3, r9
 8008be8:	f842 eb04 	str.w	lr, [r2], #4
 8008bec:	d1fa      	bne.n	8008be4 <__lshift+0x3c>
 8008bee:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8008bf2:	6932      	ldr	r2, [r6, #16]
 8008bf4:	f106 0314 	add.w	r3, r6, #20
 8008bf8:	f014 0c1f 	ands.w	ip, r4, #31
 8008bfc:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
 8008c00:	d01f      	beq.n	8008c42 <__lshift+0x9a>
 8008c02:	f1cc 0920 	rsb	r9, ip, #32
 8008c06:	2200      	movs	r2, #0
 8008c08:	681c      	ldr	r4, [r3, #0]
 8008c0a:	fa04 f40c 	lsl.w	r4, r4, ip
 8008c0e:	4314      	orrs	r4, r2
 8008c10:	468a      	mov	sl, r1
 8008c12:	f841 4b04 	str.w	r4, [r1], #4
 8008c16:	f853 4b04 	ldr.w	r4, [r3], #4
 8008c1a:	459e      	cmp	lr, r3
 8008c1c:	fa24 f209 	lsr.w	r2, r4, r9
 8008c20:	d8f2      	bhi.n	8008c08 <__lshift+0x60>
 8008c22:	f8ca 2004 	str.w	r2, [sl, #4]
 8008c26:	b102      	cbz	r2, 8008c2a <__lshift+0x82>
 8008c28:	1cbd      	adds	r5, r7, #2
 8008c2a:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8008c2e:	6872      	ldr	r2, [r6, #4]
 8008c30:	3d01      	subs	r5, #1
 8008c32:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008c36:	6105      	str	r5, [r0, #16]
 8008c38:	6031      	str	r1, [r6, #0]
 8008c3a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 8008c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c42:	3904      	subs	r1, #4
 8008c44:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c48:	f841 2f04 	str.w	r2, [r1, #4]!
 8008c4c:	459e      	cmp	lr, r3
 8008c4e:	d8f9      	bhi.n	8008c44 <__lshift+0x9c>
 8008c50:	e7eb      	b.n	8008c2a <__lshift+0x82>
 8008c52:	bf00      	nop

08008c54 <__mcmp>:
 8008c54:	6902      	ldr	r2, [r0, #16]
 8008c56:	690b      	ldr	r3, [r1, #16]
 8008c58:	1ad2      	subs	r2, r2, r3
 8008c5a:	d113      	bne.n	8008c84 <__mcmp+0x30>
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	3014      	adds	r0, #20
 8008c60:	3114      	adds	r1, #20
 8008c62:	4419      	add	r1, r3
 8008c64:	b410      	push	{r4}
 8008c66:	4403      	add	r3, r0
 8008c68:	e001      	b.n	8008c6e <__mcmp+0x1a>
 8008c6a:	4298      	cmp	r0, r3
 8008c6c:	d20c      	bcs.n	8008c88 <__mcmp+0x34>
 8008c6e:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8008c72:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008c76:	4294      	cmp	r4, r2
 8008c78:	d0f7      	beq.n	8008c6a <__mcmp+0x16>
 8008c7a:	d309      	bcc.n	8008c90 <__mcmp+0x3c>
 8008c7c:	2001      	movs	r0, #1
 8008c7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c82:	4770      	bx	lr
 8008c84:	4610      	mov	r0, r2
 8008c86:	4770      	bx	lr
 8008c88:	2000      	movs	r0, #0
 8008c8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c8e:	4770      	bx	lr
 8008c90:	f04f 30ff 	mov.w	r0, #4294967295
 8008c94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c98:	4770      	bx	lr
 8008c9a:	bf00      	nop

08008c9c <__mdiff>:
 8008c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ca0:	460e      	mov	r6, r1
 8008ca2:	4605      	mov	r5, r0
 8008ca4:	4611      	mov	r1, r2
 8008ca6:	4630      	mov	r0, r6
 8008ca8:	4614      	mov	r4, r2
 8008caa:	f7ff ffd3 	bl	8008c54 <__mcmp>
 8008cae:	1e07      	subs	r7, r0, #0
 8008cb0:	d054      	beq.n	8008d5c <__mdiff+0xc0>
 8008cb2:	db4d      	blt.n	8008d50 <__mdiff+0xb4>
 8008cb4:	f04f 0800 	mov.w	r8, #0
 8008cb8:	6871      	ldr	r1, [r6, #4]
 8008cba:	4628      	mov	r0, r5
 8008cbc:	f7ff fdc0 	bl	8008840 <_Balloc>
 8008cc0:	6937      	ldr	r7, [r6, #16]
 8008cc2:	6923      	ldr	r3, [r4, #16]
 8008cc4:	f8c0 800c 	str.w	r8, [r0, #12]
 8008cc8:	3614      	adds	r6, #20
 8008cca:	f104 0214 	add.w	r2, r4, #20
 8008cce:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 8008cd2:	f100 0514 	add.w	r5, r0, #20
 8008cd6:	eb06 0e87 	add.w	lr, r6, r7, lsl #2
 8008cda:	2300      	movs	r3, #0
 8008cdc:	f856 8b04 	ldr.w	r8, [r6], #4
 8008ce0:	f852 4b04 	ldr.w	r4, [r2], #4
 8008ce4:	fa13 f388 	uxtah	r3, r3, r8
 8008ce8:	b2a1      	uxth	r1, r4
 8008cea:	0c24      	lsrs	r4, r4, #16
 8008cec:	1a59      	subs	r1, r3, r1
 8008cee:	ebc4 4318 	rsb	r3, r4, r8, lsr #16
 8008cf2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008cf6:	b289      	uxth	r1, r1
 8008cf8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008cfc:	4594      	cmp	ip, r2
 8008cfe:	f845 1b04 	str.w	r1, [r5], #4
 8008d02:	ea4f 4323 	mov.w	r3, r3, asr #16
 8008d06:	4634      	mov	r4, r6
 8008d08:	d8e8      	bhi.n	8008cdc <__mdiff+0x40>
 8008d0a:	45b6      	cmp	lr, r6
 8008d0c:	46ac      	mov	ip, r5
 8008d0e:	d915      	bls.n	8008d3c <__mdiff+0xa0>
 8008d10:	f854 2b04 	ldr.w	r2, [r4], #4
 8008d14:	fa13 f182 	uxtah	r1, r3, r2
 8008d18:	0c13      	lsrs	r3, r2, #16
 8008d1a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008d1e:	b289      	uxth	r1, r1
 8008d20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d24:	45a6      	cmp	lr, r4
 8008d26:	f845 1b04 	str.w	r1, [r5], #4
 8008d2a:	ea4f 4323 	mov.w	r3, r3, asr #16
 8008d2e:	d8ef      	bhi.n	8008d10 <__mdiff+0x74>
 8008d30:	43f6      	mvns	r6, r6
 8008d32:	4476      	add	r6, lr
 8008d34:	f026 0503 	bic.w	r5, r6, #3
 8008d38:	3504      	adds	r5, #4
 8008d3a:	4465      	add	r5, ip
 8008d3c:	3d04      	subs	r5, #4
 8008d3e:	b921      	cbnz	r1, 8008d4a <__mdiff+0xae>
 8008d40:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008d44:	3f01      	subs	r7, #1
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d0fa      	beq.n	8008d40 <__mdiff+0xa4>
 8008d4a:	6107      	str	r7, [r0, #16]
 8008d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d50:	4633      	mov	r3, r6
 8008d52:	f04f 0801 	mov.w	r8, #1
 8008d56:	4626      	mov	r6, r4
 8008d58:	461c      	mov	r4, r3
 8008d5a:	e7ad      	b.n	8008cb8 <__mdiff+0x1c>
 8008d5c:	4628      	mov	r0, r5
 8008d5e:	4639      	mov	r1, r7
 8008d60:	f7ff fd6e 	bl	8008840 <_Balloc>
 8008d64:	2301      	movs	r3, #1
 8008d66:	6147      	str	r7, [r0, #20]
 8008d68:	6103      	str	r3, [r0, #16]
 8008d6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d6e:	bf00      	nop

08008d70 <__d2b>:
 8008d70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008d74:	b083      	sub	sp, #12
 8008d76:	2101      	movs	r1, #1
 8008d78:	461c      	mov	r4, r3
 8008d7a:	f3c3 550a 	ubfx	r5, r3, #20, #11
 8008d7e:	4617      	mov	r7, r2
 8008d80:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008d82:	f7ff fd5d 	bl	8008840 <_Balloc>
 8008d86:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008d8a:	4681      	mov	r9, r0
 8008d8c:	b10d      	cbz	r5, 8008d92 <__d2b+0x22>
 8008d8e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8008d92:	9401      	str	r4, [sp, #4]
 8008d94:	b31f      	cbz	r7, 8008dde <__d2b+0x6e>
 8008d96:	a802      	add	r0, sp, #8
 8008d98:	f840 7d08 	str.w	r7, [r0, #-8]!
 8008d9c:	f7ff fde2 	bl	8008964 <__lo0bits>
 8008da0:	2800      	cmp	r0, #0
 8008da2:	d135      	bne.n	8008e10 <__d2b+0xa0>
 8008da4:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8008da8:	f8c9 2014 	str.w	r2, [r9, #20]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	bf14      	ite	ne
 8008db0:	2402      	movne	r4, #2
 8008db2:	2401      	moveq	r4, #1
 8008db4:	f8c9 3018 	str.w	r3, [r9, #24]
 8008db8:	f8c9 4010 	str.w	r4, [r9, #16]
 8008dbc:	b9dd      	cbnz	r5, 8008df6 <__d2b+0x86>
 8008dbe:	eb09 0384 	add.w	r3, r9, r4, lsl #2
 8008dc2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008dc6:	6030      	str	r0, [r6, #0]
 8008dc8:	6918      	ldr	r0, [r3, #16]
 8008dca:	f7ff fdab 	bl	8008924 <__hi0bits>
 8008dce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008dd0:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 8008dd4:	6018      	str	r0, [r3, #0]
 8008dd6:	4648      	mov	r0, r9
 8008dd8:	b003      	add	sp, #12
 8008dda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008dde:	a801      	add	r0, sp, #4
 8008de0:	f7ff fdc0 	bl	8008964 <__lo0bits>
 8008de4:	2401      	movs	r4, #1
 8008de6:	9b01      	ldr	r3, [sp, #4]
 8008de8:	f8c9 3014 	str.w	r3, [r9, #20]
 8008dec:	3020      	adds	r0, #32
 8008dee:	f8c9 4010 	str.w	r4, [r9, #16]
 8008df2:	2d00      	cmp	r5, #0
 8008df4:	d0e3      	beq.n	8008dbe <__d2b+0x4e>
 8008df6:	f2a5 4833 	subw	r8, r5, #1075	; 0x433
 8008dfa:	eb08 0300 	add.w	r3, r8, r0
 8008dfe:	6033      	str	r3, [r6, #0]
 8008e00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e02:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008e06:	6018      	str	r0, [r3, #0]
 8008e08:	4648      	mov	r0, r9
 8008e0a:	b003      	add	sp, #12
 8008e0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e10:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8008e14:	f1c0 0120 	rsb	r1, r0, #32
 8008e18:	fa03 f101 	lsl.w	r1, r3, r1
 8008e1c:	430a      	orrs	r2, r1
 8008e1e:	40c3      	lsrs	r3, r0
 8008e20:	9301      	str	r3, [sp, #4]
 8008e22:	f8c9 2014 	str.w	r2, [r9, #20]
 8008e26:	e7c1      	b.n	8008dac <__d2b+0x3c>

08008e28 <_sbrk_r>:
 8008e28:	b538      	push	{r3, r4, r5, lr}
 8008e2a:	4c07      	ldr	r4, [pc, #28]	; (8008e48 <_sbrk_r+0x20>)
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	4605      	mov	r5, r0
 8008e30:	4608      	mov	r0, r1
 8008e32:	6023      	str	r3, [r4, #0]
 8008e34:	f7f8 fdd8 	bl	80019e8 <_sbrk>
 8008e38:	1c43      	adds	r3, r0, #1
 8008e3a:	d000      	beq.n	8008e3e <_sbrk_r+0x16>
 8008e3c:	bd38      	pop	{r3, r4, r5, pc}
 8008e3e:	6823      	ldr	r3, [r4, #0]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d0fb      	beq.n	8008e3c <_sbrk_r+0x14>
 8008e44:	602b      	str	r3, [r5, #0]
 8008e46:	bd38      	pop	{r3, r4, r5, pc}
 8008e48:	20000c50 	.word	0x20000c50

08008e4c <strlen>:
 8008e4c:	f020 0103 	bic.w	r1, r0, #3
 8008e50:	f010 0003 	ands.w	r0, r0, #3
 8008e54:	f1c0 0000 	rsb	r0, r0, #0
 8008e58:	f851 3b04 	ldr.w	r3, [r1], #4
 8008e5c:	f100 0c04 	add.w	ip, r0, #4
 8008e60:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8008e64:	f06f 0200 	mvn.w	r2, #0
 8008e68:	bf1c      	itt	ne
 8008e6a:	fa22 f20c 	lsrne.w	r2, r2, ip
 8008e6e:	4313      	orrne	r3, r2
 8008e70:	f04f 0c01 	mov.w	ip, #1
 8008e74:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8008e78:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 8008e7c:	eba3 020c 	sub.w	r2, r3, ip
 8008e80:	ea22 0203 	bic.w	r2, r2, r3
 8008e84:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 8008e88:	bf04      	itt	eq
 8008e8a:	f851 3b04 	ldreq.w	r3, [r1], #4
 8008e8e:	3004      	addeq	r0, #4
 8008e90:	d0f4      	beq.n	8008e7c <strlen+0x30>
 8008e92:	f1c2 0100 	rsb	r1, r2, #0
 8008e96:	ea02 0201 	and.w	r2, r2, r1
 8008e9a:	fab2 f282 	clz	r2, r2
 8008e9e:	f1c2 021f 	rsb	r2, r2, #31
 8008ea2:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 8008ea6:	4770      	bx	lr

08008ea8 <__ssprint_r>:
 8008ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eac:	6893      	ldr	r3, [r2, #8]
 8008eae:	f8d2 8000 	ldr.w	r8, [r2]
 8008eb2:	b083      	sub	sp, #12
 8008eb4:	4691      	mov	r9, r2
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d072      	beq.n	8008fa0 <__ssprint_r+0xf8>
 8008eba:	4607      	mov	r7, r0
 8008ebc:	f04f 0b00 	mov.w	fp, #0
 8008ec0:	6808      	ldr	r0, [r1, #0]
 8008ec2:	688b      	ldr	r3, [r1, #8]
 8008ec4:	460d      	mov	r5, r1
 8008ec6:	465c      	mov	r4, fp
 8008ec8:	2c00      	cmp	r4, #0
 8008eca:	d045      	beq.n	8008f58 <__ssprint_r+0xb0>
 8008ecc:	429c      	cmp	r4, r3
 8008ece:	461e      	mov	r6, r3
 8008ed0:	469a      	mov	sl, r3
 8008ed2:	d348      	bcc.n	8008f66 <__ssprint_r+0xbe>
 8008ed4:	89ab      	ldrh	r3, [r5, #12]
 8008ed6:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8008eda:	d02d      	beq.n	8008f38 <__ssprint_r+0x90>
 8008edc:	696e      	ldr	r6, [r5, #20]
 8008ede:	6929      	ldr	r1, [r5, #16]
 8008ee0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8008ee4:	ebc1 0a00 	rsb	sl, r1, r0
 8008ee8:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 8008eec:	1c60      	adds	r0, r4, #1
 8008eee:	1076      	asrs	r6, r6, #1
 8008ef0:	4450      	add	r0, sl
 8008ef2:	4286      	cmp	r6, r0
 8008ef4:	4632      	mov	r2, r6
 8008ef6:	bf3c      	itt	cc
 8008ef8:	4606      	movcc	r6, r0
 8008efa:	4632      	movcc	r2, r6
 8008efc:	055b      	lsls	r3, r3, #21
 8008efe:	d535      	bpl.n	8008f6c <__ssprint_r+0xc4>
 8008f00:	4611      	mov	r1, r2
 8008f02:	4638      	mov	r0, r7
 8008f04:	f7ff f9c0 	bl	8008288 <_malloc_r>
 8008f08:	2800      	cmp	r0, #0
 8008f0a:	d039      	beq.n	8008f80 <__ssprint_r+0xd8>
 8008f0c:	4652      	mov	r2, sl
 8008f0e:	6929      	ldr	r1, [r5, #16]
 8008f10:	9001      	str	r0, [sp, #4]
 8008f12:	f7fc fe5d 	bl	8005bd0 <memcpy>
 8008f16:	89aa      	ldrh	r2, [r5, #12]
 8008f18:	9b01      	ldr	r3, [sp, #4]
 8008f1a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8008f1e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008f22:	81aa      	strh	r2, [r5, #12]
 8008f24:	ebca 0206 	rsb	r2, sl, r6
 8008f28:	eb03 000a 	add.w	r0, r3, sl
 8008f2c:	616e      	str	r6, [r5, #20]
 8008f2e:	612b      	str	r3, [r5, #16]
 8008f30:	6028      	str	r0, [r5, #0]
 8008f32:	60aa      	str	r2, [r5, #8]
 8008f34:	4626      	mov	r6, r4
 8008f36:	46a2      	mov	sl, r4
 8008f38:	4652      	mov	r2, sl
 8008f3a:	4659      	mov	r1, fp
 8008f3c:	f000 f98c 	bl	8009258 <memmove>
 8008f40:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8008f44:	68ab      	ldr	r3, [r5, #8]
 8008f46:	6828      	ldr	r0, [r5, #0]
 8008f48:	1b9b      	subs	r3, r3, r6
 8008f4a:	4450      	add	r0, sl
 8008f4c:	1b14      	subs	r4, r2, r4
 8008f4e:	60ab      	str	r3, [r5, #8]
 8008f50:	6028      	str	r0, [r5, #0]
 8008f52:	f8c9 4008 	str.w	r4, [r9, #8]
 8008f56:	b31c      	cbz	r4, 8008fa0 <__ssprint_r+0xf8>
 8008f58:	f8d8 b000 	ldr.w	fp, [r8]
 8008f5c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8008f60:	f108 0808 	add.w	r8, r8, #8
 8008f64:	e7b0      	b.n	8008ec8 <__ssprint_r+0x20>
 8008f66:	4626      	mov	r6, r4
 8008f68:	46a2      	mov	sl, r4
 8008f6a:	e7e5      	b.n	8008f38 <__ssprint_r+0x90>
 8008f6c:	4638      	mov	r0, r7
 8008f6e:	f000 f9d7 	bl	8009320 <_realloc_r>
 8008f72:	4603      	mov	r3, r0
 8008f74:	2800      	cmp	r0, #0
 8008f76:	d1d5      	bne.n	8008f24 <__ssprint_r+0x7c>
 8008f78:	4638      	mov	r0, r7
 8008f7a:	6929      	ldr	r1, [r5, #16]
 8008f7c:	f000 f894 	bl	80090a8 <_free_r>
 8008f80:	230c      	movs	r3, #12
 8008f82:	603b      	str	r3, [r7, #0]
 8008f84:	89ab      	ldrh	r3, [r5, #12]
 8008f86:	2200      	movs	r2, #0
 8008f88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f90:	81ab      	strh	r3, [r5, #12]
 8008f92:	f8c9 2008 	str.w	r2, [r9, #8]
 8008f96:	f8c9 2004 	str.w	r2, [r9, #4]
 8008f9a:	b003      	add	sp, #12
 8008f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fa0:	2000      	movs	r0, #0
 8008fa2:	f8c9 0004 	str.w	r0, [r9, #4]
 8008fa6:	b003      	add	sp, #12
 8008fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008fac <_calloc_r>:
 8008fac:	b510      	push	{r4, lr}
 8008fae:	fb02 f101 	mul.w	r1, r2, r1
 8008fb2:	f7ff f969 	bl	8008288 <_malloc_r>
 8008fb6:	4604      	mov	r4, r0
 8008fb8:	b168      	cbz	r0, 8008fd6 <_calloc_r+0x2a>
 8008fba:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8008fbe:	f022 0203 	bic.w	r2, r2, #3
 8008fc2:	3a04      	subs	r2, #4
 8008fc4:	2a24      	cmp	r2, #36	; 0x24
 8008fc6:	d818      	bhi.n	8008ffa <_calloc_r+0x4e>
 8008fc8:	2a13      	cmp	r2, #19
 8008fca:	d806      	bhi.n	8008fda <_calloc_r+0x2e>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	2200      	movs	r2, #0
 8008fd0:	601a      	str	r2, [r3, #0]
 8008fd2:	605a      	str	r2, [r3, #4]
 8008fd4:	609a      	str	r2, [r3, #8]
 8008fd6:	4620      	mov	r0, r4
 8008fd8:	bd10      	pop	{r4, pc}
 8008fda:	2300      	movs	r3, #0
 8008fdc:	2a1b      	cmp	r2, #27
 8008fde:	6003      	str	r3, [r0, #0]
 8008fe0:	6043      	str	r3, [r0, #4]
 8008fe2:	d90f      	bls.n	8009004 <_calloc_r+0x58>
 8008fe4:	2a24      	cmp	r2, #36	; 0x24
 8008fe6:	6083      	str	r3, [r0, #8]
 8008fe8:	60c3      	str	r3, [r0, #12]
 8008fea:	bf05      	ittet	eq
 8008fec:	6103      	streq	r3, [r0, #16]
 8008fee:	6143      	streq	r3, [r0, #20]
 8008ff0:	f100 0310 	addne.w	r3, r0, #16
 8008ff4:	f100 0318 	addeq.w	r3, r0, #24
 8008ff8:	e7e9      	b.n	8008fce <_calloc_r+0x22>
 8008ffa:	2100      	movs	r1, #0
 8008ffc:	f7fc fe82 	bl	8005d04 <memset>
 8009000:	4620      	mov	r0, r4
 8009002:	bd10      	pop	{r4, pc}
 8009004:	f100 0308 	add.w	r3, r0, #8
 8009008:	e7e1      	b.n	8008fce <_calloc_r+0x22>
 800900a:	bf00      	nop

0800900c <_malloc_trim_r>:
 800900c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800900e:	4f23      	ldr	r7, [pc, #140]	; (800909c <_malloc_trim_r+0x90>)
 8009010:	460c      	mov	r4, r1
 8009012:	4606      	mov	r6, r0
 8009014:	f7ff fc10 	bl	8008838 <__malloc_lock>
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	685d      	ldr	r5, [r3, #4]
 800901c:	f025 0503 	bic.w	r5, r5, #3
 8009020:	1b29      	subs	r1, r5, r4
 8009022:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 8009026:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 800902a:	f021 010f 	bic.w	r1, r1, #15
 800902e:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 8009032:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8009036:	db07      	blt.n	8009048 <_malloc_trim_r+0x3c>
 8009038:	4630      	mov	r0, r6
 800903a:	2100      	movs	r1, #0
 800903c:	f7ff fef4 	bl	8008e28 <_sbrk_r>
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	442b      	add	r3, r5
 8009044:	4298      	cmp	r0, r3
 8009046:	d004      	beq.n	8009052 <_malloc_trim_r+0x46>
 8009048:	4630      	mov	r0, r6
 800904a:	f7ff fbf7 	bl	800883c <__malloc_unlock>
 800904e:	2000      	movs	r0, #0
 8009050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009052:	4630      	mov	r0, r6
 8009054:	4261      	negs	r1, r4
 8009056:	f7ff fee7 	bl	8008e28 <_sbrk_r>
 800905a:	3001      	adds	r0, #1
 800905c:	d00d      	beq.n	800907a <_malloc_trim_r+0x6e>
 800905e:	4b10      	ldr	r3, [pc, #64]	; (80090a0 <_malloc_trim_r+0x94>)
 8009060:	68ba      	ldr	r2, [r7, #8]
 8009062:	6819      	ldr	r1, [r3, #0]
 8009064:	1b2d      	subs	r5, r5, r4
 8009066:	f045 0501 	orr.w	r5, r5, #1
 800906a:	4630      	mov	r0, r6
 800906c:	1b09      	subs	r1, r1, r4
 800906e:	6055      	str	r5, [r2, #4]
 8009070:	6019      	str	r1, [r3, #0]
 8009072:	f7ff fbe3 	bl	800883c <__malloc_unlock>
 8009076:	2001      	movs	r0, #1
 8009078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800907a:	4630      	mov	r0, r6
 800907c:	2100      	movs	r1, #0
 800907e:	f7ff fed3 	bl	8008e28 <_sbrk_r>
 8009082:	68ba      	ldr	r2, [r7, #8]
 8009084:	1a83      	subs	r3, r0, r2
 8009086:	2b0f      	cmp	r3, #15
 8009088:	ddde      	ble.n	8009048 <_malloc_trim_r+0x3c>
 800908a:	4c06      	ldr	r4, [pc, #24]	; (80090a4 <_malloc_trim_r+0x98>)
 800908c:	4904      	ldr	r1, [pc, #16]	; (80090a0 <_malloc_trim_r+0x94>)
 800908e:	6824      	ldr	r4, [r4, #0]
 8009090:	f043 0301 	orr.w	r3, r3, #1
 8009094:	1b00      	subs	r0, r0, r4
 8009096:	6053      	str	r3, [r2, #4]
 8009098:	6008      	str	r0, [r1, #0]
 800909a:	e7d5      	b.n	8009048 <_malloc_trim_r+0x3c>
 800909c:	2000079c 	.word	0x2000079c
 80090a0:	20000bf0 	.word	0x20000bf0
 80090a4:	20000ba8 	.word	0x20000ba8

080090a8 <_free_r>:
 80090a8:	2900      	cmp	r1, #0
 80090aa:	d04e      	beq.n	800914a <_free_r+0xa2>
 80090ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090b0:	460c      	mov	r4, r1
 80090b2:	4680      	mov	r8, r0
 80090b4:	f7ff fbc0 	bl	8008838 <__malloc_lock>
 80090b8:	f854 7c04 	ldr.w	r7, [r4, #-4]
 80090bc:	4962      	ldr	r1, [pc, #392]	; (8009248 <_free_r+0x1a0>)
 80090be:	f027 0201 	bic.w	r2, r7, #1
 80090c2:	f1a4 0508 	sub.w	r5, r4, #8
 80090c6:	18ab      	adds	r3, r5, r2
 80090c8:	688e      	ldr	r6, [r1, #8]
 80090ca:	6858      	ldr	r0, [r3, #4]
 80090cc:	429e      	cmp	r6, r3
 80090ce:	f020 0003 	bic.w	r0, r0, #3
 80090d2:	d05a      	beq.n	800918a <_free_r+0xe2>
 80090d4:	07fe      	lsls	r6, r7, #31
 80090d6:	6058      	str	r0, [r3, #4]
 80090d8:	d40b      	bmi.n	80090f2 <_free_r+0x4a>
 80090da:	f854 7c08 	ldr.w	r7, [r4, #-8]
 80090de:	1bed      	subs	r5, r5, r7
 80090e0:	f101 0e08 	add.w	lr, r1, #8
 80090e4:	68ac      	ldr	r4, [r5, #8]
 80090e6:	4574      	cmp	r4, lr
 80090e8:	443a      	add	r2, r7
 80090ea:	d067      	beq.n	80091bc <_free_r+0x114>
 80090ec:	68ef      	ldr	r7, [r5, #12]
 80090ee:	60e7      	str	r7, [r4, #12]
 80090f0:	60bc      	str	r4, [r7, #8]
 80090f2:	181c      	adds	r4, r3, r0
 80090f4:	6864      	ldr	r4, [r4, #4]
 80090f6:	07e4      	lsls	r4, r4, #31
 80090f8:	d40c      	bmi.n	8009114 <_free_r+0x6c>
 80090fa:	4f54      	ldr	r7, [pc, #336]	; (800924c <_free_r+0x1a4>)
 80090fc:	689c      	ldr	r4, [r3, #8]
 80090fe:	42bc      	cmp	r4, r7
 8009100:	4402      	add	r2, r0
 8009102:	d07c      	beq.n	80091fe <_free_r+0x156>
 8009104:	68d8      	ldr	r0, [r3, #12]
 8009106:	60e0      	str	r0, [r4, #12]
 8009108:	f042 0301 	orr.w	r3, r2, #1
 800910c:	6084      	str	r4, [r0, #8]
 800910e:	606b      	str	r3, [r5, #4]
 8009110:	50aa      	str	r2, [r5, r2]
 8009112:	e003      	b.n	800911c <_free_r+0x74>
 8009114:	f042 0301 	orr.w	r3, r2, #1
 8009118:	606b      	str	r3, [r5, #4]
 800911a:	50aa      	str	r2, [r5, r2]
 800911c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8009120:	d214      	bcs.n	800914c <_free_r+0xa4>
 8009122:	08d2      	lsrs	r2, r2, #3
 8009124:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 8009128:	6848      	ldr	r0, [r1, #4]
 800912a:	689f      	ldr	r7, [r3, #8]
 800912c:	60af      	str	r7, [r5, #8]
 800912e:	1092      	asrs	r2, r2, #2
 8009130:	2401      	movs	r4, #1
 8009132:	fa04 f202 	lsl.w	r2, r4, r2
 8009136:	4310      	orrs	r0, r2
 8009138:	60eb      	str	r3, [r5, #12]
 800913a:	6048      	str	r0, [r1, #4]
 800913c:	609d      	str	r5, [r3, #8]
 800913e:	60fd      	str	r5, [r7, #12]
 8009140:	4640      	mov	r0, r8
 8009142:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009146:	f7ff bb79 	b.w	800883c <__malloc_unlock>
 800914a:	4770      	bx	lr
 800914c:	0a53      	lsrs	r3, r2, #9
 800914e:	2b04      	cmp	r3, #4
 8009150:	d847      	bhi.n	80091e2 <_free_r+0x13a>
 8009152:	0993      	lsrs	r3, r2, #6
 8009154:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8009158:	0060      	lsls	r0, r4, #1
 800915a:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 800915e:	493a      	ldr	r1, [pc, #232]	; (8009248 <_free_r+0x1a0>)
 8009160:	6883      	ldr	r3, [r0, #8]
 8009162:	4283      	cmp	r3, r0
 8009164:	d043      	beq.n	80091ee <_free_r+0x146>
 8009166:	6859      	ldr	r1, [r3, #4]
 8009168:	f021 0103 	bic.w	r1, r1, #3
 800916c:	4291      	cmp	r1, r2
 800916e:	d902      	bls.n	8009176 <_free_r+0xce>
 8009170:	689b      	ldr	r3, [r3, #8]
 8009172:	4298      	cmp	r0, r3
 8009174:	d1f7      	bne.n	8009166 <_free_r+0xbe>
 8009176:	68da      	ldr	r2, [r3, #12]
 8009178:	60ea      	str	r2, [r5, #12]
 800917a:	60ab      	str	r3, [r5, #8]
 800917c:	4640      	mov	r0, r8
 800917e:	6095      	str	r5, [r2, #8]
 8009180:	60dd      	str	r5, [r3, #12]
 8009182:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009186:	f7ff bb59 	b.w	800883c <__malloc_unlock>
 800918a:	07ff      	lsls	r7, r7, #31
 800918c:	4402      	add	r2, r0
 800918e:	d407      	bmi.n	80091a0 <_free_r+0xf8>
 8009190:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8009194:	1aed      	subs	r5, r5, r3
 8009196:	441a      	add	r2, r3
 8009198:	68a8      	ldr	r0, [r5, #8]
 800919a:	68eb      	ldr	r3, [r5, #12]
 800919c:	60c3      	str	r3, [r0, #12]
 800919e:	6098      	str	r0, [r3, #8]
 80091a0:	4b2b      	ldr	r3, [pc, #172]	; (8009250 <_free_r+0x1a8>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f042 0001 	orr.w	r0, r2, #1
 80091a8:	429a      	cmp	r2, r3
 80091aa:	6068      	str	r0, [r5, #4]
 80091ac:	608d      	str	r5, [r1, #8]
 80091ae:	d3c7      	bcc.n	8009140 <_free_r+0x98>
 80091b0:	4b28      	ldr	r3, [pc, #160]	; (8009254 <_free_r+0x1ac>)
 80091b2:	4640      	mov	r0, r8
 80091b4:	6819      	ldr	r1, [r3, #0]
 80091b6:	f7ff ff29 	bl	800900c <_malloc_trim_r>
 80091ba:	e7c1      	b.n	8009140 <_free_r+0x98>
 80091bc:	1819      	adds	r1, r3, r0
 80091be:	6849      	ldr	r1, [r1, #4]
 80091c0:	07c9      	lsls	r1, r1, #31
 80091c2:	d409      	bmi.n	80091d8 <_free_r+0x130>
 80091c4:	68d9      	ldr	r1, [r3, #12]
 80091c6:	689b      	ldr	r3, [r3, #8]
 80091c8:	4402      	add	r2, r0
 80091ca:	f042 0001 	orr.w	r0, r2, #1
 80091ce:	60d9      	str	r1, [r3, #12]
 80091d0:	608b      	str	r3, [r1, #8]
 80091d2:	6068      	str	r0, [r5, #4]
 80091d4:	50aa      	str	r2, [r5, r2]
 80091d6:	e7b3      	b.n	8009140 <_free_r+0x98>
 80091d8:	f042 0301 	orr.w	r3, r2, #1
 80091dc:	606b      	str	r3, [r5, #4]
 80091de:	50aa      	str	r2, [r5, r2]
 80091e0:	e7ae      	b.n	8009140 <_free_r+0x98>
 80091e2:	2b14      	cmp	r3, #20
 80091e4:	d814      	bhi.n	8009210 <_free_r+0x168>
 80091e6:	f103 045b 	add.w	r4, r3, #91	; 0x5b
 80091ea:	0060      	lsls	r0, r4, #1
 80091ec:	e7b5      	b.n	800915a <_free_r+0xb2>
 80091ee:	684a      	ldr	r2, [r1, #4]
 80091f0:	10a4      	asrs	r4, r4, #2
 80091f2:	2001      	movs	r0, #1
 80091f4:	40a0      	lsls	r0, r4
 80091f6:	4302      	orrs	r2, r0
 80091f8:	604a      	str	r2, [r1, #4]
 80091fa:	461a      	mov	r2, r3
 80091fc:	e7bc      	b.n	8009178 <_free_r+0xd0>
 80091fe:	f042 0301 	orr.w	r3, r2, #1
 8009202:	614d      	str	r5, [r1, #20]
 8009204:	610d      	str	r5, [r1, #16]
 8009206:	60ec      	str	r4, [r5, #12]
 8009208:	60ac      	str	r4, [r5, #8]
 800920a:	606b      	str	r3, [r5, #4]
 800920c:	50aa      	str	r2, [r5, r2]
 800920e:	e797      	b.n	8009140 <_free_r+0x98>
 8009210:	2b54      	cmp	r3, #84	; 0x54
 8009212:	d804      	bhi.n	800921e <_free_r+0x176>
 8009214:	0b13      	lsrs	r3, r2, #12
 8009216:	f103 046e 	add.w	r4, r3, #110	; 0x6e
 800921a:	0060      	lsls	r0, r4, #1
 800921c:	e79d      	b.n	800915a <_free_r+0xb2>
 800921e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8009222:	d804      	bhi.n	800922e <_free_r+0x186>
 8009224:	0bd3      	lsrs	r3, r2, #15
 8009226:	f103 0477 	add.w	r4, r3, #119	; 0x77
 800922a:	0060      	lsls	r0, r4, #1
 800922c:	e795      	b.n	800915a <_free_r+0xb2>
 800922e:	f240 5054 	movw	r0, #1364	; 0x554
 8009232:	4283      	cmp	r3, r0
 8009234:	d804      	bhi.n	8009240 <_free_r+0x198>
 8009236:	0c93      	lsrs	r3, r2, #18
 8009238:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 800923c:	0060      	lsls	r0, r4, #1
 800923e:	e78c      	b.n	800915a <_free_r+0xb2>
 8009240:	20fc      	movs	r0, #252	; 0xfc
 8009242:	247e      	movs	r4, #126	; 0x7e
 8009244:	e789      	b.n	800915a <_free_r+0xb2>
 8009246:	bf00      	nop
 8009248:	2000079c 	.word	0x2000079c
 800924c:	200007a4 	.word	0x200007a4
 8009250:	20000ba4 	.word	0x20000ba4
 8009254:	20000bec 	.word	0x20000bec

08009258 <memmove>:
 8009258:	4288      	cmp	r0, r1
 800925a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800925c:	d90d      	bls.n	800927a <memmove+0x22>
 800925e:	188b      	adds	r3, r1, r2
 8009260:	4298      	cmp	r0, r3
 8009262:	d20a      	bcs.n	800927a <memmove+0x22>
 8009264:	1881      	adds	r1, r0, r2
 8009266:	2a00      	cmp	r2, #0
 8009268:	d054      	beq.n	8009314 <memmove+0xbc>
 800926a:	1a9a      	subs	r2, r3, r2
 800926c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009270:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009274:	4293      	cmp	r3, r2
 8009276:	d1f9      	bne.n	800926c <memmove+0x14>
 8009278:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800927a:	2a0f      	cmp	r2, #15
 800927c:	d948      	bls.n	8009310 <memmove+0xb8>
 800927e:	ea40 0301 	orr.w	r3, r0, r1
 8009282:	079b      	lsls	r3, r3, #30
 8009284:	d147      	bne.n	8009316 <memmove+0xbe>
 8009286:	f100 0410 	add.w	r4, r0, #16
 800928a:	f101 0310 	add.w	r3, r1, #16
 800928e:	4615      	mov	r5, r2
 8009290:	f853 6c10 	ldr.w	r6, [r3, #-16]
 8009294:	f844 6c10 	str.w	r6, [r4, #-16]
 8009298:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 800929c:	f844 6c0c 	str.w	r6, [r4, #-12]
 80092a0:	f853 6c08 	ldr.w	r6, [r3, #-8]
 80092a4:	f844 6c08 	str.w	r6, [r4, #-8]
 80092a8:	3d10      	subs	r5, #16
 80092aa:	f853 6c04 	ldr.w	r6, [r3, #-4]
 80092ae:	f844 6c04 	str.w	r6, [r4, #-4]
 80092b2:	2d0f      	cmp	r5, #15
 80092b4:	f103 0310 	add.w	r3, r3, #16
 80092b8:	f104 0410 	add.w	r4, r4, #16
 80092bc:	d8e8      	bhi.n	8009290 <memmove+0x38>
 80092be:	f1a2 0310 	sub.w	r3, r2, #16
 80092c2:	f023 030f 	bic.w	r3, r3, #15
 80092c6:	f002 0e0f 	and.w	lr, r2, #15
 80092ca:	3310      	adds	r3, #16
 80092cc:	f1be 0f03 	cmp.w	lr, #3
 80092d0:	4419      	add	r1, r3
 80092d2:	4403      	add	r3, r0
 80092d4:	d921      	bls.n	800931a <memmove+0xc2>
 80092d6:	1f1e      	subs	r6, r3, #4
 80092d8:	460d      	mov	r5, r1
 80092da:	4674      	mov	r4, lr
 80092dc:	3c04      	subs	r4, #4
 80092de:	f855 7b04 	ldr.w	r7, [r5], #4
 80092e2:	f846 7f04 	str.w	r7, [r6, #4]!
 80092e6:	2c03      	cmp	r4, #3
 80092e8:	d8f8      	bhi.n	80092dc <memmove+0x84>
 80092ea:	f1ae 0404 	sub.w	r4, lr, #4
 80092ee:	f024 0403 	bic.w	r4, r4, #3
 80092f2:	3404      	adds	r4, #4
 80092f4:	4423      	add	r3, r4
 80092f6:	4421      	add	r1, r4
 80092f8:	f002 0203 	and.w	r2, r2, #3
 80092fc:	b152      	cbz	r2, 8009314 <memmove+0xbc>
 80092fe:	3b01      	subs	r3, #1
 8009300:	440a      	add	r2, r1
 8009302:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009306:	f803 4f01 	strb.w	r4, [r3, #1]!
 800930a:	4291      	cmp	r1, r2
 800930c:	d1f9      	bne.n	8009302 <memmove+0xaa>
 800930e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009310:	4603      	mov	r3, r0
 8009312:	e7f3      	b.n	80092fc <memmove+0xa4>
 8009314:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009316:	4603      	mov	r3, r0
 8009318:	e7f1      	b.n	80092fe <memmove+0xa6>
 800931a:	4672      	mov	r2, lr
 800931c:	e7ee      	b.n	80092fc <memmove+0xa4>
 800931e:	bf00      	nop

08009320 <_realloc_r>:
 8009320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009324:	4617      	mov	r7, r2
 8009326:	b083      	sub	sp, #12
 8009328:	460e      	mov	r6, r1
 800932a:	2900      	cmp	r1, #0
 800932c:	f000 80e7 	beq.w	80094fe <_realloc_r+0x1de>
 8009330:	4681      	mov	r9, r0
 8009332:	f107 050b 	add.w	r5, r7, #11
 8009336:	f7ff fa7f 	bl	8008838 <__malloc_lock>
 800933a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800933e:	2d16      	cmp	r5, #22
 8009340:	f023 0403 	bic.w	r4, r3, #3
 8009344:	f1a6 0808 	sub.w	r8, r6, #8
 8009348:	d84c      	bhi.n	80093e4 <_realloc_r+0xc4>
 800934a:	2210      	movs	r2, #16
 800934c:	4615      	mov	r5, r2
 800934e:	42af      	cmp	r7, r5
 8009350:	d84d      	bhi.n	80093ee <_realloc_r+0xce>
 8009352:	4294      	cmp	r4, r2
 8009354:	f280 8084 	bge.w	8009460 <_realloc_r+0x140>
 8009358:	f8df b3ac 	ldr.w	fp, [pc, #940]	; 8009708 <_realloc_r+0x3e8>
 800935c:	f8db 0008 	ldr.w	r0, [fp, #8]
 8009360:	eb08 0104 	add.w	r1, r8, r4
 8009364:	4288      	cmp	r0, r1
 8009366:	f000 80d6 	beq.w	8009516 <_realloc_r+0x1f6>
 800936a:	6848      	ldr	r0, [r1, #4]
 800936c:	f020 0e01 	bic.w	lr, r0, #1
 8009370:	448e      	add	lr, r1
 8009372:	f8de e004 	ldr.w	lr, [lr, #4]
 8009376:	f01e 0f01 	tst.w	lr, #1
 800937a:	d13f      	bne.n	80093fc <_realloc_r+0xdc>
 800937c:	f020 0003 	bic.w	r0, r0, #3
 8009380:	4420      	add	r0, r4
 8009382:	4290      	cmp	r0, r2
 8009384:	f280 80c1 	bge.w	800950a <_realloc_r+0x1ea>
 8009388:	07db      	lsls	r3, r3, #31
 800938a:	f100 808f 	bmi.w	80094ac <_realloc_r+0x18c>
 800938e:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8009392:	ebc3 0a08 	rsb	sl, r3, r8
 8009396:	f8da 3004 	ldr.w	r3, [sl, #4]
 800939a:	f023 0303 	bic.w	r3, r3, #3
 800939e:	eb00 0e03 	add.w	lr, r0, r3
 80093a2:	4596      	cmp	lr, r2
 80093a4:	db34      	blt.n	8009410 <_realloc_r+0xf0>
 80093a6:	68cb      	ldr	r3, [r1, #12]
 80093a8:	688a      	ldr	r2, [r1, #8]
 80093aa:	4657      	mov	r7, sl
 80093ac:	60d3      	str	r3, [r2, #12]
 80093ae:	609a      	str	r2, [r3, #8]
 80093b0:	f857 1f08 	ldr.w	r1, [r7, #8]!
 80093b4:	f8da 300c 	ldr.w	r3, [sl, #12]
 80093b8:	60cb      	str	r3, [r1, #12]
 80093ba:	1f22      	subs	r2, r4, #4
 80093bc:	2a24      	cmp	r2, #36	; 0x24
 80093be:	6099      	str	r1, [r3, #8]
 80093c0:	f200 8136 	bhi.w	8009630 <_realloc_r+0x310>
 80093c4:	2a13      	cmp	r2, #19
 80093c6:	f240 80fd 	bls.w	80095c4 <_realloc_r+0x2a4>
 80093ca:	6833      	ldr	r3, [r6, #0]
 80093cc:	f8ca 3008 	str.w	r3, [sl, #8]
 80093d0:	6873      	ldr	r3, [r6, #4]
 80093d2:	f8ca 300c 	str.w	r3, [sl, #12]
 80093d6:	2a1b      	cmp	r2, #27
 80093d8:	f200 8140 	bhi.w	800965c <_realloc_r+0x33c>
 80093dc:	3608      	adds	r6, #8
 80093de:	f10a 0310 	add.w	r3, sl, #16
 80093e2:	e0f0      	b.n	80095c6 <_realloc_r+0x2a6>
 80093e4:	f025 0507 	bic.w	r5, r5, #7
 80093e8:	2d00      	cmp	r5, #0
 80093ea:	462a      	mov	r2, r5
 80093ec:	daaf      	bge.n	800934e <_realloc_r+0x2e>
 80093ee:	230c      	movs	r3, #12
 80093f0:	2000      	movs	r0, #0
 80093f2:	f8c9 3000 	str.w	r3, [r9]
 80093f6:	b003      	add	sp, #12
 80093f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093fc:	07d9      	lsls	r1, r3, #31
 80093fe:	d455      	bmi.n	80094ac <_realloc_r+0x18c>
 8009400:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8009404:	ebc3 0a08 	rsb	sl, r3, r8
 8009408:	f8da 3004 	ldr.w	r3, [sl, #4]
 800940c:	f023 0303 	bic.w	r3, r3, #3
 8009410:	4423      	add	r3, r4
 8009412:	4293      	cmp	r3, r2
 8009414:	db4a      	blt.n	80094ac <_realloc_r+0x18c>
 8009416:	4657      	mov	r7, sl
 8009418:	f8da 100c 	ldr.w	r1, [sl, #12]
 800941c:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8009420:	1f22      	subs	r2, r4, #4
 8009422:	2a24      	cmp	r2, #36	; 0x24
 8009424:	60c1      	str	r1, [r0, #12]
 8009426:	6088      	str	r0, [r1, #8]
 8009428:	f200 810e 	bhi.w	8009648 <_realloc_r+0x328>
 800942c:	2a13      	cmp	r2, #19
 800942e:	f240 8109 	bls.w	8009644 <_realloc_r+0x324>
 8009432:	6831      	ldr	r1, [r6, #0]
 8009434:	f8ca 1008 	str.w	r1, [sl, #8]
 8009438:	6871      	ldr	r1, [r6, #4]
 800943a:	f8ca 100c 	str.w	r1, [sl, #12]
 800943e:	2a1b      	cmp	r2, #27
 8009440:	f200 8121 	bhi.w	8009686 <_realloc_r+0x366>
 8009444:	3608      	adds	r6, #8
 8009446:	f10a 0210 	add.w	r2, sl, #16
 800944a:	6831      	ldr	r1, [r6, #0]
 800944c:	6011      	str	r1, [r2, #0]
 800944e:	6871      	ldr	r1, [r6, #4]
 8009450:	6051      	str	r1, [r2, #4]
 8009452:	68b1      	ldr	r1, [r6, #8]
 8009454:	6091      	str	r1, [r2, #8]
 8009456:	461c      	mov	r4, r3
 8009458:	f8da 3004 	ldr.w	r3, [sl, #4]
 800945c:	463e      	mov	r6, r7
 800945e:	46d0      	mov	r8, sl
 8009460:	1b62      	subs	r2, r4, r5
 8009462:	2a0f      	cmp	r2, #15
 8009464:	f003 0301 	and.w	r3, r3, #1
 8009468:	d80e      	bhi.n	8009488 <_realloc_r+0x168>
 800946a:	4323      	orrs	r3, r4
 800946c:	4444      	add	r4, r8
 800946e:	f8c8 3004 	str.w	r3, [r8, #4]
 8009472:	6863      	ldr	r3, [r4, #4]
 8009474:	f043 0301 	orr.w	r3, r3, #1
 8009478:	6063      	str	r3, [r4, #4]
 800947a:	4648      	mov	r0, r9
 800947c:	f7ff f9de 	bl	800883c <__malloc_unlock>
 8009480:	4630      	mov	r0, r6
 8009482:	b003      	add	sp, #12
 8009484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009488:	eb08 0105 	add.w	r1, r8, r5
 800948c:	431d      	orrs	r5, r3
 800948e:	f042 0301 	orr.w	r3, r2, #1
 8009492:	440a      	add	r2, r1
 8009494:	f8c8 5004 	str.w	r5, [r8, #4]
 8009498:	604b      	str	r3, [r1, #4]
 800949a:	6853      	ldr	r3, [r2, #4]
 800949c:	f043 0301 	orr.w	r3, r3, #1
 80094a0:	3108      	adds	r1, #8
 80094a2:	6053      	str	r3, [r2, #4]
 80094a4:	4648      	mov	r0, r9
 80094a6:	f7ff fdff 	bl	80090a8 <_free_r>
 80094aa:	e7e6      	b.n	800947a <_realloc_r+0x15a>
 80094ac:	4639      	mov	r1, r7
 80094ae:	4648      	mov	r0, r9
 80094b0:	f7fe feea 	bl	8008288 <_malloc_r>
 80094b4:	4607      	mov	r7, r0
 80094b6:	b1d8      	cbz	r0, 80094f0 <_realloc_r+0x1d0>
 80094b8:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80094bc:	f023 0201 	bic.w	r2, r3, #1
 80094c0:	4442      	add	r2, r8
 80094c2:	f1a0 0108 	sub.w	r1, r0, #8
 80094c6:	4291      	cmp	r1, r2
 80094c8:	f000 80ac 	beq.w	8009624 <_realloc_r+0x304>
 80094cc:	1f22      	subs	r2, r4, #4
 80094ce:	2a24      	cmp	r2, #36	; 0x24
 80094d0:	f200 8099 	bhi.w	8009606 <_realloc_r+0x2e6>
 80094d4:	2a13      	cmp	r2, #19
 80094d6:	d86a      	bhi.n	80095ae <_realloc_r+0x28e>
 80094d8:	4603      	mov	r3, r0
 80094da:	4632      	mov	r2, r6
 80094dc:	6811      	ldr	r1, [r2, #0]
 80094de:	6019      	str	r1, [r3, #0]
 80094e0:	6851      	ldr	r1, [r2, #4]
 80094e2:	6059      	str	r1, [r3, #4]
 80094e4:	6892      	ldr	r2, [r2, #8]
 80094e6:	609a      	str	r2, [r3, #8]
 80094e8:	4631      	mov	r1, r6
 80094ea:	4648      	mov	r0, r9
 80094ec:	f7ff fddc 	bl	80090a8 <_free_r>
 80094f0:	4648      	mov	r0, r9
 80094f2:	f7ff f9a3 	bl	800883c <__malloc_unlock>
 80094f6:	4638      	mov	r0, r7
 80094f8:	b003      	add	sp, #12
 80094fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094fe:	4611      	mov	r1, r2
 8009500:	b003      	add	sp, #12
 8009502:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009506:	f7fe bebf 	b.w	8008288 <_malloc_r>
 800950a:	68ca      	ldr	r2, [r1, #12]
 800950c:	6889      	ldr	r1, [r1, #8]
 800950e:	4604      	mov	r4, r0
 8009510:	60ca      	str	r2, [r1, #12]
 8009512:	6091      	str	r1, [r2, #8]
 8009514:	e7a4      	b.n	8009460 <_realloc_r+0x140>
 8009516:	6841      	ldr	r1, [r0, #4]
 8009518:	f021 0103 	bic.w	r1, r1, #3
 800951c:	4421      	add	r1, r4
 800951e:	f105 0010 	add.w	r0, r5, #16
 8009522:	4281      	cmp	r1, r0
 8009524:	da5b      	bge.n	80095de <_realloc_r+0x2be>
 8009526:	07db      	lsls	r3, r3, #31
 8009528:	d4c0      	bmi.n	80094ac <_realloc_r+0x18c>
 800952a:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800952e:	ebc3 0a08 	rsb	sl, r3, r8
 8009532:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009536:	f023 0303 	bic.w	r3, r3, #3
 800953a:	eb01 0c03 	add.w	ip, r1, r3
 800953e:	4560      	cmp	r0, ip
 8009540:	f73f af66 	bgt.w	8009410 <_realloc_r+0xf0>
 8009544:	4657      	mov	r7, sl
 8009546:	f8da 300c 	ldr.w	r3, [sl, #12]
 800954a:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800954e:	1f22      	subs	r2, r4, #4
 8009550:	2a24      	cmp	r2, #36	; 0x24
 8009552:	60cb      	str	r3, [r1, #12]
 8009554:	6099      	str	r1, [r3, #8]
 8009556:	f200 80b8 	bhi.w	80096ca <_realloc_r+0x3aa>
 800955a:	2a13      	cmp	r2, #19
 800955c:	f240 80a9 	bls.w	80096b2 <_realloc_r+0x392>
 8009560:	6833      	ldr	r3, [r6, #0]
 8009562:	f8ca 3008 	str.w	r3, [sl, #8]
 8009566:	6873      	ldr	r3, [r6, #4]
 8009568:	f8ca 300c 	str.w	r3, [sl, #12]
 800956c:	2a1b      	cmp	r2, #27
 800956e:	f200 80b5 	bhi.w	80096dc <_realloc_r+0x3bc>
 8009572:	3608      	adds	r6, #8
 8009574:	f10a 0310 	add.w	r3, sl, #16
 8009578:	6832      	ldr	r2, [r6, #0]
 800957a:	601a      	str	r2, [r3, #0]
 800957c:	6872      	ldr	r2, [r6, #4]
 800957e:	605a      	str	r2, [r3, #4]
 8009580:	68b2      	ldr	r2, [r6, #8]
 8009582:	609a      	str	r2, [r3, #8]
 8009584:	eb0a 0205 	add.w	r2, sl, r5
 8009588:	ebc5 030c 	rsb	r3, r5, ip
 800958c:	f043 0301 	orr.w	r3, r3, #1
 8009590:	f8cb 2008 	str.w	r2, [fp, #8]
 8009594:	6053      	str	r3, [r2, #4]
 8009596:	f8da 3004 	ldr.w	r3, [sl, #4]
 800959a:	f003 0301 	and.w	r3, r3, #1
 800959e:	431d      	orrs	r5, r3
 80095a0:	4648      	mov	r0, r9
 80095a2:	f8ca 5004 	str.w	r5, [sl, #4]
 80095a6:	f7ff f949 	bl	800883c <__malloc_unlock>
 80095aa:	4638      	mov	r0, r7
 80095ac:	e769      	b.n	8009482 <_realloc_r+0x162>
 80095ae:	6833      	ldr	r3, [r6, #0]
 80095b0:	6003      	str	r3, [r0, #0]
 80095b2:	6873      	ldr	r3, [r6, #4]
 80095b4:	6043      	str	r3, [r0, #4]
 80095b6:	2a1b      	cmp	r2, #27
 80095b8:	d829      	bhi.n	800960e <_realloc_r+0x2ee>
 80095ba:	f100 0308 	add.w	r3, r0, #8
 80095be:	f106 0208 	add.w	r2, r6, #8
 80095c2:	e78b      	b.n	80094dc <_realloc_r+0x1bc>
 80095c4:	463b      	mov	r3, r7
 80095c6:	6832      	ldr	r2, [r6, #0]
 80095c8:	601a      	str	r2, [r3, #0]
 80095ca:	6872      	ldr	r2, [r6, #4]
 80095cc:	605a      	str	r2, [r3, #4]
 80095ce:	68b2      	ldr	r2, [r6, #8]
 80095d0:	609a      	str	r2, [r3, #8]
 80095d2:	463e      	mov	r6, r7
 80095d4:	4674      	mov	r4, lr
 80095d6:	f8da 3004 	ldr.w	r3, [sl, #4]
 80095da:	46d0      	mov	r8, sl
 80095dc:	e740      	b.n	8009460 <_realloc_r+0x140>
 80095de:	eb08 0205 	add.w	r2, r8, r5
 80095e2:	1b4b      	subs	r3, r1, r5
 80095e4:	f043 0301 	orr.w	r3, r3, #1
 80095e8:	f8cb 2008 	str.w	r2, [fp, #8]
 80095ec:	6053      	str	r3, [r2, #4]
 80095ee:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80095f2:	f003 0301 	and.w	r3, r3, #1
 80095f6:	431d      	orrs	r5, r3
 80095f8:	4648      	mov	r0, r9
 80095fa:	f846 5c04 	str.w	r5, [r6, #-4]
 80095fe:	f7ff f91d 	bl	800883c <__malloc_unlock>
 8009602:	4630      	mov	r0, r6
 8009604:	e73d      	b.n	8009482 <_realloc_r+0x162>
 8009606:	4631      	mov	r1, r6
 8009608:	f7ff fe26 	bl	8009258 <memmove>
 800960c:	e76c      	b.n	80094e8 <_realloc_r+0x1c8>
 800960e:	68b3      	ldr	r3, [r6, #8]
 8009610:	6083      	str	r3, [r0, #8]
 8009612:	68f3      	ldr	r3, [r6, #12]
 8009614:	60c3      	str	r3, [r0, #12]
 8009616:	2a24      	cmp	r2, #36	; 0x24
 8009618:	d02c      	beq.n	8009674 <_realloc_r+0x354>
 800961a:	f100 0310 	add.w	r3, r0, #16
 800961e:	f106 0210 	add.w	r2, r6, #16
 8009622:	e75b      	b.n	80094dc <_realloc_r+0x1bc>
 8009624:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8009628:	f022 0203 	bic.w	r2, r2, #3
 800962c:	4414      	add	r4, r2
 800962e:	e717      	b.n	8009460 <_realloc_r+0x140>
 8009630:	4631      	mov	r1, r6
 8009632:	4638      	mov	r0, r7
 8009634:	4674      	mov	r4, lr
 8009636:	463e      	mov	r6, r7
 8009638:	f7ff fe0e 	bl	8009258 <memmove>
 800963c:	46d0      	mov	r8, sl
 800963e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009642:	e70d      	b.n	8009460 <_realloc_r+0x140>
 8009644:	463a      	mov	r2, r7
 8009646:	e700      	b.n	800944a <_realloc_r+0x12a>
 8009648:	4631      	mov	r1, r6
 800964a:	4638      	mov	r0, r7
 800964c:	461c      	mov	r4, r3
 800964e:	463e      	mov	r6, r7
 8009650:	f7ff fe02 	bl	8009258 <memmove>
 8009654:	46d0      	mov	r8, sl
 8009656:	f8da 3004 	ldr.w	r3, [sl, #4]
 800965a:	e701      	b.n	8009460 <_realloc_r+0x140>
 800965c:	68b3      	ldr	r3, [r6, #8]
 800965e:	f8ca 3010 	str.w	r3, [sl, #16]
 8009662:	68f3      	ldr	r3, [r6, #12]
 8009664:	f8ca 3014 	str.w	r3, [sl, #20]
 8009668:	2a24      	cmp	r2, #36	; 0x24
 800966a:	d018      	beq.n	800969e <_realloc_r+0x37e>
 800966c:	3610      	adds	r6, #16
 800966e:	f10a 0318 	add.w	r3, sl, #24
 8009672:	e7a8      	b.n	80095c6 <_realloc_r+0x2a6>
 8009674:	6933      	ldr	r3, [r6, #16]
 8009676:	6103      	str	r3, [r0, #16]
 8009678:	6973      	ldr	r3, [r6, #20]
 800967a:	6143      	str	r3, [r0, #20]
 800967c:	f106 0218 	add.w	r2, r6, #24
 8009680:	f100 0318 	add.w	r3, r0, #24
 8009684:	e72a      	b.n	80094dc <_realloc_r+0x1bc>
 8009686:	68b1      	ldr	r1, [r6, #8]
 8009688:	f8ca 1010 	str.w	r1, [sl, #16]
 800968c:	68f1      	ldr	r1, [r6, #12]
 800968e:	f8ca 1014 	str.w	r1, [sl, #20]
 8009692:	2a24      	cmp	r2, #36	; 0x24
 8009694:	d00f      	beq.n	80096b6 <_realloc_r+0x396>
 8009696:	3610      	adds	r6, #16
 8009698:	f10a 0218 	add.w	r2, sl, #24
 800969c:	e6d5      	b.n	800944a <_realloc_r+0x12a>
 800969e:	6933      	ldr	r3, [r6, #16]
 80096a0:	f8ca 3018 	str.w	r3, [sl, #24]
 80096a4:	6973      	ldr	r3, [r6, #20]
 80096a6:	f8ca 301c 	str.w	r3, [sl, #28]
 80096aa:	3618      	adds	r6, #24
 80096ac:	f10a 0320 	add.w	r3, sl, #32
 80096b0:	e789      	b.n	80095c6 <_realloc_r+0x2a6>
 80096b2:	463b      	mov	r3, r7
 80096b4:	e760      	b.n	8009578 <_realloc_r+0x258>
 80096b6:	6932      	ldr	r2, [r6, #16]
 80096b8:	f8ca 2018 	str.w	r2, [sl, #24]
 80096bc:	6972      	ldr	r2, [r6, #20]
 80096be:	f8ca 201c 	str.w	r2, [sl, #28]
 80096c2:	3618      	adds	r6, #24
 80096c4:	f10a 0220 	add.w	r2, sl, #32
 80096c8:	e6bf      	b.n	800944a <_realloc_r+0x12a>
 80096ca:	4631      	mov	r1, r6
 80096cc:	4638      	mov	r0, r7
 80096ce:	f8cd c004 	str.w	ip, [sp, #4]
 80096d2:	f7ff fdc1 	bl	8009258 <memmove>
 80096d6:	f8dd c004 	ldr.w	ip, [sp, #4]
 80096da:	e753      	b.n	8009584 <_realloc_r+0x264>
 80096dc:	68b3      	ldr	r3, [r6, #8]
 80096de:	f8ca 3010 	str.w	r3, [sl, #16]
 80096e2:	68f3      	ldr	r3, [r6, #12]
 80096e4:	f8ca 3014 	str.w	r3, [sl, #20]
 80096e8:	2a24      	cmp	r2, #36	; 0x24
 80096ea:	d003      	beq.n	80096f4 <_realloc_r+0x3d4>
 80096ec:	3610      	adds	r6, #16
 80096ee:	f10a 0318 	add.w	r3, sl, #24
 80096f2:	e741      	b.n	8009578 <_realloc_r+0x258>
 80096f4:	6933      	ldr	r3, [r6, #16]
 80096f6:	f8ca 3018 	str.w	r3, [sl, #24]
 80096fa:	6973      	ldr	r3, [r6, #20]
 80096fc:	f8ca 301c 	str.w	r3, [sl, #28]
 8009700:	3618      	adds	r6, #24
 8009702:	f10a 0320 	add.w	r3, sl, #32
 8009706:	e737      	b.n	8009578 <_realloc_r+0x258>
 8009708:	2000079c 	.word	0x2000079c

0800970c <__aeabi_d2iz>:
 800970c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8009710:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8009714:	d215      	bcs.n	8009742 <__aeabi_d2iz+0x36>
 8009716:	d511      	bpl.n	800973c <__aeabi_d2iz+0x30>
 8009718:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800971c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8009720:	d912      	bls.n	8009748 <__aeabi_d2iz+0x3c>
 8009722:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8009726:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800972a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800972e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8009732:	fa23 f002 	lsr.w	r0, r3, r2
 8009736:	bf18      	it	ne
 8009738:	4240      	negne	r0, r0
 800973a:	4770      	bx	lr
 800973c:	f04f 0000 	mov.w	r0, #0
 8009740:	4770      	bx	lr
 8009742:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8009746:	d105      	bne.n	8009754 <__aeabi_d2iz+0x48>
 8009748:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800974c:	bf08      	it	eq
 800974e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8009752:	4770      	bx	lr
 8009754:	f04f 0000 	mov.w	r0, #0
 8009758:	4770      	bx	lr
 800975a:	bf00      	nop

0800975c <g_xmc_vadc_group_array>:
 800975c:	4400 4000 4800 4000 4c00 4000 5000 4000     .D.@.H.@.L.@.P.@

0800976c <PWM_BC_0_PhUHighpin>:
 800976c:	8000 4802 0005 0000                         ...H....

08009774 <PWM_BC_0_PhULowpin>:
 8009774:	8000 4802 0002 0000                         ...H....

0800977c <PWM_BC_0_PhVHighpin>:
 800977c:	8000 4802 0004 0000                         ...H....

08009784 <PWM_BC_0_PhVLowpin>:
 8009784:	8000 4802 0001 0000                         ...H....

0800978c <PWM_BC_0_PhWHighpin>:
 800978c:	8000 4802 0003 0000                         ...H....

08009794 <PWM_BC_0_PhWLowpin>:
 8009794:	8000 4802 0000 0000                         ...H....

0800979c <PWM_BC_0_PhUHighpin_Config>:
 800979c:	0098 0000 0000 0001 0004 0000               ............

080097a8 <PWM_BC_0_PhULowpin_Config>:
 80097a8:	0098 0000 0000 0001 0004 0000               ............

080097b4 <PWM_BC_0_PhVHighpin_Config>:
 80097b4:	0098 0000 0000 0001 0004 0000               ............

080097c0 <PWM_BC_0_PhVLowpin_Config>:
 80097c0:	0098 0000 0000 0001 0004 0000               ............

080097cc <PWM_BC_0_PhWHighpin_Config>:
 80097cc:	0098 0000 0000 0001 0004 0000               ............

080097d8 <PWM_BC_0_PhWLowpin_Config>:
 80097d8:	0098 0000 0000 0001 0004 0000               ............

080097e4 <PWM_BC_0_Inverterpin>:
 80097e4:	8500 4802 0002 0000                         ...H....

080097ec <PWM_BC_0_Inverterpin_Config>:
 80097ec:	0080 0000 0000 0001 0004 0000               ............

080097f8 <PWM_BC_0_SliceUConfig>:
 80097f8:	0100 4002 0000 0000                         ...@....

08009800 <PWM_BC_0_SliceVConfig>:
 8009800:	0200 4002 0001 0000                         ...@....

08009808 <PWM_BC_0_SliceWConfig>:
 8009808:	0300 4002 0002 0000                         ...@....

08009810 <PWM_BC_0_ExtStartConfig>:
 8009810:	0107 0000                                   ....

08009814 <PWM_BC_0_Timer_InitHandle>:
 8009814:	0001 0600 000f 0000 0014 0000 0000 0000     ................

08009824 <PWM_BC_0_Config>:
 8009824:	0001 0000 0010 0000 0100 0000 0003 0000     ................
 8009834:	0030 0000 0300 0000 0e00 0727 0100 0000     0.........'.....
 8009844:	0003 0000 0000 0000 0000 0000 8702 0393     ................
 8009854:	0727 0000 0001 0000 0000 0000 0120 0021     '........... .!.
 8009864:	0201 0210 0012 0102 0000 0000 0102 0012     ................
 8009874:	0210 0201 0021 0120 0000 0111 0d00 0d0d     ....!. .........
 8009884:	0100 0100 0101 0100 0000 0000               ............

08009890 <PeriodMatchInt>:
 8009890:	373f 0100                                   ?7..

08009894 <INT_LCD_Timer>:
 8009894:	3f2e 0100                                   .?..

08009898 <INT_Timer1000ms>:
 8009898:	2831 0100                                   1(..

0800989c <INT_Hall1>:
 800989c:	1404 0100                                   ....

080098a0 <INT_Timer20ms>:
 80098a0:	2839 0100                                   9(..

080098a4 <group_init_handle0>:
	...

080098b8 <group_init_handle1>:
	...

080098cc <group_init_handle2>:
	...

080098e0 <group_init_handle3>:
	...

080098f4 <global_config>:
 80098f4:	0000 0000 0003 0000 0000 0000 0000 0000     ................
	...

0800990c <EVENT_GENERATOR_0_OGU_Config>:
 800990c:	0030 0000                                   0...

08009910 <EVENT_DETECTOR_0_ETL_Config>:
 8009910:	0008 0000 0139 0000                         ....9...

08009918 <Hall1>:
 8009918:	8000 4802 0000 0000 0000 0000 0000 0000     ...H............
 8009928:	000c 0000                                   ....

0800992c <Hall2>:
 800992c:	8300 4802 0000 0000 0000 0000 0000 0000     ...H............
 800993c:	0001 0000                                   ....

08009940 <LED2>:
 8009940:	8100 4802 0080 0000 0000 0001 0000 0000     ...H............
 8009950:	0001 0000                                   ....

08009954 <LED1>:
 8009954:	8100 4802 0080 0000 0000 0001 0000 0000     ...H............
 8009964:	0000 0000                                   ....

08009968 <BTN_1>:
 8009968:	8500 4802 0008 0000 0000 0000 0000 0000     ...H............
 8009978:	0007 0000                                   ....

0800997c <BTN_2>:
 800997c:	8200 4802 0008 0000 0000 0000 0000 0000     ...H............
 800998c:	0006 0000                                   ....

08009990 <O_G_EN>:
 8009990:	8000 4802 0080 0000 0000 0001 0000 0000     ...H............
 80099a0:	0007 0000                                   ....

080099a4 <I_nFAULT>:
 80099a4:	8000 4802 0000 0000 0000 0000 0000 0000     ...H............
 80099b4:	0006 0000                                   ....

080099b8 <Hall3>:
 80099b8:	8200 4802 0000 0000 0000 0000 0000 0000     ...H............
 80099c8:	0001 0000                                   ....

080099cc <Motor_Start>:
 80099cc:	8300 4802 0000 0000 0000 0000 0000 0000     ...H............
 80099dc:	0002 0000                                   ....

080099e0 <IN_Temp>:
 80099e0:	8500 4802 0000 0000 0000 0000 0000 0000     ...H............
 80099f0:	0001 0000                                   ....

080099f4 <LCD_Enable>:
 80099f4:	8100 4802 0080 0000 0000 0001 0000 0000     ...H............
 8009a04:	000c 0000                                   ....

08009a08 <LCD_RS>:
 8009a08:	8100 4802 0080 0000 0000 0001 0000 0000     ...H............
 8009a18:	000d 0000                                   ....

08009a1c <LCD_RW>:
 8009a1c:	8000 4802 0080 0000 0000 0001 0000 0000     ...H............
 8009a2c:	0008 0000 0250 0104 0000 0001 0000 0000     ....P...........
 8009a3c:	0000 0001 0101 0101                         ........

08009a44 <LCD_DATA_pin_list>:
 8009a44:	8100 4802 0002 0000 8100 4802 0003 0000     ...H.......H....
 8009a54:	8100 4802 0004 0000 8100 4802 0005 0000     ...H.......H....
 8009a64:	8100 4802 0008 0000 8100 4802 0009 0000     ...H.......H....
 8009a74:	8100 4802 000a 0000 8100 4802 000b 0000     ...H.......H....

08009a84 <global_iclass_config>:
 8009a84:	001f 0000                                   ....

08009a88 <backgnd_config>:
 8009a88:	0005 0000 0100 0000 0010 0000 2a25 0064     ............%*d.
 8009a98:	2a25 642e 0000 0000 2a25 322e 0066 0000     %*.d....%*.2f...

08009aa8 <rtConstP_lut>:
 8009aa8:	0000 0000 0000 405b 0000 0000 0000 4058     ......[@......X@
 8009ab8:	0000 0000 0000 4057 0000 0000 8000 4055     ......W@......U@
 8009ac8:	0000 0000 0000 4055 0000 0000 0000 4054     ......U@......T@
 8009ad8:	0000 0000 8000 4053 0000 0000 0000 4053     ......S@......S@
 8009ae8:	0000 0000 8000 4052 0000 0000 c000 4052     ......R@......R@
 8009af8:	0000 0000 0000 4052 0000 0000 8000 4051     ......R@......Q@
 8009b08:	0000 0000 0000 4045 0000 0000 0000 4043     ......E@......C@
 8009b18:	0000 0000 0000 4042 0000 0000 0000 4041     ......B@......A@
 8009b28:	0000 0000 0000 4040 0000 0000 0000 403e     ......@@......>@
	...
 8009b48:	cccd cccc cccc 3ff0 6666 6666 6666 3ff2     .......?ffffff.?
 8009b58:	3333 3333 3333 3ff3 cccd cccc cccc 3ff4     333333.?.......?
 8009b68:	6666 6666 6666 3ff6 0000 0000 0000 3ff8     ffffff.?.......?
 8009b78:	999a 9999 9999 3ff9 3333 3333 3333 3ffb     .......?333333.?
 8009b88:	6666 6666 6666 3ffe 0000 0000 0000 4000     ffffff.?.......@
 8009b98:	cccd cccc cccc 4000 999a 9999 9999 4001     .......@.......@
 8009ba8:	3333 3333 3333 4003 cccd cccc cccc 4004     333333.@.......@
 8009bb8:	6666 6666 6666 4006 0000 0000 0000 4008     ffffff.@.......@
 8009bc8:	3333 3333 3333 4009 0000 0000 0000 400a     333333.@.......@
	...
 8009be8:	6f6c 0067 0043 0000                         log.C...

08009bf0 <blanks.6794>:
 8009bf0:	2020 2020 2020 2020 2020 2020 2020 2020                     
 8009c00:	4e49 0046 6e69 0066 414e 004e 616e 006e     INF.inf.NAN.nan.
 8009c10:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
 8009c20:	0000 0000 3130 3332 3534 3736 3938 6261     ....0123456789ab
 8009c30:	6463 6665 0000 0000 6e28 6c75 296c 0000     cdef....(null)..
 8009c40:	0030 0000                                   0...

08009c44 <zeroes.6795>:
 8009c44:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
 8009c54:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.
 8009c64:	4f50 4953 0058 0000 002e 0000               POSIX.......

08009c70 <__mprec_tens>:
 8009c70:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 8009c80:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 8009c90:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 8009ca0:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 8009cb0:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 8009cc0:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 8009cd0:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 8009ce0:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 8009cf0:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 8009d00:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 8009d10:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 8009d20:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 8009d30:	9db4 79d9 7843 44ea                         ...yCx.D

08009d38 <__mprec_bigtens>:
 8009d38:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 8009d48:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 8009d58:	bf3c 7f73 4fdd 7515                         <.s..O.u

08009d60 <p05.5265>:
 8009d60:	0005 0000 0019 0000 007d 0000               ........}...
